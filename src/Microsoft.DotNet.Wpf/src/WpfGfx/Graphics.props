<Project ToolsVersion="14.0" InitialTargets="D3DXUsageWarning;CopyGeneratedIncludeFilesToIntermediateFolder" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="Graphics.Paths.props"/>
  
  <PropertyGroup>
    <UseDirectXMath>true</UseDirectXMath>
  </PropertyGroup>

  <PropertyGroup>
    <!-- These files should be generated by build out of $(GraphicsIncludePath) and consumed from $(IntermediateOutputPath)-->
    <WpfGraphicsIncludeProcessedFilesPath>$(WpfGraphicsIncludePath)processed\</WpfGraphicsIncludeProcessedFilesPath>
  </PropertyGroup>

  <PropertyGroup>
    <GraphicsIncludePath>
      $(GraphicsIncludePath);
      $(IncludePath);
      $(WpfGraphicsIncludePath);
      $(WpfGraphicsIncludePath)Generated;
      $(WpfGraphicsSharedIncludePath);
      $(WpfGraphicsPath)common;
      $(WpfGraphicsPath)core;
      $(WpfGraphicsPath)external\inc;
      $(WpfGraphicsPath)common\DirectXLayer;
      $(WpfGraphicsPath)common\DirectXLayer\interfaces;
      $(WpfGraphicsPath)common\DirectXLayer\factories;
      $(WpfGraphicsPath)common\DirectXLayer\D3DX9;
      $(WpfGraphicsSharedPath)util\utillib;
      $(GraphicsIncludeProcessedFilesFolder);
      $(IntermediateOutputPath);
    </GraphicsIncludePath>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <ClCompile>
      <WarningLevel>Level4</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);_ALLOW_KEYWORD_MACROS;_WCTYPE_INLINE_DEFINED;override=__override</PreprocessorDefinitions>
      <PreprocessorDefinitions Condition="'$(Configuration)'=='Debug'">%(PreprocessorDefinitions);PERFMETER=1</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories);$(GraphicsIncludePath)</AdditionalIncludeDirectories>

      <!-- Significant portions of wpfgfx will fail to build unless these properties are set to false -->
      <DisableLanguageExtensions>false</DisableLanguageExtensions>
      <ConformanceMode>false</ConformanceMode>
      <!-- 
        C4595: non-member operator new or delete functions may not be declared inline
        C4239: nonstandard extension used: 'type cast': conversion from 'C_u32x4' to 'C_s32x4 &'
      -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4239;4595</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>
  
  <ItemDefinitionGroup Condition="$(Architecture.EndsWith('64'))">
    <ClCompile>
      <!-- 
        C4324 'Foo' : structure was padded due to __declspec(align()) 
               Most of the time, the source of this warning is out of our control, for e.g., SLIST_ENTRY
        C4471: 'enumeration': a forward declaration of an unscoped enumeration must have an underlying type (int assumed)
      -->
      <DisableSpecificWarnings>%(DisableSpecificWarnings);4324;;4471</DisableSpecificWarnings>
    </ClCompile>
  </ItemDefinitionGroup>

  <!-- Select between DirectXMath based implementation vs. -->
  <!-- D3D Extensions (D3DX) API based implementation      -->
  <!-- In .NET Core,  there is no way to build D3DX based  -->
  <!-- implementation. We will soon be removing the dead   -->
  <!-- code that exposes the D3DX9 based implementation    -->
  <ItemDefinitionGroup Condition="'$(UseDirectXMath)' == 'true'">
    <!-- DIRECTXMATH should be defined so that sources can use conditional -->
    <!-- compilation to select DirectXMath based routines                  -->
    <ClCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);DIRECTXMATH</PreprocessorDefinitions>
    </ClCompile>
    <!-- DirectX Math routines do not need a static library - they  -->
    <!-- come from inlined routines in header files.                -->
    <!-- d3d9.lib is needed for core DirectX 9 routines             -->
    <!-- d3dcompiler.lib is needed for D3DCompile API               -->
    <Link Condition="'$(ConfigurationType)'!='StaticLibrary'">
      <AdditionalDependencies>%(AdditionalDependencies);d3d9.lib;$(D3DCompilerDllBaseName).lib</AdditionalDependencies>
      <AdditionalOptions>%(AdditionalOptions) /dllrename:$(D3DCompilerDllBaseName)$(D3DCompilerVersion)=$(D3DCompilerDllBaseName)$(D3DCompilerVersion)$(WpfVersionSuffix)</AdditionalOptions>
    </Link>
  </ItemDefinitionGroup>

  <!-- The .NET Core code-base and build environment does not carry a copy of -->
  <!-- 2010 era D3DX SDK headers and static libs                              -->
  <PropertyGroup Condition="'$(UseDirectXMath)' != 'true'">
    <D3DXLibPath>Unavailable</D3DXLibPath>
    <D3DXIncludePath>Unavailable</D3DXIncludePath>

    <IncludePath>
      $(IncludePath);
      $(D3DXIncludePath)\Include
    </IncludePath>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(UseDirectXMath)' != 'true'">
    <!-- D3D9EXTENSIONS should be defined so that sources can use conditional -->
    <!-- compilation to select D3DX based API's for math and HLSL compiler    -->
    <!-- routines                                                             -->
    <ClCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);D3D9EXTENSIONS</PreprocessorDefinitions>
    </ClCompile>
    <!-- DirectX SDK. This library defines all DirectX 9 routines - the core ones   -->
    <!-- as well as math and HLSL compiler routines                                 -->
    <Lib Condition="'$(ConfigurationType)'!='StaticLibrary'">
      <AdditionalDependencies>%(AdditionalDependencies);$(D3DXLibPath)\d3dx9.lib</AdditionalDependencies>
    </Lib>
  </ItemDefinitionGroup>

  <Target Name="CopyGeneratedIncludeFilesToIntermediateFolder" BeforeTargets="Build" Condition="'$(IntermediateOutputPath)'!=''">
    <ItemGroup>
      <ProcessedFiles Include="$(WpfGraphicsIncludeProcessedFilesPath)wgx_av_types.cs" />
      <ProcessedFiles Include="$(WpfGraphicsIncludeProcessedFilesPath)wgx_av_types.h" />
      <ProcessedFiles Include="$(WpfGraphicsIncludeProcessedFilesPath)wgx_core_types.cs" />
      <ProcessedFiles Include="$(WpfGraphicsIncludeProcessedFilesPath)wgx_core_types.h" />
    </ItemGroup>
    <MakeDir Condition="!Exists('$(IntermediateOutputPath)')" Directories="$(IntermediateOutputPath)" />
    <Copy Condition="!Exists('$(IntermediateOutputPath)%(ProcessedFiles.FileName)%(ProcessedFiles.Extension)')" SourceFiles="%(ProcessedFiles.Identity)" DestinationFolder="$(IntermediateOutputPath)" />
    <CreateProperty Value="$(IntermediateOutputPath)">
      <Output PropertyName="GraphicsIncludeProcessedFilesFolder" TaskParameter="Value"/>
    </CreateProperty>
  </Target>


  <Target Name="D3DXUsageWarning">
    <Error
      Condition="'$(UseDirectXMath)' != 'true' and (!Exists($(D3DXLibPath)) or !Exists($(D3DXIncludePath)))"
      Text="D3DX SDK is not available. D3DX9.lib is deprecated, unsupported and very (very) old - use it with caution and very specific intent. Change the properties D3DXLibPath and D3DXIncludePath in this props file and point it to a valid path to disable this error and enable linking against the D3DX library. You will have to acquire an archived copy of this SDK from the internet first." />
  </Target>
</Project>
