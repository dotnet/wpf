#
# This file should be kept in sync across https://www.github.com/dotnet/wpf and dotnet-wpf-int repos. 
#

parameters:
  name: ''
  # send telemetry
  enableTelemetry: true
  # install Microbuild plugin if not a public build
  enableMicrobuild: true
  # queue YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#queue
  queue: {}
  # variables YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#phase
  variables: {}
  # run this build as a public build, even in the internal project
  runAsPublic: false

# Common conditionals:  There are a number of common conditionals that are useful.  Generally these are used to decide what resources can be accessed,
#                       or what logic should be applied based on the context the build is being run in.
#   - eq/ne(variables['Agent.Os'], 'Windows_NT') - Running/not running on a windows machine
#   - eq/ne(variables['System.TeamProject'], 'public') - Running/not running on the dotnet public VSTS project 
#   - and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest') - Not running in public and not a pull request.
#   - or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest') - Running in public or a pull request.

phases:
- template: /eng/common/templates/phases/base.yml
  parameters:
    enableTelemetry: ${{ parameters.enableTelemetry }}

    enableMicrobuild: ${{ parameters.enableMicrobuild }}

    name: ${{ parameters.name }}

    queue: ${{ parameters.queue }}

    runAsPublic: ${{ parameters.runAsPublic }}

    variables: 
      ${{ insert }}: ${{ parameters.variables }}
      _HelixBuildConfig: $(_BuildConfig)
      # Only enable publishing in non-public, non PR scenarios.
      ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        # This should be changed to an isolated blob feed per-build.
        # Right now a manual build of a random branch would get published alongside the normal branch artifacts.
        _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/index.json
        _SignArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
        _PublishArgs: /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
          /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl) 
          /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
          /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
          /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
        _OfficialBuildIdArgs: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
      # else
      ${{ if or(eq(parameters.runAsPublic, 'true'), eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
        _PublishArgs: ''
        _OfficialBuildIdArgs: ''
        _SignArgs: ''

    steps:
    - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        - task: AzureKeyVault@1
          inputs:
            azureSubscription: 'DotNet-Engineering-Services_KeyVault'
            KeyVaultName: EngKeyVault
            SecretsFilter: 'dotnetfeed-storage-access-key-1,microsoft-symbol-server-pat,symweb-symbol-server-pat'

    # Use utility script to run script command dependent on agent OS.
    - script: eng\common\cibuild.cmd
        -configuration $(_BuildConfig) 
        -prepareMachine
        $(_PublishArgs)
        $(_SignArgs)
        $(_OfficialBuildIdArgs)
        /p:Platform=$(_Platform) /p:IsShipping=$(_IsShipping)
      displayName: Windows Build / Publish
      condition: and(succeeded(), eq(variables['Agent.Os'], 'Windows_NT'))

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs to VSTS
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
        PublishLocation: Container
        ArtifactName: $(Agent.Os)_$(Agent.JobName)
      continueOnError: true
      condition: always()

    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: 'xUnit'
        testResultsFiles: '*.xml' 
        searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
      continueOnError: true
      condition: always()