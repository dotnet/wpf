<!-- [[Generic]] -->

<!--=================================================================
      RibbonApplicationSplitMenuItem
    =================================================================-->

<ControlTemplate x:Key="TopLevelApplicationSplitMenuItemTemplateKey" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid x:Name="MainGrid"
          SnapsToDevicePixels="True"
          Margin="1">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="*"
                              MinWidth="44" />
            <ColumnDefinition Width="22" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="6,4,6,4"
               Width="32"
               Height="32"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               Source="{TemplateBinding ImageSource}"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="30"
                Height="30"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource CheckMarkGeometryKey}" >
                <Path.RenderTransform>
                    <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                </Path.RenderTransform>
            </Path>
        </Border>
        <ribbon:RibbonButton x:Name="PART_HeaderButton"
                             Grid.ColumnSpan="2"
                             Style="{StaticResource SplitMenuItemHeaderButtonStyle}"
                             Command="{TemplateBinding Command}"
                             CommandParameter="{TemplateBinding CommandParameter}"
                             CommandTarget="{TemplateBinding CommandTarget}"
                             Content="{TemplateBinding Header}"
                             ContentTemplate="{TemplateBinding HeaderTemplate}"
                             ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                             ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                             SmallImageSource="{TemplateBinding ImageSource}"
                             Padding="{TemplateBinding Padding}"
                             HorizontalContentAlignment="Left"
                             Background="Transparent"
                             Focusable="False" 
                             ToolTipTitle="{TemplateBinding ToolTipTitle}"
                             ToolTipDescription="{TemplateBinding ToolTipDescription}"
                             ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                             ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                             ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                             ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                             KeyTip="{TemplateBinding HeaderKeyTip}"
                             QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                             CanAddToQuickAccessToolBarDirectly="True"/>
        <Border x:Name="HighlightRightBorder"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource SplitMenuItemArrowButtonStyle}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

            <!-- Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance. 
                This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is 
                important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562 -->

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Relative"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               SnapsToDevicePixels="True">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                Color="Transparent"
                                                controls:KeyTipService.IsKeyTipScope="True"
#ifdef Net40                                                
                                                RenderOptions.ClearTypeHint="Enabled"
#endif                                                
                >
                <Grid>
                    <Border x:Name="PopupBorder"
                            BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2" />
                    <Border x:Name="PopupOverlayBorder"
                            BorderBrush="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}"
                            Background="{StaticResource RibbonApplicationMenuBackgroundBrushKey}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer" 
                                          CanContentScroll="True"
                                          HorizontalScrollBarVisibility="Disabled"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
#ifdef Net40                                    
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    </Canvas>
#endif                                    
                                    <ItemsPresenter x:Name="ItemsPresenter"
                                            Margin="2"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True" />
#ifdef Net40                                    
                                </Grid>
#endif                                
                            </ScrollViewer>
                            <Border x:Name="ResizeControl"
                                    Grid.Row="1"
                                    Visibility="Collapsed"
                                    Background="{StaticResource ResizeGripperBackgroundBrush}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0">
                                <Thumb x:Name="PART_ResizeThumb"  
                                       Style="{StaticResource BottomRightCornerGripperStyle}"/>
                            </Border>
                        </Grid>
                    </Border>
                </Grid>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>
#ifdef Net40                                    
        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>
#endif        
        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource VerticalGripperStyle}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource RibbonShadowColorKey}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>

#ifdef Net45
        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
#else
        <DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True">
#endif
#ifdef Net40                                    
            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
#endif            
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource CheckMarkHighContrastGeometryKey}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>

        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="TopLevelApplicationCheckableSplitMenuItemTemplateKey" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid x:Name="MainGrid"
          SnapsToDevicePixels="True"
          Margin="1">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="*"
                              MinWidth="44" />
            <ColumnDefinition Width="22" />
        </Grid.ColumnDefinitions>
        
        <Border x:Name="HighlightLeftBorder"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="6,4,6,4"
               Source="{TemplateBinding ImageSource}"
               Width="32"
               Height="32"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="30"
                Height="30"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource CheckMarkGeometryKey}" >
                <Path.RenderTransform>
                    <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                </Path.RenderTransform>
            </Path>
        </Border>

        <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                   Grid.ColumnSpan="2"
                                   Style="{StaticResource SplitMenuItemHeaderToggleButtonStyle}"
                                   Command="{TemplateBinding Command}"
                                   CommandParameter="{TemplateBinding CommandParameter}"
                                   CommandTarget="{TemplateBinding CommandTarget}"
                                   Content="{TemplateBinding Header}"
                                   ContentTemplate="{TemplateBinding HeaderTemplate}"
                                   ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                   ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                   SmallImageSource="{TemplateBinding ImageSource}"
                                   Padding="{TemplateBinding Padding}"
                                   HorizontalContentAlignment="Left"
                                   Background="Transparent"
                                   Focusable="False"
                                   ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                   KeyTip="{TemplateBinding HeaderKeyTip}"
                                   QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                   CanAddToQuickAccessToolBarDirectly="True"/>

        <Border x:Name="HighlightRightBorder"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource SplitMenuItemArrowButtonStyle}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"/>

        </Border>
            
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

            <!-- Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance. 
                This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is 
                important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562 -->

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Relative"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"
#ifdef Net40                                                
                                            RenderOptions.ClearTypeHint="Enabled"
#endif                                                
            >
                <Grid>
                    <Border x:Name="PopupBorder"
                            BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2" />
                    <Border x:Name="PopupOverlayBorder"
                            BorderBrush="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}"
                            Background="{StaticResource RibbonApplicationMenuBackgroundBrushKey}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer" 
                                          CanContentScroll="True"
                                          HorizontalScrollBarVisibility="Disabled"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
#ifdef Net40                                    
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    </Canvas>
#endif                                    
                                    <ItemsPresenter x:Name="ItemsPresenter"
                                            Margin="2"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True" />
#ifdef Net40                                    
                                </Grid>
#endif                                
                            </ScrollViewer>
                            <Border x:Name="ResizeControl"
                                    Grid.Row="1"
                                    Visibility="Collapsed"
                                    Background="{StaticResource ResizeGripperBackgroundBrush}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0">
                                <Thumb x:Name="PART_ResizeThumb"  
                                       Style="{StaticResource BottomRightCornerGripperStyle}"/>
                            </Border>
                        </Grid>
                    </Border>
                </Grid>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>
#ifdef Net40                                    
        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>
#endif        
        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource VerticalGripperStyle}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource RibbonShadowColorKey}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>

#ifdef Net45
        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
#else
        <DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True">
#endif
#ifdef Net40                                    
            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
#endif            
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource CheckMarkHighContrastGeometryKey}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>

        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="MiddleLevelApplicationSplitMenuItemTemplateKey" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid Margin="1"
          x:Name="MainGrid"
          SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="44"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="22" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="4,3,6,1"
               Width="32"
               Height="32"              
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               Source="{TemplateBinding ImageSource}"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="30"
                Height="30"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource CheckMarkGeometryKey}" >
                <Path.RenderTransform>
                    <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                </Path.RenderTransform>
            </Path>
        </Border>
        <ribbon:RibbonButton x:Name="PART_HeaderButton"
                             Grid.ColumnSpan="2"
                             Style="{StaticResource SplitMenuItemHeaderButtonStyle}"
                             Command="{TemplateBinding Command}"
                             CommandParameter="{TemplateBinding CommandParameter}"
                             CommandTarget="{TemplateBinding CommandTarget}"
                             Content="{TemplateBinding Header}"
                             ContentTemplate="{TemplateBinding HeaderTemplate}"
                             ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                             ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                             SmallImageSource="{TemplateBinding ImageSource}"
                             Padding="{TemplateBinding Padding}"
                             HorizontalContentAlignment="Left"
                             Background="Transparent"
                             Focusable="False" 
                             ToolTipTitle="{TemplateBinding ToolTipTitle}"
                             ToolTipDescription="{TemplateBinding ToolTipDescription}"
                             ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                             ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                             ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                             ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                             KeyTip="{TemplateBinding HeaderKeyTip}"
                             QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                             CanAddToQuickAccessToolBarDirectly="True"/>
        <Border x:Name="HighlightRightBorder"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource SplitMenuItemArrowButtonStyle}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

        <Popup x:Name="PART_Popup"
                AllowsTransparency="True"
                VerticalOffset="-1"
                Placement="Custom"
                IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"
#ifdef Net40                                                
                                            RenderOptions.ClearTypeHint="Enabled"
#endif                                                
            >
                <Border x:Name="MenuBorder"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                    <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
#ifdef Net40                                    
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="InnerOverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{StaticResource RibbonDropDownBackgroundBrushKey}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                </Canvas>
#endif                                    
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                Margin="2"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" />
#ifdef Net40                                    
                            </Grid>
#endif                            
                        </ScrollViewer>
                        <Border x:Name="ResizeControl"
                                Grid.Row="1"
                                Visibility="Collapsed"
                                Background="{StaticResource ResizeGripperBackgroundBrush}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="0,1,0,0">
                            <Thumb x:Name="PART_ResizeThumb"  
                                   Style="{StaticResource BottomRightCornerGripperStyle}"/>
                        </Border>
                    </Grid>
                </Border>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>
#ifdef Net40                                    
        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>
#endif        
        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource VerticalGripperStyle}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource BottomLeftCornerGripperStyle}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource RibbonShadowColorKey}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>

#ifdef Net45
        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
#else
        <DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True">
#endif
#ifdef Net40                                    
            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
#endif
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource CheckMarkHighContrastGeometryKey}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="MiddleLevelApplicationCheckableSplitMenuItemTemplateKey" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid Margin="1"
          x:Name="MainGrid"
          SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="44"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="22" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="4,3,6,1"
               Width="32"
               Height="32"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               Source="{TemplateBinding ImageSource}"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="30"
                Height="30"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource CheckMarkGeometryKey}" >
                <Path.RenderTransform>
                    <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                </Path.RenderTransform>
            </Path>
        </Border>

        <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                   Grid.ColumnSpan="2"
                                   Style="{StaticResource SplitMenuItemHeaderToggleButtonStyle}"
                                   Command="{TemplateBinding Command}"
                                   CommandParameter="{TemplateBinding CommandParameter}"
                                   CommandTarget="{TemplateBinding CommandTarget}"
                                   Content="{TemplateBinding Header}"
                                   ContentTemplate="{TemplateBinding HeaderTemplate}"
                                   ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                   ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                   SmallImageSource="{TemplateBinding ImageSource}"
                                   Padding="{TemplateBinding Padding}"
                                   HorizontalContentAlignment="Left"
                                   Background="Transparent"
                                   Focusable="False" 
                                   ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                   KeyTip="{TemplateBinding HeaderKeyTip}"
                                   QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                   CanAddToQuickAccessToolBarDirectly="True"/>

        <Border x:Name="HighlightRightBorder"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource SplitMenuItemArrowButtonStyle}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               VerticalOffset="-1"
               Placement="Custom"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"
#ifdef Net40                                                
                                            RenderOptions.ClearTypeHint="Enabled"
#endif                                                
        >
                <Border x:Name="MenuBorder"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                    <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
#ifdef Net40                                
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="InnerOverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{StaticResource RibbonDropDownBackgroundBrushKey}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                </Canvas>
#endif                                
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                Margin="2"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" />
#ifdef Net40                                
                            </Grid>
#endif                            
                        </ScrollViewer>
                        <Border Name="ResizeControl"
                                Grid.Row="1"
                                Visibility="Collapsed"
                                Background="{StaticResource ResizeGripperBackgroundBrush}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="0,1,0,0">
                            <Thumb x:Name="PART_ResizeThumb"  
                                   Style="{StaticResource BottomRightCornerGripperStyle}"/>
                        </Border>
                    </Grid>
                </Border>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>
#ifdef Net40                                
        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>
#endif        
        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource VerticalGripperStyle}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource BottomLeftCornerGripperStyle}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource RibbonShadowColorKey}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>

#ifdef Net45
        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
#else
        <DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True">
#endif
#ifdef Net40                                
            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
#endif            
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource CheckMarkHighContrastGeometryKey}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="SubLevelApplicationSplitMenuItemTemplateKey" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid Margin="1" 
          x:Name="MainGrid"
        SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="24"
                              Width="Auto"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="4" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="37" />
            <ColumnDefinition Width="17" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                CornerRadius="2,0,0,2"
                Grid.ColumnSpan="4"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                CornerRadius="2,0,0,2"
                Grid.ColumnSpan="4"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="1"
               Width="16"
               Height="16"
               Source="{TemplateBinding ImageSource}"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="20"
                Height="20"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource CheckMarkGeometryKey}" />
        </Border>
        <ribbon:RibbonButton x:Name="PART_HeaderButton"
                             Grid.ColumnSpan="4"
                             Style="{StaticResource SplitMenuItemHeaderButtonStyle}"
                             Command="{TemplateBinding Command}"
                             CommandParameter="{TemplateBinding CommandParameter}"
                             CommandTarget="{TemplateBinding CommandTarget}"
                             Content="{TemplateBinding Header}"
                             ContentTemplate="{TemplateBinding HeaderTemplate}"
                             ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                             ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                             SmallImageSource="{TemplateBinding ImageSource}"
                             Padding="{TemplateBinding Padding}"
                             HorizontalContentAlignment="Left"
                             Background="Transparent"
                             Focusable="False" 
                             ToolTipTitle="{TemplateBinding ToolTipTitle}"
                             ToolTipDescription="{TemplateBinding ToolTipDescription}"
                             ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                             ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                             ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                             ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                             KeyTip="{TemplateBinding HeaderKeyTip}"
                             QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                             CanAddToQuickAccessToolBarDirectly="True"/>

        <Border x:Name="HighlightRightBorder"
                Grid.Column="4"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                        Visibility="Collapsed"
                                        Focusable="False"
                                        Style="{StaticResource SplitMenuItemArrowButtonStyle}"
                                        BorderThickness="1,0,0,0"
                                        Background="Transparent"
                                        ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                        ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                        ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                        ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                        ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                        ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                        IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="4"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               VerticalOffset="-1"
               Placement="Custom"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"
#ifdef Net40                                                
                                            RenderOptions.ClearTypeHint="Enabled"
#endif                                                
                                            >
                <Border x:Name="MenuBorder"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                    <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
#ifdef Net40                                
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="InnerOverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{StaticResource RibbonDropDownBackgroundBrushKey}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                </Canvas>
#endif                                
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                Margin="2"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" />
#ifdef Net40                                
                            </Grid>
#endif                            
                        </ScrollViewer>
                        <Border Name="ResizeControl"
                                Grid.Row="1"
                                Visibility="Collapsed"
                                Background="{StaticResource ResizeGripperBackgroundBrush}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="0,1,0,0">
                            <Thumb x:Name="PART_ResizeThumb"  
                                   Style="{StaticResource BottomRightCornerGripperStyle}"/>
                        </Border>
                    </Grid>
                </Border>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>
#ifdef Net40                                
        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>
#endif        
        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource VerticalGripperStyle}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource BottomLeftCornerGripperStyle}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource RibbonShadowColorKey}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>

#ifdef Net45
        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
#else
        <DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True">
#endif
#ifdef Net40                                
            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
#endif            
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource CheckMarkHighContrastGeometryKey}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="SubLevelApplicationCheckableSplitMenuItemTemplateKey" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid Margin="1"
          x:Name="MainGrid"
          SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="24"
                              Width="Auto"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="4" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="37" />
            <ColumnDefinition Width="17" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                CornerRadius="2,0,0,2"
                Grid.ColumnSpan="4"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                CornerRadius="2,0,0,2"
                Grid.ColumnSpan="4"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="1"
               Width="16"
               Height="16"
               Source="{TemplateBinding ImageSource}"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="20"
                Height="20"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource CheckMarkGeometryKey}" />
        </Border>
        <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                   Grid.ColumnSpan="4"
                                   Style="{StaticResource SplitMenuItemHeaderToggleButtonStyle}"
                                   Command="{TemplateBinding Command}"
                                   CommandParameter="{TemplateBinding CommandParameter}"
                                   CommandTarget="{TemplateBinding CommandTarget}"
                                   Content="{TemplateBinding Header}"
                                   ContentTemplate="{TemplateBinding HeaderTemplate}"
                                   ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                   ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                   SmallImageSource="{TemplateBinding ImageSource}"
                                   Padding="{TemplateBinding Padding}"
                                   HorizontalContentAlignment="Left"
                                   Background="Transparent"
                                   Focusable="False" 
                                   ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                   KeyTip="{TemplateBinding HeaderKeyTip}"
                                   QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                   CanAddToQuickAccessToolBarDirectly="True"/>
        <Border x:Name="HighlightRightBorder"
                Grid.Column="4"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource SplitMenuItemArrowButtonStyle}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="4"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               VerticalOffset="-1"
               Placement="Custom"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"
#ifdef Net40                                                
                                            RenderOptions.ClearTypeHint="Enabled"
#endif                                                
                                            >
                <Border x:Name="MenuBorder"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                    <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
#ifdef Net40                                
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="InnerOverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{StaticResource RibbonDropDownBackgroundBrushKey}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                </Canvas>
#endif                                
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                Margin="2"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" />
#ifdef Net40                                
                            </Grid>
#endif                            
                        </ScrollViewer>
                        <Border Name="ResizeControl"
                                Grid.Row="1"
                                Visibility="Collapsed"
                                Background="{StaticResource ResizeGripperBackgroundBrush}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="0,1,0,0">
                            <Thumb x:Name="PART_ResizeThumb"  
                                   Style="{StaticResource BottomRightCornerGripperStyle}"/>
                        </Border>
                    </Grid>
                </Border>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>
#ifdef Net40                                
        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>
#endif        
        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource VerticalGripperStyle}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource BottomLeftCornerGripperStyle}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource RibbonShadowColorKey}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource RibbonButtonMouseOverInnerBorderBrushKey}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource RibbonDisabledForegroundBrushKey}"/>
        </Trigger>

#ifdef Net45
        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">
#else
        <DataTrigger Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True">
#endif
#ifdef Net40                                
            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
#endif            
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource CheckMarkHighContrastGeometryKey}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
#ifdef Net45
                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>
#else
                <Condition Binding="{Binding Path=HighContrast, Source={x:Static windows:SystemParameters2.Current}}" Value="True"/>
#endif
            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<Style x:Key="{x:Type ribbon:RibbonApplicationSplitMenuItem}" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Padding" Value="3,2,3,2" />
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
    <!-- FocusedBorderBrush and FocusedBackground are used when the control is added to QAT -->
    <Setter Property="ribbon:RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="ribbon:RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource RibbonToolTipInitialShowDelayKey}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource RibbonToolTipInitialShowDelayKey}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource RibbonToolTipShowDurationKey}" />
    <Setter Property="ToolTipService.IsEnabled" Value="false" />
    <Setter Property="Template" Value="{StaticResource TopLevelApplicationSplitMenuItemTemplateKey}" />
    <Style.Triggers>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Top" />
                <Condition Property="IsCheckable" Value="True" />                
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource TopLevelApplicationCheckableSplitMenuItemTemplateKey}" />
        </MultiTrigger>

        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Middle" />
                <Condition Property="IsCheckable" Value="False" />
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource MiddleLevelApplicationSplitMenuItemTemplateKey}" />
        </MultiTrigger>

        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Middle" />
                <Condition Property="IsCheckable" Value="True" />
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource MiddleLevelApplicationCheckableSplitMenuItemTemplateKey}" />
        </MultiTrigger>

        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Sub" />
                <Condition Property="IsCheckable" Value="False" />
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource SubLevelApplicationSplitMenuItemTemplateKey}" />
        </MultiTrigger>

        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Sub" />
                <Condition Property="IsCheckable" Value="True" />
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource SubLevelApplicationCheckableSplitMenuItemTemplateKey}" />
        </MultiTrigger>
    </Style.Triggers>
</Style>

