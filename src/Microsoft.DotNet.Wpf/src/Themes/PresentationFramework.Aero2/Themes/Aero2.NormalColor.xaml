<!--=================================================================
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

This file was generated from individual xaml files found
   in WPF\src\Themes\XAML\, please do not edit it directly.

To generate this file, bcz in WPF\src\Themes\Generator and copy
   the generated theme files from the output directory to
   the corresponding themes\ folder.

To automatically copy the files, set the environment variable
   set THEMEXAML_AUTOUPDATE=1

==================================================================-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes"
                    xmlns:ui="clr-namespace:System.Windows.Documents;assembly=PresentationUI"
                    xmlns:framework="clr-namespace:MS.Internal;assembly=PresentationFramework"
                    xmlns:base="clr-namespace:System.Windows;assembly=WindowsBase">

    <!--=================================================================
            Calendar
        ==================================================================-->

    <Style TargetType="Calendar">
        <Setter Property="Foreground" Value="#FF333333" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="#FFE4EAF0" Offset="0"/>
                    <GradientStop Color="#FFECF0F4" Offset="0.16"/>
                    <GradientStop Color="#FFFCFCFD" Offset="0.16"/>
                    <GradientStop Color="#FFFFFFFF" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Calendar">
                    <StackPanel Name="PART_Root" HorizontalAlignment="Center">
                        <CalendarItem
                            Name="PART_CalendarItem"
                            Style="{TemplateBinding CalendarItemStyle}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CalendarItem-->
    <Style TargetType="CalendarItem">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarItem">
                    <ControlTemplate.Resources>
                        <!-- Start: Data template for header button -->
                        <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
                            <TextBlock
                                FontWeight="Bold"
                                FontFamily="Verdana"
                                FontSize="9.5"
                                Foreground="#FF333333"
                                HorizontalAlignment="Center"
                                Text="{Binding}"
                                Margin="0,6,0,6"
                                VerticalAlignment="Center"/>
                        </DataTemplate>
                        <!-- End: Data template for header button -->
                    </ControlTemplate.Resources>
                    <Grid Name="PART_Root" >
                        <Grid.Resources>
                            <SolidColorBrush x:Key="&#222;" Color="#A5FFFFFF" />
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualState Name="Normal" />
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_DisabledVisual" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="1">
                            <Border CornerRadius="1" BorderBrush="#FFFFFFFF" BorderThickness="2">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>

                                    <Grid.Resources>
                                        <!-- Start: Previous button template -->
                                        <ControlTemplate x:Key="&#223;" TargetType="Button">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup Name="CommonStates">
                                                        <VisualState Name="Normal" />
                                                        <VisualState Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="#FF73A9D8" Duration="0" />
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Opacity)" To=".5" Duration="0" />
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <Rectangle Fill="#11E5EBF1" Stretch="Fill" Opacity="1"/>
                                                <Grid>
                                                    <Path x:Name="path" Margin="14,-6,0,0" Height="10" Width="6" VerticalAlignment="Center" HorizontalAlignment="Left" Stretch="Fill" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z">
                                                        <Path.Fill>
                                                            <SolidColorBrush Color="#FF333333" />
                                                        </Path.Fill>
                                                    </Path>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>

                                        <!-- End: Previous button template -->

                                        <!-- Start: Next button template -->
                                        <ControlTemplate x:Key="&#224;" TargetType="Button">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup Name="CommonStates">
                                                        <VisualState Name="Normal" />
                                                        <VisualState Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" To="#FF73A9D8" Duration="0" />
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="path" Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Opacity)" To=".5" Duration="0" />
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <Rectangle Fill="#11E5EBF1" Stretch="Fill" Opacity="1"/>
                                                <Grid>
                                                    <Path x:Name="path" Margin="0,-6,14,0" Height="10" Width="6" VerticalAlignment="Center" HorizontalAlignment="Right" Stretch="Fill" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z">
                                                        <Path.Fill>
                                                            <SolidColorBrush Color="#FF333333" />
                                                        </Path.Fill>
                                                    </Path>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>

                                        <!-- End: Next button template -->

                                        <!-- Start: Header button template -->
                                        <ControlTemplate x:Key="&#225;" TargetType="Button">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup Name="CommonStates">
                                                        <VisualState Name="Normal" />
                                                        <VisualState Name="MouseOver">
                                                            <Storyboard>
                                                                <ColorAnimation Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FF73A9D8" Duration="0" />
                                                            </Storyboard>
                                                        </VisualState>
                                                        <VisualState Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="buttonContent" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <ContentPresenter
                                                  x:Name="buttonContent"
                                                  Content="{TemplateBinding Content}"
                                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  Margin="1,4,1,9"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                    <TextElement.Foreground>
                                                        <SolidColorBrush Color="#FF333333"/>
                                                    </TextElement.Foreground>
                                                </ContentPresenter>
                                            </Grid>
                                        </ControlTemplate>

                                        <!-- End: Header button template -->
                                    </Grid.Resources>

                                    <!-- Start: Previous button content -->
                                    <Button x:Name="PART_PreviousButton"
                                            Grid.Row="0" Grid.Column="0"
                                            Template="{StaticResource &#223;}"
                                            Height="20" Width="28"
                                            HorizontalAlignment="Left"
                                            Focusable="False"
                                            />
                                    <!-- End: Previous button content -->

                                    <!-- Start: Header button content -->
                                    <Button x:Name="PART_HeaderButton"
                                            Grid.Row="0" Grid.Column="1"
                                            Template="{StaticResource &#225;}"
                                            HorizontalAlignment="Center" VerticalAlignment="Center"
                                            FontWeight="Bold" FontSize="10.5"
                                            Focusable="False"
                                            />
                                    <!-- End: Header button content -->

                                    <!-- Start: Next button content -->
                                    <Button x:Name="PART_NextButton"
                                            Grid.Row="0" Grid.Column="2"
                                            Height="20" Width="28"
                                            HorizontalAlignment="Right"
                                            Template="{StaticResource &#224;}"
                                            Focusable="False"
                                            />
                                    <!-- End: Next button content -->

                                    <!-- Start: Month Content Grid -->
                                    <Grid x:Name="PART_MonthView" Grid.Row="1" Grid.ColumnSpan="3" Visibility="Visible" Margin="6,-1,6,6" HorizontalAlignment="Center">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                    </Grid>
                                    <!-- End: Month Content Grid -->

                                    <!-- End: Year Content Grid -->
                                    <Grid x:Name="PART_YearView" Grid.Row="1" Grid.ColumnSpan="3" Visibility="Hidden" Margin="6,-3,7,6" HorizontalAlignment="Center">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                    </Grid>
                                    <!-- End: Year Content Grid -->
                                </Grid>
                            </Border>
                        </Border>
                        <Rectangle x:Name="PART_DisabledVisual" Opacity="0" Visibility="Collapsed" Stretch="Fill" StrokeThickness="1" RadiusX="2" RadiusY="2" Stroke="{StaticResource &#222;}" Fill="{StaticResource &#222;}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_DisabledVisual" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger Value="Year">
                            <DataTrigger.Binding>
                                <Binding Path="DisplayMode">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type Calendar}" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Value="Decade">
                            <DataTrigger.Binding>
                                <Binding Path="DisplayMode">
                                    <Binding.RelativeSource>
                                        <RelativeSource Mode="FindAncestor" AncestorType="{x:Type Calendar}" />
                                    </Binding.RelativeSource>
                                </Binding>
                            </DataTrigger.Binding>
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CalendarDayButton-->
    <Style TargetType="CalendarDayButton">
        <Setter Property="MinWidth" Value="5"/>
        <Setter Property="MinHeight" Value="5"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarDayButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0.5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="NormalText" Storyboard.TargetProperty="Opacity" To=".35" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unselected" />
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DayButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Active" />
                                <VisualState Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FF777777"></ColorAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="RegularDay" />
                                <VisualState Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TodayBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FFFFFFFF"></ColorAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="NormalDay" />
                                <VisualState Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="Blackout" Storyboard.TargetProperty="Opacity" To=".2"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="TodayBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="#FFAAAAAA"/>
                        <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="#FFBADDE9"/>
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"/>
                        <Rectangle x:Name="HighlightBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="#FFBADDE9"/>
                        <ContentPresenter
                                x:Name="NormalText"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="5,1,5,1">
                            <TextElement.Foreground>
                                <SolidColorBrush Color="#FF333333" />
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <Path x:Name="Blackout" Opacity="0" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" Fill="#FF000000" Stretch="Fill" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z"/>
                        <Rectangle x:Name="DayButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1" RadiusY="1" Stroke="#FF45D6FA"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Calendar Button-->
    <Style TargetType="CalendarButton">
        <Setter Property="Background" Value="#FFBADDE9"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="MinHeight" Value="42"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unselected" />
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Active" />
                                <VisualState Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="#FF777777"></ColorAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}"/>
                        <Rectangle x:Name="Background" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}"/>
                        <ContentPresenter
                                x:Name="NormalText"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="1,0,1,1">
                            <TextElement.Foreground>
                                <SolidColorBrush Color="#FF333333"/>
                            </TextElement.Foreground>
                        </ContentPresenter>
                        <Rectangle x:Name="CalendarButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1" RadiusY="1" Stroke="#FF45D6FA"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="CalendarButtonFocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--=================================================================
        CollectionViewGroup
    ==================================================================-->
    <DataTemplate DataType="{x:Type CollectionViewGroup}">
        <ContentPresenter Content="{Binding Path=Name}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
    </DataTemplate>


    <!--=================================================================
        ContentControl
    ==================================================================-->
    <Style x:Key="{x:Type ContentControl}"
           TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--=================================================================
        ContextMenu
    ==================================================================-->
    <Style x:Key="{x:Type ContextMenu}"
           TargetType="{x:Type ContextMenu}">
        <Setter Property="Background"
                Value="#F5F5F5"/>
        <Setter Property="FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="BorderBrush"
                Value="#FF959595"/>
        <Setter Property="Padding"
                Value="2"/>
        <Setter Property="Grid.IsSharedSizeScope"
                Value="true"/>
        <Setter Property="HasDropShadow"
                Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <theme:SystemDropShadowChrome Name="Shdw"
                                                  Color="Transparent"
                                                  SnapsToDevicePixels="true">
                        <Border Name="ContextMenuBorder" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ScrollViewer Name="ContextMenuScrollViewer"
                                          Grid.ColumnSpan="2" Margin="1,0"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Rectangle
                                            Name="OpaqueRect"
                                            Height="{Binding ElementName=ContextMenuBorder,Path=ActualHeight}"
                                            Width="{Binding ElementName=ContextMenuBorder,Path=ActualWidth}"
                                            Fill="{Binding ElementName=ContextMenuBorder,Path=Background}" />
                                    </Canvas>
                                    <Rectangle Fill="#F1F1F1"
                                               HorizontalAlignment="Left"
                                               Width="28"
                                               Margin="1,2"
                                               RadiusX="2"
                                               RadiusY="2"/>
                                    <Rectangle HorizontalAlignment="Left"
                                               Width="1"
                                               Margin="29,2,0,2"
                                               Fill="#E2E3E3"/>
                                    <Rectangle HorizontalAlignment="Left"
                                               Width="1"
                                               Margin="30,2,0,2"
                                               Fill="White"/>
                                    <ItemsPresenter Name="ItemsPresenter" Margin="{TemplateBinding Padding}"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </theme:SystemDropShadowChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow"
                                 Value="true">
                            <Setter TargetName="Shdw"
                                    Property="Margin"
                                    Value="0,0,5,5"/>
                            <Setter TargetName="Shdw"
                                    Property="Color"
                                    Value="#71000000"/>
                        </Trigger>
                        <Trigger SourceName="ContextMenuScrollViewer"
                                 Property="ScrollViewer.CanContentScroll"
                                 Value="false" >
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Top"
                                    Value="{Binding ElementName=ContextMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Left"
                                    Value="{Binding ElementName=ContextMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--=================================================================
        FlowDocument
    ==================================================================-->
    <Style x:Key="{x:Type FlowDocument}"
           TargetType="{x:Type FlowDocument}">
        <Setter Property="TextAlignment"
                Value="Justify"/>
        <Setter Property="FontFamily"
                Value="Georgia"/>
        <Setter Property="FontSize"
                Value="16.0"/>
    </Style>
    <!--=================================================================
        TextBlock
    ==================================================================-->
    <Style x:Key="{x:Type TextBlock}"
           TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping"
                Value="NoWrap"/>
        <Setter Property="TextTrimming"
                Value="None"/>
    </Style>
    <!--=================================================================
        Bold
    ==================================================================-->
    <Style x:Key="{x:Type Bold}"
           TargetType="{x:Type Bold}">
        <Setter Property="FontWeight"
                Value="Bold"/>
    </Style>
    <!--=================================================================
        Italic
    ==================================================================-->
    <Style x:Key="{x:Type Italic}"
           TargetType="{x:Type Italic}">
        <Setter Property="FontStyle"
                Value="Italic"/>
    </Style>
    <!--=================================================================
        Underline
    ==================================================================-->
    <Style x:Key="{x:Type Underline}"
           TargetType="{x:Type Underline}">
        <Setter Property="TextDecorations"
                Value="Underline"/>
    </Style>
    <!--=================================================================
        Paragraph
    ==================================================================-->
    <Style x:Key="{x:Type Paragraph}"
           TargetType="{x:Type Paragraph}">
        <Setter Property="Margin"
                Value="Auto"/>
    </Style>
    <!--=================================================================
        List
    ==================================================================-->
    <Style x:Key="{x:Type List}"
           TargetType="{x:Type List}">
        <Setter Property="Margin"
                Value="Auto"/>
        <Setter Property="Padding"
                Value="Auto"/>
    </Style>
    <!--=================================================================
        Floater
    ==================================================================-->
    <Style x:Key="{x:Type Floater}"
           TargetType="{x:Type Floater}">
        <Setter Property="HorizontalAlignment"
                Value="Right"/>
    </Style>

    <!--=================================================================
        FlowDocument - Handled by FlowDocumentReader
    ==================================================================-->
    <DataTemplate DataType="{x:Type FlowDocument}">
        <FlowDocumentReader Document="{Binding}" />
    </DataTemplate>
    <!--=================================================================
        FixedDocument - Handled by DocumentViewer
    ==================================================================-->
    <DataTemplate DataType="{x:Type FixedDocument}">
        <DocumentViewer Document="{Binding}"/>
    </DataTemplate>
    <!--=================================================================
        FixedDocumentSequence - Handled by DocumentViewer
    ==================================================================-->
    <DataTemplate DataType="{x:Type FixedDocumentSequence}">
        <DocumentViewer Document="{Binding}"/>
    </DataTemplate>
    <!--=================================================================
        DocumentViewer
    ==================================================================-->
    <LinearGradientBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=DocumentViewerToolBarGradient}"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{x:Static SystemColors.InactiveCaptionTextColor}"
                          Offset="0"/>
            <GradientStop Color="{x:Static SystemColors.InactiveCaptionColor}"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="&#284;"
                         StartPoint="0,0"
                         EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{x:Static SystemColors.InactiveCaptionTextColor}"
                          Offset="1"/>
            <GradientStop Color="{x:Static SystemColors.InactiveCaptionColor}"
                          Offset="0"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <!-- DocumentViewer Style -->
    <Style x:Key="{x:Type DocumentViewer}"
           BasedOn="{x:Null}"
           TargetType="{x:Type DocumentViewer}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="ContextMenu"
                Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ui:PresentationUIStyleResources}, ResourceId=PUIDocumentViewerContextMenu}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DocumentViewer}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Focusable="False">
                        <Grid Background="{TemplateBinding Background}"
                              KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <!-- One column for both the toolbar and the content -->
                            <!-- Top row, auto height for the Toolbar -->
                            <!-- Middle row, full height for the Content area -->
                            <!-- Bottom row, auto height for the find Toolbar -->
                            <!-- DocumentViewer's ToolBar, docked to the Top -->
                            <ContentControl Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ui:PresentationUIStyleResources},                                 ResourceId=PUIDocumentViewerToolBarStyleKey}}"
                                            Grid.Row="0"
                                            Grid.Column="0"
                                            Focusable="{TemplateBinding Focusable}"
                                            TabIndex="0"/>
                            <!-- Define the Content area and its paging/scrolling controls inside the Grid -->
                            <ScrollViewer Grid.Row="1"
                                          Grid.Column="0"
                                          CanContentScroll="true"
                                          HorizontalScrollBarVisibility="Auto"
                                          x:Name="PART_ContentHost"
                                          Focusable="{TemplateBinding Focusable}"
                                          IsTabStop="true"
                                          TabIndex="1"/>
                            <!-- Toolbar shadow -->
                            <DockPanel Grid.Row="1">
                                <!-- saves space for the scrollbar -->
                                <FrameworkElement DockPanel.Dock="Right"
                                                  Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
                                <Rectangle
                                           Visibility="Visible"
                                           VerticalAlignment="top"
                                           Height="10">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0"
                                                             EndPoint="0,1">
                                            <GradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Color="#66000000"
                                                                  Offset="0"/>
                                                    <GradientStop Color="Transparent"
                                                                  Offset="1"/>
                                                </GradientStopCollection>
                                            </GradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </DockPanel>
                            <!-- Find ToolBar, docked to the bottom -->
                            <ContentControl Grid.Row="2"
                                            Grid.Column="0"
                                            TabIndex="2"
                                            Focusable="{TemplateBinding Focusable}"
                                            x:Name="PART_FindToolBarHost"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--=================================================================
            DataGrid
        ==================================================================-->

    <Style x:Key="&#285;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Rectangle Margin="1,1,1,1"
                                   StrokeThickness="1"
                                   Stroke="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                   SnapsToDevicePixels="true"/>
                        <Rectangle Margin="1,1,1,1"
                                   StrokeThickness="1"
                                   Stroke="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                                   StrokeDashArray="2 2"
                                   SnapsToDevicePixels="true"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <BooleanToVisibilityConverter x:Key="&#286;" />

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid}, ResourceId=DataGridSelectAllButtonStyle}"
           TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="Border"
                           Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                           SnapsToDevicePixels="True" />
                        <Polygon x:Name="Arrow"
                         HorizontalAlignment="Right"
                         VerticalAlignment="Bottom"
                         Margin="8,8,3,3"
                         Opacity="0.15"
                         Fill="Black"
                         Stretch="Uniform"
                         Points="0,10 10,10 10,0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}">
        <Setter Property="Background"
                      Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderBrush" Value="#FF688CAF" />
        <Setter Property="BorderThickness" Value="1" />
        <!-- This is needed to force DG to have a non-default value.  Otherwise the DGR.DetailsVisibility cannot have a value of VisibleWhenSelected by default. -->
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
        <Setter Property="ScrollViewer.CanContentScroll"
                      Value="true"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      SnapsToDevicePixels="True"
                      Padding="{TemplateBinding Padding}">
                        <ScrollViewer   Focusable="false"
                                Name="DG_ScrollViewer">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>

                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <!--Left Column Header Corner -->
                                        <Button Command="{x:Static DataGrid.SelectAllCommand}"
                                                Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=CellsPanelHorizontalOffset}"
                                                Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid}, ResourceId=DataGridSelectAllButtonStyle}}"
                                                Focusable="false"
                                                Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.All}}" />
                                        <!--Column Headers-->
                                        <DataGridColumnHeadersPresenter Grid.Column="1"
                                                           Name="PART_ColumnHeadersPresenter"
                                                           Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}}"/>

                                        <!--DataGrid content-->
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" />

                                        <ScrollBar Grid.Row="1" Grid.Column="2" Name="PART_VerticalScrollBar"
                                                 Orientation="Vertical"
                                                 Maximum="{TemplateBinding ScrollableHeight}"
                                                 ViewportSize="{TemplateBinding ViewportHeight}"
                                                 Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                                 Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>

                                        <Grid Grid.Row="2" Grid.Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NonFrozenColumnsViewportHorizontalOffset}"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar Grid.Column="1"
                                                       Name="PART_HorizontalScrollBar"
                                                       Orientation="Horizontal"
                                                       Maximum="{TemplateBinding ScrollableWidth}"
                                                       ViewportSize="{TemplateBinding ViewportWidth}"
                                                       Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type DataGridColumnHeadersPresenter}" TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <DataGridColumnHeader IsHitTestVisible="False" Name="PART_FillerColumnHeader"/>
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="&#287;" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#288;" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeNS"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                      Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static DataGridColumnHeader.ColumnFloatingHeaderStyleKey}" TargetType="{x:Type Control}">
        <Setter Property="Opacity" Value="0.6"></Setter>
        <Setter Property="BorderBrush" Value="#FF688CAF"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              Padding ="{TemplateBinding Padding}"
                              Background="{TemplateBinding Background}">
                        <Grid>
                            <Canvas Name="PART_VisualBrushCanvas" Margin="{TemplateBinding Margin}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static DataGridColumnHeader.ColumnHeaderDropSeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="#FF000080" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              SnapsToDevicePixels="True">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type DataGridRow}" TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Margin="2,0,0,0" VerticalAlignment="Center" Foreground="Red" Text="!" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <DataGridCellsPresenter Grid.Column="1"
                                             ItemsPanel="{TemplateBinding ItemsPanel}"
                                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                            <DataGridDetailsPresenter  SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=AreRowDetailsFrozen, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}}"
                                                Grid.Column="1" Grid.Row="1"
                                                Visibility="{TemplateBinding DetailsVisibility}" />

                            <DataGridRowHeader SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"  Grid.RowSpan="2"
                                        Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Row}}"/>
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsNewItem" Value="True">
                <Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NewItemMargin}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type DataGridCellsPresenter}" TargetType="{x:Type DataGridCellsPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCellsPresenter}">
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}"
                       Color="#FF000000" />

    <Thickness x:Key="&#289;">1.5</Thickness>

    <Style x:Key="{x:Type DataGridCell}" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Name="Bd"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(base:AccessibilitySwitches.UseNetFx472CompatibleAccessibilityFeatures)}" Value="false"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true"/>
                                <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            <Setter TargetName="Bd" Property="BorderThickness" Value="{StaticResource &#289;}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true"/>
                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(base:AccessibilitySwitches.UseNetFx47CompatibleAccessibilityFeatures)}" Value="false"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="FocusVisualStyle" Value="{StaticResource &#285;}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static DataGridComboBoxColumn.TextBlockComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ContentPresenter Margin="1,1,1,1"
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                IsHitTestVisible="false" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="{x:Type DataGridColumnHeader}" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <theme:DataGridHeaderBorder SortDirection="{TemplateBinding SortDirection}"
                                         IsHovered="{TemplateBinding IsMouseOver}"
                                         IsPressed="{TemplateBinding IsPressed}"
                                         IsClickable="{TemplateBinding CanUserSort}"
                                         Background="{TemplateBinding Background}"
                                         BorderBrush="{TemplateBinding BorderBrush}"
                                         BorderThickness="{TemplateBinding BorderThickness}"
                                         Padding ="{TemplateBinding Padding}"
                                         SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                                         SeparatorBrush="{TemplateBinding SeparatorBrush}">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      RecognizesAccessKey="True" />
                        </theme:DataGridHeaderBorder>

                        <Thumb x:Name="PART_LeftHeaderGripper"
                               HorizontalAlignment="Left"
                               Style="{StaticResource &#287;}"/>
                        <Thumb x:Name="PART_RightHeaderGripper"
                               HorizontalAlignment="Right"
                               Style="{StaticResource &#287;}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type DataGridRowHeader}" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <theme:DataGridHeaderBorder IsSelected="{TemplateBinding IsRowSelected}"
                                         IsHovered ="{TemplateBinding IsMouseOver}"
                                         IsPressed="{TemplateBinding IsPressed}"
                                         Background="{TemplateBinding Background}"
                                         BorderBrush="{TemplateBinding BorderBrush}"
                                         BorderThickness="{TemplateBinding BorderThickness}"
                                         Padding ="{TemplateBinding Padding}"
                                         Orientation="Horizontal"
                                         SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                                         SeparatorBrush="{TemplateBinding SeparatorBrush}">

                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"
                                                  RecognizesAccessKey="True"/>
                                <Control SnapsToDevicePixels="false"
                                         Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=(Validation.HasError), Converter={StaticResource &#286;}}"
                                         Template="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=ValidationErrorTemplate}" />
                            </StackPanel>
                        </theme:DataGridHeaderBorder>
                        <Thumb x:Name="PART_TopHeaderGripper"
                               VerticalAlignment="Top"
                               Style="{StaticResource &#288;}"/>
                        <Thumb x:Name="PART_BottomHeaderGripper"
                               VerticalAlignment="Bottom"
                               Style="{StaticResource &#288;}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--=================================================================
            DatePicker
        ==================================================================-->

    <!-- DatePicker -->
    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="Foreground" Value="#FF333333" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint=".5,0" StartPoint=".5,1">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF617584" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualState Name="Normal" />
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_DisabledVisual" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border.Child>
                            <Grid x:Name="PART_Root"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.Resources>
                                    <!-- Main DatePicker Brushes -->
                                    <SolidColorBrush x:Key="&#290;" Color="#A5FFFFFF" />

                                    <!-- Button Template -->
                                    <ControlTemplate x:Key="&#291;" TargetType="Button">
                                        <Grid>
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup Name="CommonStates">
                                                    <VisualStateGroup.Transitions>
                                                        <VisualTransition GeneratedDuration="0" />
                                                        <VisualTransition To="MouseOver" GeneratedDuration="0:0:0.1" />
                                                        <VisualTransition To="Pressed" GeneratedDuration="0:0:0.1" />
                                                    </VisualStateGroup.Transitions>
                                                    <VisualState Name="Normal" />
                                                    <VisualState Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimation Duration="0" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#FF448DCA"/>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#7FFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#CCFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#F2FFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState Name="Pressed">
                                                        <Storyboard>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#FF448DCA"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Highlight" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#EAFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#C6FFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#6BFFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                            <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                                <SplineColorKeyFrame KeyTime="0" Value="#F4FFFFFF"/>
                                                            </ColorAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState Name="Disabled" />
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>

                                            <!--Start UI-->
                                            <Grid Height="18" Width="19" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0" Background="#11FFFFFF" FlowDirection="LeftToRight">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                    <ColumnDefinition Width="20*"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="23*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                    <RowDefinition Height="19*"/>
                                                </Grid.RowDefinitions>
                                                <Border Margin="-1" Grid.ColumnSpan="4" Grid.Row="0" Grid.RowSpan="4" BorderThickness="1" BorderBrush="#FF45D6FA" Opacity="0" CornerRadius="0,0,1,1" x:Name="Highlight"/>
                                                <Border x:Name="Background" Margin="0,-1,0,0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1" BorderBrush="#FFFFFFFF" Opacity="1" CornerRadius=".5" Background="#FF1F3B53"/>
                                                <Border x:Name="BackgroundGradient" Margin="0,-1,0,0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1" BorderBrush="#BF000000" Opacity="1" CornerRadius=".5">
                                                    <Border.Background>
                                                        <LinearGradientBrush StartPoint=".7,0" EndPoint=".7,1">
                                                            <GradientStop Color="#FFFFFFFF" Offset="0" />
                                                            <GradientStop Color="#F9FFFFFF" Offset="0.375" />
                                                            <GradientStop Color="#E5FFFFFF" Offset="0.625" />
                                                            <GradientStop Color="#C6FFFFFF" Offset="1" />
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                </Border>
                                                <Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1">
                                                    <Rectangle.Stroke>
                                                        <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
                                                            <GradientStop Color="#FF494949"/>
                                                            <GradientStop Color="#FF9F9F9F" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Stroke>
                                                    <Rectangle.Fill>
                                                        <LinearGradientBrush EndPoint="0.3,-1.1" StartPoint="0.46,1.6">
                                                            <GradientStop Color="#FF4084BD"/>
                                                            <GradientStop Color="#FFAFCFEA" Offset="1"/>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Fill>
                                                </Rectangle>
                                                <Path HorizontalAlignment="Center" Margin="4,3,4,3" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Grid.Column="0" Grid.Row="1" Fill="#FF2F2F2F" Stretch="Fill" Data="M11.426758,8.4305077 L11.749023,8.4305077 L11.749023,16.331387 L10.674805,16.331387 L10.674805,10.299648 L9.0742188,11.298672 L9.0742188,10.294277 C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 C10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077 z M14.65086,8.4305077 L18.566387,8.4305077 L18.566387,9.3435936 L15.671368,9.3435936 L15.671368,11.255703 C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 C17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 C18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 C18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 C15.560365,16.438808 14.951641,16.234707 14.468243,15.826504 L14.881817,14.929531 C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 C17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 C17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 C15.83071,11.873379 15.399232,12.079271 15.016094,12.491055 L14.65086,12.238613 z" Grid.ColumnSpan="4" Grid.RowSpan="3"/>
                                                <Ellipse HorizontalAlignment="Center" VerticalAlignment="Center" Fill="#FFFFFFFF" StrokeThickness="0" Grid.ColumnSpan="4" Width="3" Height="3"/>
                                                <Border Grid.ColumnSpan="4" Grid.Row="0" Grid.RowSpan="4" BorderThickness="1" BorderBrush="#B2FFFFFF" Opacity="0" CornerRadius="0,0,.5,.5" x:Name="DisabledVisual"/>
                                            </Grid>
                                            <!--End UI-->
                                        </Grid>
                                    </ControlTemplate>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_Button" Grid.Row="0" Grid.Column="1"
                                        Template="{StaticResource &#291;}"
                                        Foreground="{TemplateBinding Foreground}"
                                        Width="20"
                                        Margin="3,0,3,0"
                                        Focusable="False"
                                        VerticalAlignment="Top"
                                        HorizontalAlignment="Left" />
                                <DatePickerTextBox x:Name="PART_TextBox"
                                    Grid.Row="0" Grid.Column="0"
                                    HorizontalContentAlignment="Stretch"
                                    VerticalContentAlignment="Stretch"
                                    Focusable="{TemplateBinding Focusable}" />
                                <Grid x:Name="PART_DisabledVisual"
                                      Opacity="0"
                                      IsHitTestVisible="False"
                                      Grid.Row="0" Grid.Column="0"
                                      Grid.ColumnSpan="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Grid.Row="0" Grid.Column="0" RadiusX="1" RadiusY="1" Fill="#A5FFFFFF"/>
                                    <Rectangle Grid.Row="0" Grid.Column="1" RadiusX="1" RadiusY="1" Fill="#A5FFFFFF" Height="18" Width="19" Margin="3,0,3,0" />
                                    <Popup x:Name="PART_Popup"
                                           PlacementTarget="{Binding ElementName=PART_TextBox}"
                                           Placement="Bottom"
                                           StaysOpen="False"
                                           AllowsTransparency="True" />
                                </Grid>
                            </Grid>
                        </Border.Child>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="false">
                            <Setter TargetName="PART_TextBox" Property="Foreground" Value="{Binding Path=Foreground,RelativeSource={RelativeSource TemplatedParent}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DatePickerTextBox -->
    <Style TargetType="{x:Type DatePickerTextBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(base:AccessibilitySwitches.UseNetFx472CompatibleAccessibilityFeatures)}" Value="false">
                <Setter Property="AutomationProperties.Name"
                      Value="{Binding Path=(AutomationProperties.Name),
                                  Mode=OneWay, 
                                  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DatePicker}}}"/>
                <Setter Property="AutomationProperties.LabeledBy"
                        Value="{Binding Path=(AutomationProperties.LabeledBy),
                                  Mode=OneWay, 
                                  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DatePicker}}}"/>
                <Setter Property="AutomationProperties.HelpText"
                        Value="{Binding Path=(AutomationProperties.HelpText),
                                  Mode=OneWay, 
                                  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DatePicker}}}"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DatePickerTextBox">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="&#292;" Color="#FFAAAAAA"/>
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                    <VisualTransition To="MouseOver" GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#FF99C1E2" Duration="0"/>
                                        <ColorAnimation Storyboard.TargetName="watermark_decorator" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="#FF99C1E2" Duration="0"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unwatermarked" />
                                <VisualState Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="PART_Watermark" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Unfocused" />
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>


                        <!--Start UI-->
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                CornerRadius="1"
                                Opacity="1">
                            <Grid x:Name="WatermarkContent"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Border x:Name="ContentElement" BorderThickness="1">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="#FFFFFFFF"/>
                                    </Border.BorderBrush>
                                </Border>
                                <Border x:Name="watermark_decorator" BorderThickness="1">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Color="#FFFFFFFF"/>
                                    </Border.BorderBrush>
                                    <ContentControl x:Name="PART_Watermark"
                                                        Opacity="0"
                                                        Focusable="False"
                                                        IsHitTestVisible="False"
                                                        Padding="2"/>
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost"
                                              Margin="0"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                                <Border x:Name="FocusVisual" BorderBrush="#FF45D6FA" CornerRadius="1" Opacity="0" IsHitTestVisible="False"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="&#293;" Color="#FF333333"/>
    <SolidColorBrush x:Key="&#294;" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="&#295;" Color="#FF333333"/>
    <SolidColorBrush x:Key="&#296;" Color="#FF5593FF"/>
    <SolidColorBrush x:Key="&#297;" Color="#FFF3F9FF"/>
    <SolidColorBrush x:Key="&#298;" Color="#FF000000"/>
    <SolidColorBrush x:Key="&#299;" Color="#FF3C77DD"/>
    <SolidColorBrush x:Key="&#300;" Color="#FFD9ECFF"/>
    <SolidColorBrush x:Key="&#301;" Color="#FF000000"/>
    <SolidColorBrush x:Key="&#302;" Color="#FFBCBCBC"/>
    <SolidColorBrush x:Key="&#303;" Color="#FFE6E6E6"/>
    <SolidColorBrush x:Key="&#304;" Color="#FF707070"/>


    <!--=================================================================
        Expander
    ==================================================================-->
    <Style x:Key="&#305;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="0"
                                   StrokeThickness="1"
                                   Stroke="Black"
                                   StrokeDashArray="1 2"
                                   SnapsToDevicePixels="true"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="&#306;"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle"
                                     Width="19"
                                     Height="19"
                                     Stroke="{StaticResource &#293;}"
                                     Fill="{StaticResource &#294;}"
                                     HorizontalAlignment="Center"
                                     VerticalAlignment="Center"/>
                            <Path x:Name="arrow"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Stroke="{StaticResource &#295;}"
                                  StrokeThickness="2"
                                  SnapsToDevicePixels="false"
                                  Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                            <ContentPresenter Grid.Column="1"
                                              Margin="4,0,0,0"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              SnapsToDevicePixels="True"
                                              RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    Value="M 1,4.5  L 4.5,1  L 8,4.5"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#296;}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#297;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#298;}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#299;}"
                                    TargetName="circle"/>
                            <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#300;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#301;}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#302;}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#303;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#304;}"
                                    TargetName="arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="&#307;"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle"
                                         Width="19"
                                         Height="19"
                                         Stroke="{StaticResource &#293;}"
                                         Fill="{StaticResource &#294;}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"/>
                                <Path x:Name="arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Stroke="{StaticResource &#295;}"
                                      StrokeThickness="2"
                                      SnapsToDevicePixels="false"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                            </Grid>
                            <ContentPresenter Grid.Column="1"
                                              Margin="4,0,0,0"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              SnapsToDevicePixels="True"
                                              RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    Value="M 1,4.5  L 4.5,1  L 8,4.5"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#296;}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#297;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#298;}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#299;}"
                                    TargetName="circle"/>
                            <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#300;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#301;}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#302;}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#303;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#304;}"
                                    TargetName="arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="&#308;"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle"
                                         Width="19"
                                         Height="19"
                                         Stroke="{StaticResource &#293;}"
                                         Fill="{StaticResource &#294;}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"/>
                                <Path x:Name="arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Stroke="{StaticResource &#295;}"
                                      StrokeThickness="2"
                                      SnapsToDevicePixels="false"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                            </Grid>
                            <ContentPresenter Grid.Row="1"
                                              Margin="0,4,0,0"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Top"
                                              SnapsToDevicePixels="True"
                                              RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    Value="M 1,4.5  L 4.5,1  L 8,4.5"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#296;}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#297;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#298;}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#299;}"
                                    TargetName="circle"/>
                            <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#300;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#301;}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#302;}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#303;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#304;}"
                                    TargetName="arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="&#309;"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent"
                              SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="19"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Ellipse x:Name="circle"
                                         Width="19"
                                         Height="19"
                                         Stroke="{StaticResource &#293;}"
                                         Fill="{StaticResource &#294;}"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"/>
                                <Path x:Name="arrow"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Stroke="{StaticResource &#295;}"
                                      StrokeThickness="2"
                                      SnapsToDevicePixels="false"
                                      Data="M 1,1.5 L 4.5,5 L 8,1.5"/>
                            </Grid>
                            <ContentPresenter Grid.Row="1"
                                              Margin="0,4,0,0"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Top"
                                              SnapsToDevicePixels="True"
                                              RecognizesAccessKey="True"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="Data"
                                    Value="M 1,4.5  L 4.5,1  L 8,4.5"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#296;}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#297;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#298;}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#299;}"
                                    TargetName="circle"/>
                            <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#300;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#301;}"
                                    TargetName="arrow"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#302;}"
                                    TargetName="circle"/>
                            <Setter Property="Fill"
                                    Value="{StaticResource &#303;}"
                                    TargetName="circle"/>
                            <Setter Property="Stroke"
                                    Value="{StaticResource &#304;}"
                                    TargetName="arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type Expander}"
           TargetType="{x:Type Expander}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch"/>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="3"
                            SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          DockPanel.Dock="Top"
                                          Margin="1"
                                          MinWidth="0"
                                          MinHeight="0"
                                          Style="{StaticResource &#306;}"
                                          FocusVisualStyle="{StaticResource &#305;}"
                                          IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                          Content="{TemplateBinding Header}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          Foreground="{TemplateBinding Foreground}"
                                          Padding="{TemplateBinding Padding}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite"
                                              DockPanel.Dock="Bottom"
                                              Visibility="Collapsed"
                                              Focusable="false"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="true">
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="ExpandSite"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Right">
                            <Setter Property="DockPanel.Dock"
                                    Value="Right"
                                    TargetName="ExpandSite"/>
                            <Setter Property="DockPanel.Dock"
                                    Value="Left"
                                    TargetName="HeaderSite"/>
                            <Setter Property="Style"
                                    Value="{StaticResource &#309;}"
                                    TargetName="HeaderSite"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Up">
                            <Setter Property="DockPanel.Dock"
                                    Value="Top"
                                    TargetName="ExpandSite"/>
                            <Setter Property="DockPanel.Dock"
                                    Value="Bottom"
                                    TargetName="HeaderSite"/>
                            <Setter Property="Style"
                                    Value="{StaticResource &#307;}"
                                    TargetName="HeaderSite"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection"
                                 Value="Left">
                            <Setter Property="DockPanel.Dock"
                                    Value="Left"
                                    TargetName="ExpandSite"/>
                            <Setter Property="DockPanel.Dock"
                                    Value="Right"
                                    TargetName="HeaderSite"/>
                            <Setter Property="Style"
                                    Value="{StaticResource &#308;}"
                                    TargetName="HeaderSite"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--=================================================================
        FocusVisual
    ==================================================================-->
    <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               SnapsToDevicePixels="true" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#310;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Rectangle Margin="13,0,1,1"
                                   StrokeThickness="1"
                                   Stroke="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                   SnapsToDevicePixels="true"/>
                        <Rectangle Margin="13,0,1,1"
                                   StrokeThickness="1"
                                   Stroke="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                                   StrokeDashArray="2 2"
                                   SnapsToDevicePixels="true"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#311;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Rectangle Margin="1,0,1,1"
                                   StrokeThickness="1"
                                   Stroke="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"
                                   SnapsToDevicePixels="true"/>
                        <Rectangle Margin="1,0,1,1"
                                   StrokeThickness="1"
                                   Stroke="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                                   StrokeDashArray="2 2"
                                   SnapsToDevicePixels="true"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Focus Visual -->
    <Style x:Key="&#221;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#238;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--=================================================================
        GridSplitter
    ==================================================================-->
    <Style x:Key="&#320;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="#80000000"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type GridSplitter}"
           TargetType="{x:Type GridSplitter}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="PreviewStyle"
                Value="{StaticResource &#320;}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--=================================================================
            GroupBox
        ==================================================================-->
    <BorderGapMaskConverter x:Key="&#321;"/>
    <Style x:Key="{x:Type GroupBox}"
           TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush"
                Value="#D5DFE5"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <!-- Border for the background with the same CornerRadius as the Border with the Header
                                 Using this because if the background is set in the Border with the Header the opacity
                                   mask will be applied to the background as well. -->
                        <Border CornerRadius="4"
                                Grid.Row="1"
                                Grid.RowSpan="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="Transparent"
                                Background="{TemplateBinding Background}"/>

                        <Border CornerRadius="4"
                                Grid.Row="1"
                                Grid.RowSpan="3"
                                Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="White">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource &#321;}"
                                              ConverterParameter="7">
                                    <Binding ElementName="Header"
                                             Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}"
                                             Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}"
                                             Path="ActualHeight"/>
                                </MultiBinding>
                            </Border.OpacityMask>

                            <Border BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    CornerRadius="3">
                                <Border BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="White"
                                        CornerRadius="2"/>
                            </Border>
                        </Border>

                        <!-- ContentPresenter for the header -->
                        <Border x:Name="Header"
                                Padding="3,1,3,0"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="1">
                            <ContentPresenter ContentSource="Header"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <!-- Primary content for GroupBox -->
                        <ContentPresenter Grid.Row="2"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Margin="{TemplateBinding Padding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--=================================================================
        GroupItem
    ==================================================================-->
    <Style x:Key="{x:Type GroupItem}"
           TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <StackPanel>
                        <ContentPresenter x:Name="PART_Header"/>
                        <ItemsPresenter x:Name="ItemsPresenter" Margin="5,0,0,0"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--=================================================================
        HeaderedContentControl
    ==================================================================-->
    <Style x:Key="{x:Type HeaderedContentControl}"
           TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <StackPanel>
                        <ContentPresenter ContentSource="Header"/>
                        <ContentPresenter/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--=================================================================
        Hyperlink
    ==================================================================-->
    <Style x:Key="{x:Type Hyperlink}"
           TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}"/>
        <Setter Property="TextDecorations"
                Value="Underline"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="false"/>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="Red"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(base:AccessibilitySwitches.UseNetFx47CompatibleAccessibilityFeatures)}" Value="true"/>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true"/>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="Red"/>
            </MultiDataTrigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="true">
                <Setter Property="Cursor"
                        Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--=================================================================
        ItemsControl
    ==================================================================-->
    <Style x:Key="{x:Type ItemsControl}"
           TargetType="{x:Type ItemsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--=================================================================
        Label
    ==================================================================-->
    <Style x:Key="{x:Type Label}"
           TargetType="{x:Type Label}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Padding"
                Value="5"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Left"/>
        <Setter Property="VerticalContentAlignment"
                Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- This color is shared between ListBox and TextBox -->
    <SolidColorBrush x:Key="&#322;"
                     Color="#828790"/>


    <SolidColorBrush x:Key="&#323;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#324;" Color="#FFABADB3" />
    <SolidColorBrush x:Key="&#325;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#326;" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="&#327;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#328;" Color="#FFD9D9D9" />

    <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource &#323;}"/>
        <Setter Property="BorderBrush" Value="{StaticResource &#324;}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true"
                            Padding="1">
                        <ScrollViewer Padding="{TemplateBinding Padding}"
                                      Focusable="false">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource &#327;}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#328;}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






    <SolidColorBrush x:Key="&#329;" Color="#FFFCFCFC" />
    <SolidColorBrush x:Key="&#330;" Color="#FFFCFCFC" />
    <SolidColorBrush x:Key="&#331;" Color="#1F26A0DA" />
    <SolidColorBrush x:Key="&#332;" Color="#a826A0Da" />
    <SolidColorBrush x:Key="&#333;" Color="#3D26A0DA" />
    <SolidColorBrush x:Key="&#334;" Color="#FF26A0DA" />
    <SolidColorBrush x:Key="&#335;" Color="#3DDADADA" />
    <SolidColorBrush x:Key="&#336;" Color="#FFDADADA" />

    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource &#221;}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource &#331;}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#332;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource &#335;}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#336;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource &#333;}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#334;}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--=================================================================
        ListView
    ==================================================================-->

    <!-- GridView ScrollViewer Style -->
    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <!-- Grid.Column="0" Grid.Row="0" -->
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <!-- Column Headers Scroll Viewer -->
                            <ScrollViewer DockPanel.Dock="Top"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"
                                          Focusable="false">
                                <!-- Set a Margin here because ListViewItem has a 2-width border around. Otherwise the horizontal scrolling of header bar and item will not keep the same pace -->
                                <GridViewHeaderRowPresenter Margin="2,0,2,0"
                                                            Columns="{Binding Path=TemplatedParent.View.Columns,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderStringFormat="{Binding Path=TemplatedParent.View.ColumnHeaderStringFormat,RelativeSource={RelativeSource TemplatedParent}}"
                                                            AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu,RelativeSource={RelativeSource TemplatedParent}}"
                                                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip,RelativeSource={RelativeSource TemplatedParent}}"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                            <!-- Items Scroll Viewer -->
                            <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                                    KeyboardNavigation.DirectionalNavigation="Local"
                                                    Content="{TemplateBinding Content}"
                                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </DockPanel>
                        <!-- Horizontal Scroll Bar -->
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   Minimum="0.0"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Value="{Binding Path=HorizontalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Cursor="Arrow"/>
                        <!-- Vertical Scroll Bar -->
                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Orientation="Vertical"
                                   Grid.Column="1"
                                   Minimum="0.0"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Value="{Binding Path=VerticalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Cursor="Arrow"/>
                        <!-- Right Bottom Corner -->
                        <DockPanel Grid.Column="1"
                                   Grid.Row="1"
                                   Background="{Binding Path=Background,ElementName=PART_VerticalScrollBar}"
                                   LastChildFill="false">
                            <Rectangle DockPanel.Dock="Left"
                                       Width="1"
                                       Fill="White"
                                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <Rectangle DockPanel.Dock="Top"
                                       Height="1"
                                       Fill="White"
                                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="&#337;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFF2F2F2"
                          Offset="0"/>
            <GradientStop Color="#FFD5D5D5"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#338;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF"
                          Offset="0"/>
            <GradientStop Color="#FFFFFFFF"
                          Offset="0.4091"/>
            <GradientStop Color="#FFF7F8F9"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#339;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFBDEDFF"
                          Offset="0"/>
            <GradientStop Color="#FFB7E7FB"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#340;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FF8DD6F7"
                          Offset="0"/>
            <GradientStop Color="#FF8AD1F5"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="&#341;"
           TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right"
                Value="-9"/>
        <Setter Property="Width"
                Value="18"/>
        <Setter Property="Height"
                Value="{Binding Path=ActualHeight,RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Padding"
                Value="0"/>
        <Setter Property="Background"
                Value="{StaticResource &#337;}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="Transparent">
                        <Rectangle HorizontalAlignment="Center"
                                   Width="1"
                                   Fill="{TemplateBinding Background}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type GridViewColumnHeader}"
           TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment"
                Value="Center"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Background"
                Value="{StaticResource &#338;}"/>
        <Setter Property="BorderBrush"
                Value="{StaticResource &#337;}"/>
        <Setter Property="BorderThickness"
                Value="0"/>
        <Setter Property="Padding"
                Value="2,0,2,0"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Grid SnapsToDevicePixels="true">
                        <Border Name="HeaderBorder"
                                BorderThickness="0,1,0,1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="7"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Rectangle Name="UpperHighlight"
                                           Visibility="Collapsed"
                                           Fill="#FFE3F7FF"/>
                                <Border Grid.RowSpan="2"
                                        Padding="{TemplateBinding Padding}">
                                    <ContentPresenter Name="HeaderContent"
                                                      Margin="0,0,0,1"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      RecognizesAccessKey="True"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                            </Grid>
                        </Border>
                        <Border Name="HeaderHoverBorder"
                                BorderThickness="1,0,1,1"
                                Margin="1,1,0,0"/>
                        <Border Name="HeaderPressBorder"
                                BorderThickness="1,1,1,0"
                                Margin="1,0,0,1"/>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper"
                                   Style="{StaticResource &#341;}"/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="HeaderBorder"
                                    Property="Background"
                                    Value="{StaticResource &#339;}"/>
                            <Setter TargetName="HeaderHoverBorder"
                                    Property="BorderBrush"
                                    Value="#FF88CBEB"/>
                            <Setter TargetName="UpperHighlight"
                                    Property="Visibility"
                                    Value="Visible"/>
                            <Setter TargetName="PART_HeaderGripper"
                                    Property="Background"
                                    Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="HeaderBorder"
                                    Property="Background"
                                    Value="{StaticResource &#340;}"/>
                            <Setter TargetName="HeaderHoverBorder"
                                    Property="BorderBrush"
                                    Value="#FF95DAF9"/>
                            <Setter TargetName="HeaderPressBorder"
                                    Property="BorderBrush"
                                    Value="#FF7A9EB1"/>
                            <Setter TargetName="UpperHighlight"
                                    Property="Visibility"
                                    Value="Visible"/>
                            <Setter TargetName="UpperHighlight"
                                    Property="Fill"
                                    Value="#FFBCE4F9"/>
                            <Setter TargetName="PART_HeaderGripper"
                                    Property="Visibility"
                                    Value="Hidden"/>
                            <Setter TargetName="HeaderContent"
                                    Property="Margin"
                                    Value="1,1,0,0"/>
                        </Trigger>
                        <Trigger Property="Height"
                                 Value="Auto">
                            <Setter Property="MinHeight"
                                    Value="20"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role"
                     Value="Floating">
                <Setter Property="Opacity"
                        Value="0.4082"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Canvas Name="PART_FloatingHeaderCanvas">
                                <Rectangle Opacity="0.4697"
                                           Fill="#FF000000"
                                           Width="{TemplateBinding ActualWidth}"
                                           Height="{TemplateBinding ActualHeight}"/>
                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role"
                     Value="Padding">
                <Setter Property="Template">
                    <Setter.Value>
                        <!--The same as normal header, just no gripper.-->
                        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                            <Border Name="HeaderBorder"
                                    BorderThickness="0,1,0,1"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Height"
                                         Value="Auto">
                                    <Setter Property="MinHeight"
                                            Value="20"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- GridView Style -->
    <Style x:Key="{x:Static GridView.GridViewStyleKey}"
           TargetType="{x:Type ListView}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush"
                Value="{StaticResource &#322;}"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Foreground"
                Value="#FF042271"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <theme:ListBoxChrome Name="Bd"
                                         BorderThickness="{TemplateBinding BorderThickness}"
                                         BorderBrush="{TemplateBinding BorderBrush}"
                                         Background="{TemplateBinding Background}"
                                         RenderMouseOver="{TemplateBinding IsMouseOver}"
                                         RenderFocused="{TemplateBinding IsKeyboardFocusWithin}"
                                         SnapsToDevicePixels="true">
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"
                                      Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </theme:ListBoxChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="&#342;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle StrokeThickness="1"
                               RadiusX="2"
                               RadiusY="2"
                               Stroke="#8E6EA6F5"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="&#343;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFF1FBFF"
                          Offset="0"/>
            <GradientStop Color="#FFD5F1FE"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="&#344;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFD9F4FF"
                          Offset="0"/>
            <GradientStop Color="#FF9BDDFB"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="&#345;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFEAF9FF"
                          Offset="0"/>
            <GradientStop Color="#FFC9EDFD"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="&#346;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFEEEDED"
                          Offset="0"/>
            <GradientStop Color="#FFDDDDDD"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!--=================================================================
        ListViewItem
    ==================================================================-->
    <!-- GridView ItemContainerStyle -->
    <Style x:Key="{x:Static GridView.GridViewItemContainerStyleKey}"
           TargetType="{x:Type ListViewItem}">
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource &#342;}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Margin"
                Value="0,0,0,1"/>
        <Setter Property="Padding"
                Value="5,2,5,2"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="2"
                            SnapsToDevicePixels="true">
                        <Border Name="InnerBorder"
                                CornerRadius="1"
                                BorderThickness="1">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="11"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Rectangle Name="UpperHighlight"
                                           Visibility="Collapsed"
                                           Fill="#75FFFFFF"/>
                                <!--remove the HorizontalAlignment due to HeaderRowPresenter does not have the ability to align to center or right-->
                                <GridViewRowPresenter Grid.RowSpan="2"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{StaticResource &#343;}"/>
                            <Setter Property="BorderBrush"
                                    Value="#FFCCF0FF"/>
                            <Setter TargetName="UpperHighlight"
                                    Property="Visibility"
                                    Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter Property="Background"
                                    Value="{StaticResource &#344;}"/>
                            <Setter Property="BorderBrush"
                                    Value="#FF98DDFB"/>
                            <Setter TargetName="InnerBorder"
                                    Property="BorderBrush"
                                    Value="#80FFFFFF"/>
                            <Setter TargetName="UpperHighlight"
                                    Property="Visibility"
                                    Value="Visible"/>
                            <Setter TargetName="UpperHighlight"
                                    Property="Fill"
                                    Value="#40FFFFFF"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true"/>
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{StaticResource &#346;}"/>
                            <Setter Property="BorderBrush"
                                    Value="#FFCFCFCF"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true"/>
                                <Condition Property="IsMouseOver"
                                           Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background"
                                    Value="{StaticResource &#345;}"/>
                            <Setter Property="BorderBrush"
                                    Value="#FF98DDFB"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="&#347;" Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="&#348;" Color="#FF999999" />
    <SolidColorBrush x:Key="&#349;" Color="#FF212121" />

    <SolidColorBrush x:Key="&#350;" Color="#FFD7D7D7" />

    <SolidColorBrush x:Key="&#351;" Color="#3DDADADA" />
    <SolidColorBrush x:Key="&#352;" Color="#FFDADADA" />
    <SolidColorBrush x:Key="&#353;" Color="#FF707070" />

    <SolidColorBrush x:Key="&#354;" Color="#3D26A0DA" />
    <SolidColorBrush x:Key="&#355;" Color="#FF26A0DA" />

    <SolidColorBrush x:Key="&#356;" Color="#3D26A0DA" />
    <SolidColorBrush x:Key="&#357;" Color="#FF26A0DA" />

    <SolidColorBrush x:Key="&#358;" Color="#0A000000" />
    <SolidColorBrush x:Key="&#359;" Color="#21000000" />


    <!--=================================================================
        Menu
    ==================================================================-->

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource &#347;}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground" Value="{StaticResource &#349;}" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                        <ItemsPresenter
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <MenuScrollingVisibilityConverter x:Key="&#360;"/>
    <Geometry x:Key="&#203;"> M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Geometry x:Key="&#361;">   M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Geometry x:Key="&#362;">M 0,0 L 4,3.5 L 0,7 Z</Geometry>


    <Geometry x:Key="&#363;">F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z</Geometry>



    <!--=================================================================
        ContextMenu
    ==================================================================-->
    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=SubmenuContent}" TargetType="{x:Type ContentControl}">
        <Border
            Background="{TemplateBinding Menu.Background}"
            BorderBrush="{TemplateBinding Menu.BorderBrush}"
            BorderThickness="1"
            Padding="2">
            <Border
                Background="{StaticResource &#347;}">
                <ContentPresenter/>
            </Border>
        </Border>
    </ControlTemplate>

    <!--=================================================================
        ScrollViewer inside a MenuItem or ContextMenu
    ==================================================================-->
    <Style x:Key="&#364;" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}" >
        <Setter Property="ClickMode" Value="Hover"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="templateRoot"
                        SnapsToDevicePixels="true"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="1">
                        <ContentPresenter
                            Margin="6"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border
                            Grid.Column="0"
                            Grid.Row="1">
                            <ScrollContentPresenter
                                Margin="{TemplateBinding Padding}"
                                CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        </Border>
                        <RepeatButton
                            Grid.Column="0"
                            Grid.Row="0"
                            Style="{StaticResource &#364;}"
                            Command="{x:Static ScrollBar.LineUpCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="false">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="0" Converter="{StaticResource &#360;}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path
                                Data="{StaticResource &#361;}"
                                Fill="{StaticResource &#349;}" />
                        </RepeatButton>
                        <RepeatButton
                            Grid.Column="0"
                            Grid.Row="2"
                            Style="{StaticResource &#364;}"
                            Command="{x:Static ScrollBar.LineDownCommand}"
                            CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="false">
                            <RepeatButton.Visibility>
                                <MultiBinding ConverterParameter="100" Converter="{StaticResource &#360;}" FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}"/>
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path
                                Data="{StaticResource &#203;}"
                                Fill="{StaticResource &#349;}" />
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--=================================================================
        MenuItem
    ==================================================================-->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{StaticResource &#350;}"/>
        <Setter Property="BorderBrush" Value="{StaticResource &#350;}"/>
        <Setter Property="MinHeight" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="30,0,0,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
            SnapsToDevicePixels="true"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Width="16"
                    Height="16"
                    Margin="3" />
                <Path x:Name="GlyphPanel"
                    Data="{StaticResource &#363;}"
                    FlowDirection="LeftToRight"
                    Margin="3"
                    Visibility="Collapsed"
                    VerticalAlignment="Center"
                    Fill="{StaticResource &#349;}" />
                <ContentPresenter
                    Grid.Column="1"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    Margin="{TemplateBinding Padding}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#356;}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#357;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{StaticResource &#353;}" />
                <Setter TargetName="GlyphPanel" Property="Fill" Value="{StaticResource &#353;}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#358;}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#359;}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
            SnapsToDevicePixels="true"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
            <Grid VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Width="16"
                    Height="16"
                    Margin="3"/>
                <Path x:Name="GlyphPanel"
                    Data="{StaticResource &#363;}"
                    FlowDirection="LeftToRight"
                    Margin="3"
                    Visibility="Collapsed"
                    VerticalAlignment="Center"
                    Fill="{TemplateBinding Menu.Foreground}" />
                <ContentPresenter
                    Grid.Column="1"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <Popup x:Name="PART_Popup"
                    AllowsTransparency="true"
                    Focusable="false"
                    IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=templateRoot}" >
                    <Border x:Name="SubMenuBorder"
                        Background="{StaticResource &#347;}"
                        BorderBrush="{StaticResource &#348;}"
                        BorderThickness="1"
                        Padding="2">
                        <ScrollViewer x:Name="SubMenuScrollViewer"
                            Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle
                                        Name="OpaqueRect"
                                        Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                        Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                        Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                </Canvas>
                                <Rectangle HorizontalAlignment="Left"
                                           Width="1"
                                           Margin="29,2,0,2"
                                           Fill="{StaticResource &#350;}"/>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                    KeyboardNavigation.TabNavigation="Cycle"
                                    Grid.IsSharedSizeScope="true"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#356;}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#357;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{StaticResource &#353;}" />
                <Setter TargetName="GlyphPanel" Property="Fill" Value="{StaticResource &#353;}" />
            </Trigger>
            <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false" >
                <Setter TargetName="OpaqueRect"  Property="Canvas.Top"  Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
            SnapsToDevicePixels="true"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Width="16"
                    Height="16"
                    Margin="3"/>
                <Border x:Name="GlyphPanel"
                    Visibility="Hidden"
                    Height="22"
                    Width="22"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Background="{StaticResource &#354;}"
                    BorderBrush="{StaticResource &#355;}"
                    BorderThickness="1"
                    ClipToBounds="False"
                    Margin="-1,0,0,0">
                    <Path x:Name="Glyph"
                        Data="{StaticResource &#363;}"
                        FlowDirection="LeftToRight"
                        Height="11"
                        Width="10"
                        Fill="{StaticResource &#349;}" />
                </Border>
                <ContentPresenter x:Name="menuHeaderContainer"
                    Grid.Column="2"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <TextBlock x:Name="menuGestureText"
                    Grid.Column="4"
                    Text="{TemplateBinding InputGestureText}"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    VerticalAlignment="Center"
                    Opacity="0.7" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#356;}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#357;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{StaticResource &#353;}" />
                <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource &#353;}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#358;}" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#359;}" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="templateRoot"
            SnapsToDevicePixels="true"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}">
            <Grid Margin="-1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="13"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="30"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                    ContentSource="Icon"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Width="16"
                    Height="16"
                    Margin="3"/>
                <Border x:Name="GlyphPanel"
                    BorderThickness="1"
                    Height="22"
                    Width="22"
                    Visibility="Hidden"
                    VerticalAlignment="Center"
                    Margin="-1,0,0,0"
                    BorderBrush="{StaticResource &#357;}"
                    Background="{StaticResource &#356;}">
                    <Path x:Name="Glyph"
                        Data="{StaticResource &#363;}"
                        FlowDirection="LeftToRight"
                        Height="11"
                        Width="9"
                        Fill="{StaticResource &#349;}" />
                </Border>
                <ContentPresenter
                    Grid.Column="2"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    ContentSource="Header"
                    RecognizesAccessKey="True"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <TextBlock
                    Grid.Column="4"
                    Text="{TemplateBinding InputGestureText}"
                    VerticalAlignment="Center"
                    Margin="{TemplateBinding MenuItem.Padding}"
                    Opacity="0.7" />
                <Path x:Name="RightArrow"
                    Grid.Column="5"
                    Data="{StaticResource &#362;}"
                    Margin="10,0,0,0"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Left"
                    Fill="{StaticResource &#349;}" />
                <Popup x:Name="PART_Popup"
                    AllowsTransparency="true"
                    Focusable="false"
                    IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                    Placement="Right"
                    HorizontalOffset="-2"
                    VerticalOffset="-3">
                    <Border x:Name="SubMenuBorder"
                        Background="{StaticResource &#347;}"
                        BorderBrush="{StaticResource &#348;}"
                        BorderThickness="1"
                        Padding="2">
                        <ScrollViewer x:Name="SubMenuScrollViewer"
                            Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle
                                        Name="OpaqueRect"
                                        Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                        Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                        Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                </Canvas>
                                <Rectangle HorizontalAlignment="Left"
                                           Width="1"
                                           Margin="29,2,0,2"
                                           Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                    KeyboardNavigation.TabNavigation="Cycle"
                                    Grid.IsSharedSizeScope="true"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="templateRoot" Property="Background" Value="Transparent" />
                <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#357;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{StaticResource &#353;}" />
                <Setter TargetName="Glyph" Property="Fill" Value="{StaticResource &#353;}" />
                <Setter TargetName="RightArrow" Property="Fill" Value="{StaticResource &#353;}" />
            </Trigger>
            <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false" >
                <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuItemTemplateKey}}" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelHeaderTemplateKey}}" />
                <Setter Property="Padding" Value="6,0"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=TopLevelItemTemplateKey}}" />
                <Setter Property="Padding" Value="6,0"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type MenuItem}, ResourceId=SubmenuHeaderTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--=================================================================
        NavigationWindow
    ==================================================================-->


    <JournalEntryUnifiedViewConverter x:Key="&#317;"/>

    <LinearGradientBrush x:Key="&#365;"
                         StartPoint="0.5,0.0"
                         EndPoint="0.5,1.0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFFFFF" Offset="0.0"/>
                <GradientStop Color="#CCD4E9" Offset="0.1"/>
                <GradientStop Color="#4881D2" Offset="0.47"/>
                <GradientStop Color="#001A5A" Offset="0.47"/>
                <GradientStop Color="#007BD6" Offset="0.70"/>
                <GradientStop Color="#54DAFF" Offset="0.85"/>
                <GradientStop Color="#86FFFF" Offset="0.95"/>
                <GradientStop Color="#FFFFFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#366;"
                         StartPoint="0.5,0.0"
                         EndPoint="0.5,1.0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFFFFF" Offset="0.0"/>
                <GradientStop Color="#DFEDF9" Offset="0.1"/>
                <GradientStop Color="#3086E1" Offset="0.47"/>
                <GradientStop Color="#003B91" Offset="0.47"/>
                <GradientStop Color="#1793EF" Offset="0.70"/>
                <GradientStop Color="#5AD4FF" Offset="0.85"/>
                <GradientStop Color="#BDFFFF" Offset="0.95"/>
                <GradientStop Color="#FFFFFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#367;"
                         StartPoint="0.5,0.0"
                         EndPoint="0.5,1.0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#C0D2F5" Offset="0.0"/>
                <GradientStop Color="#5E7A9C" Offset="0.47"/>
                <GradientStop Color="#00062D" Offset="0.47"/>
                <GradientStop Color="#005F9F" Offset="0.70"/>
                <GradientStop Color="#1FA4E2" Offset="0.85"/>
                <GradientStop Color="#61DAFF" Offset="0.95"/>
                <GradientStop Color="#48CFFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#368;"
                         StartPoint="0.5,0.0"
                         EndPoint="0.5,1.0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFFFFF" Offset="0"/>
                <GradientStop Color="#EBEEF5" Offset="0.5"/>
                <GradientStop Color="#D8DDEB" Offset="0.5"/>
                <GradientStop Color="#DFE2F0" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#369;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#6C90C4" Offset="0"/>
                <GradientStop Color="#315BB4" Offset="0.5"/>
                <GradientStop Color="#002091" Offset="0.5"/>
                <GradientStop Color="#08377C" Offset="1"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#370;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#8AB1FB" Offset="0"/>
            <GradientStop Color="#002874" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#371;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFFFFF" Offset="0.5"/>
                <GradientStop Color="#EEEEEE" Offset="0.5"/>
                <GradientStop Color="#B0B0B0" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#372;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#33B5DA" Offset="0"/>
                <GradientStop Color="#335799" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="&#313;"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStop Color="#FFFFFF" Offset="0"/>
            <GradientStop Color="#E3E8F4" Offset="0.5"/>
            <GradientStop Color="#CFD7EB" Offset="0.5"/>
            <GradientStop Color="#E9ECFA" Offset="1.0"/>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="&#373;"
                     Color="{StaticResource {x:Static SystemColors.HighlightColorKey}}"
                     Opacity="0.25"/>

    <!-- Navigation Window back/fwd button Drop Down style-->
    <Style x:Key="&#316;"
           TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="Header"
                Value="{Binding Path=(JournalEntry.Name)}"/>
        <Setter Property="Command"
                Value="NavigationCommands.NavigateJournal"/>
        <!-- The CommandTarget is the containing NavigationWindow or Frame. It is important to target it
            directly, to avoid the command routing's dependence on the focused element. Menu is a FocusScope. -->
        <Setter Property="CommandTarget"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Menu}}, Path=TemplatedParent}"/>
        <Setter Property="CommandParameter"
                Value="{Binding RelativeSource={RelativeSource Self}}"/>
        <Setter Property="JournalEntryUnifiedViewConverter.JournalEntryPosition"
                Value="{Binding (JournalEntryUnifiedViewConverter.JournalEntryPosition)}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid Name="Panel"
                          Background="Transparent"
                          SnapsToDevicePixels="true">
                        <Path Name="Glyph"
                              SnapsToDevicePixels="false"
                              Margin="7,5"
                              Width="10"
                              Height="10"
                              HorizontalAlignment="Left"
                              StrokeStartLineCap="Triangle"
                              StrokeEndLineCap="Triangle"
                              StrokeThickness="2"
                              Stroke="{TemplateBinding Foreground}"/>
                        <ContentPresenter ContentSource="Header"
                                          Margin="24,5,21,5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="JournalEntryUnifiedViewConverter.JournalEntryPosition"
                                 Value="Current">
                            <Setter TargetName="Panel"
                                    Property="Background"
                                    Value="{StaticResource &#373;}"/>
                            <Setter TargetName="Glyph"
                                    Property="Data"
                                    Value="M 0,5 L 2.5,8 L 7,3 "/>
                            <Setter TargetName="Glyph"
                                    Property="FlowDirection"
                                    Value="LeftToRight"/>
                            <Setter TargetName="Glyph"
                                    Property="StrokeLineJoin"
                                    Value="Miter"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted"
                                 Value="true">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            <Setter TargetName="Panel"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted"
                                           Value="true"/>
                                <Condition Property="JournalEntryUnifiedViewConverter.JournalEntryPosition"
                                           Value="Forward"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Glyph"
                                    Property="Stroke"
                                    Value="White"/>
                            <Setter TargetName="Glyph"
                                    Property="Data"
                                    Value="M 1,5 L 7,5 M 5,1 L 9,5 L 5,9"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted"
                                           Value="true"/>
                                <Condition Property="JournalEntryUnifiedViewConverter.JournalEntryPosition"
                                           Value="Back"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Glyph"
                                    Property="Stroke"
                                    Value="White"/>
                            <Setter TargetName="Glyph"
                                    Property="Data"
                                    Value="M 9,5 L 3,5 M 5,1 L 1,5 L 5,9"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#315;"
           TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid>
                        <Popup x:Name="PART_Popup"
                                   AllowsTransparency="true"
                                   Placement="Bottom"
                                   VerticalOffset="2"
                                   IsOpen="{Binding Path=(MenuItem.IsSubmenuOpen),RelativeSource={RelativeSource TemplatedParent}}"
                                   Focusable="false"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                            <theme:SystemDropShadowChrome Name="Shdw"
                                                          Color="Transparent">
                                <Border Name="SubMenuBorder"
                                        Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">

                                    <ScrollViewer Name="SubMenuScrollViewer"
                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle
                                                    Name="OpaqueRect"
                                                    Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                                    Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                            </Canvas>
                                            <ItemsPresenter Name="ItemsPresenter" Margin="2"
                                                            KeyboardNavigation.TabNavigation="Cycle"
                                                            KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>

                        <Grid x:Name="Panel"
                              Width="26"
                              Background="Transparent"
                              HorizontalAlignment="Right" >

                            <Border SnapsToDevicePixels="True"
                                    Visibility="Hidden"
                                    Name="HighlightBorder"
                                    BorderThickness="1,1,1,1"
                                    BorderBrush="#B0B5BACE"
                                    CornerRadius="2" >
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0"
                                                         EndPoint="0,1" >
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Color="#20DDDDDD" Offset="0" />
                                            <GradientStop Color="#80FFFFFF" Offset="1" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border BorderBrush="#A0FFFFFF" CornerRadius="1.5" BorderThickness="1" />
                            </Border>

                            <Path x:Name="Arrow"
                                  SnapsToDevicePixels="false"
                                  HorizontalAlignment="Right"
                                  VerticalAlignment="Center"
                                  Margin="{TemplateBinding Padding}"
                                  Fill="{StaticResource &#372;}"
                                  Stroke="White"
                                  StrokeThickness="1"
                                  StrokeLineJoin="Round"
                                  Data="M 0 0 L 4.5 5 L 9 0 Z"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="HighlightBorder"
                                    Property="Visibility"
                                    Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow"
                                    Property="Fill"
                                    Value="#A5AABE"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup"
                                 Property="Popup.HasDropShadow"
                                 Value="true">
                            <Setter TargetName="Shdw"
                                    Property="Margin"
                                    Value="0,0,5,5"/>
                            <Setter TargetName="Shdw"
                                    Property="SnapsToDevicePixels"
                                    Value="true"/>
                            <Setter TargetName="Shdw"
                                    Property="Color"
                                    Value="#71000000"/>
                        </Trigger>
                        <Trigger SourceName="SubMenuScrollViewer"
                                 Property="ScrollViewer.CanContentScroll"
                                 Value="false" >
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Top"
                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Left"
                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#314;"
           TargetType="{x:Type Menu}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <DockPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="None"/>
        <Setter Property="IsMainMenu"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Navigation Window Back Button Style -->
    <Style x:Key="&#318;"
           TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="Command"
                Value="NavigationCommands.BrowseBack"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="24"
                          Height="24"
                          Background="Transparent">
                        <!-- Circle -->
                        <Ellipse Name="Circle"
                                 StrokeThickness="1"
                                 Fill="{StaticResource &#365;}"
                                 Stroke="{StaticResource &#369;}" />

                        <!-- Arrow -->
                        <Path Name="Arrow"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              StrokeThickness="0.75"
                              Data="M0.37,7.69 L5.74,14.20 A1.5,1.5,0,1,0,10.26,12.27 L8.42,10.42 14.90,10.39 A1.5,1.5,0,1,0,14.92,5.87 L8.44,5.90 10.31,4.03 A1.5,1.5,0,1,0,5.79,1.77 z"
                              Stroke="{StaticResource &#370;}"
                              Fill="{StaticResource &#371;}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Fill"
                                    Value="{StaticResource &#368;}"
                                    TargetName="Circle"/>
                            <Setter Property="Stroke"
                                    Value="#B5BACE"
                                    TargetName="Circle"/>
                            <Setter Property="Stroke"
                                    Value="#B0B5BACE"
                                    TargetName="Arrow"/>
                            <Setter Property="Fill"
                                    Value="#D0FFFFFF"
                                    TargetName="Arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Fill"
                                    Value="{StaticResource &#366;}"
                                    TargetName="Circle"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Fill"
                                    Value="{StaticResource &#367;}"
                                    TargetName="Circle"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- Navigation Window Forward Button Style -->
    <Style x:Key="&#319;"
           TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="Command"
                Value="NavigationCommands.BrowseForward"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="24"
                          Height="24"
                          Background="Transparent">
                        <!-- Circle -->
                        <Ellipse Name="Circle"
                                 Grid.Column="0"
                                 StrokeThickness="1"
                                 Fill="{StaticResource &#365;}"
                                 Stroke="{StaticResource &#369;}" />

                        <!-- Arrow -->
                        <Path Name="Arrow"
                              Grid.Column="0"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              StrokeThickness="0.75"
                              Data="M0.37,7.69 L5.74,14.20 A1.5,1.5,0,1,0,10.26,12.27 L8.42,10.42 14.90,10.39 A1.5,1.5,0,1,0,14.92,5.87 L8.44,5.90 10.31,4.03 A1.5,1.5,0,1,0,5.79,1.77 z"
                              Stroke="{StaticResource &#370;}"
                              Fill="{StaticResource &#371;}"
                              RenderTransformOrigin="0.5,0">
                            <Path.RenderTransform>
                                <ScaleTransform ScaleX="-1" />
                            </Path.RenderTransform>
                        </Path>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Fill"
                                    Value="{StaticResource &#368;}"
                                    TargetName="Circle"/>
                            <Setter Property="Stroke"
                                    Value="#B5BACE"
                                    TargetName="Circle"/>
                            <Setter Property="Stroke"
                                    Value="#B0B5BACE"
                                    TargetName="Arrow"/>
                            <Setter Property="Fill"
                                    Value="#D0FFFFFF"
                                    TargetName="Arrow"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Fill"
                                    Value="{StaticResource &#366;}"
                                    TargetName="Circle"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="Fill"
                                    Value="{StaticResource &#367;}"
                                    TargetName="Circle"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <ControlTemplate x:Key="&#374;"
                     TargetType="{x:Type NavigationWindow}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
                <Grid Name="NavChrome"
                      Background="{StaticResource &#313;}"
                      DockPanel.Dock="Top"
                      Height="30">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="29"/>
                        <ColumnDefinition Width="26"/>
                        <ColumnDefinition Width="17"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Menu -->
                    <Menu Name="NavMenu"
                          Grid.ColumnSpan="3"
                          Height="23"
                          Margin="1,0,0,1"
                          VerticalAlignment="Center"
                          Style="{StaticResource &#314;}">

                        <MenuItem Padding="0,2,5,0"
                                  Style="{StaticResource &#315;}"
                                  ItemContainerStyle="{StaticResource &#316;}"
                                  IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
                            <MenuItem.ItemsSource>
                                <MultiBinding Converter="{StaticResource &#317;}">
                                    <MultiBinding.Bindings>
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="(NavigationWindow.BackStack)" />
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="(NavigationWindow.ForwardStack)" />
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </MenuItem.ItemsSource>
                        </MenuItem>
                    </Menu>

                    <Path Grid.Column="0"
                          SnapsToDevicePixels="false"
                          IsHitTestVisible="false"
                          Margin="2,0,0,0"
                          Grid.ColumnSpan="3"
                          StrokeThickness="1"
                          HorizontalAlignment="Left"
                          VerticalAlignment="Center"
                          Data="M22.5767,21.035 Q27,19.37 31.424,21.035 A12.5,12.5,0,0,0,53.5,13 A12.5,12.5,0,0,0,37.765,0.926 Q27,4.93 16.235,0.926 A12.5,12.5,0,0,0,0.5,13 A12.5,12.5,0,0,0,22.5767,21.035 z">
                        <Path.Fill>
                            <LinearGradientBrush StartPoint="0,0"
                                                 EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#A0C2CCE7" Offset="0"/>
                                        <GradientStop Color="#60FFFFFF" Offset="1"/>
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Path.Fill>

                        <Path.Stroke>
                            <LinearGradientBrush StartPoint="0,0"
                                                 EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#FFB7C2E3" Offset="0.2"/>
                                        <GradientStop Color="#A0FFFFFF" Offset="0.9"/>
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Path.Stroke>
                    </Path>

                    <Button Style="{StaticResource &#318;}"
                            Margin="3,0,2,0"
                            Grid.Column="0"/>


                    <Button Style="{StaticResource &#319;}"
                            Margin="2,0,0,0"
                            Grid.Column="1"/>
                </Grid>
                <Grid>
                    <AdornerDecorator>
                        <ContentPresenter Name="PART_NavWinCP"
                                          ClipToBounds="true"/>

                    </AdornerDecorator>


                    <ResizeGrip x:Name="WindowResizeGrip"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                Visibility="Collapsed"
                                IsTabStop="false"/>
                </Grid>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowsNavigationUI" Value="False">
                <Setter TargetName="NavChrome" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <MultiTrigger>
                <!-- There may be perf implications b/c of the following conditions.  We may cause
                        an extra layout to happen when WindowState changes to Minimized and ResizeMode
                        is set to CanResizeWithGrip -->
                <MultiTrigger.Conditions>
                    <Condition Property="Window.ResizeMode"
                               Value="CanResizeWithGrip"/>
                    <Condition Property="Window.WindowState"
                               Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="WindowResizeGrip"
                        Property="Visibility"
                        Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="NavigationWindow.CanGoForward"
                               Value="false"/>
                    <Condition Property="NavigationWindow.CanGoBack"
                               Value="false"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="NavMenu"
                        Property="IsEnabled"
                        Value="false"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type NavigationWindow}"
           TargetType="{x:Type NavigationWindow}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Template"
                Value="{StaticResource &#374;}"/>
    </Style>






    <!--=================================================================
        Page
    ==================================================================-->
    <Style x:Key="{x:Type Page}"
           TargetType="{x:Type Page}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Page}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter Content="{TemplateBinding Page.Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="&#375;" Color="#FF06B025" />
    <SolidColorBrush x:Key="&#376;" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="&#377;" Color="#FFBCBCBC" />

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource &#375;}" />
        <Setter Property="Background" Value="{StaticResource &#376;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#377;}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border
						    BorderThickness="{TemplateBinding BorderThickness}"
						    BorderBrush="{TemplateBinding BorderBrush}"
						    Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator"
						    HorizontalAlignment="Left"
						    ClipToBounds="true">
                            <Rectangle x:Name="Indicator"
							    Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation"
							    RenderTransformOrigin="0.5,0.5"
							    Fill="{TemplateBinding Foreground}">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <SolidColorBrush x:Key="&#378;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#379;" Color="#FF707070" />
    <SolidColorBrush x:Key="&#380;" Color="#FF212121" />
    <SolidColorBrush x:Key="&#381;" Color="#FFF3F9FF" />
    <SolidColorBrush x:Key="&#382;" Color="#FF5593FF" />
    <SolidColorBrush x:Key="&#383;" Color="#FF212121" />
    <SolidColorBrush x:Key="&#384;" Color="#FFD9ECFF" />
    <SolidColorBrush x:Key="&#385;" Color="#FF3C77DD" />
    <SolidColorBrush x:Key="&#386;" Color="#FF212121" />
    <SolidColorBrush x:Key="&#387;" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="&#388;" Color="#FFBCBCBC" />
    <SolidColorBrush x:Key="&#389;" Color="#FF707070" />

    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource &#221;}"/>
        <Setter Property="Background" Value="{StaticResource &#378;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#379;}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="radioButtonBorder"
                            Margin="1,1,2,1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="100">
                            <Grid x:Name="markGrid" Margin="2">
                                <Ellipse x:Name="optionMark" Opacity="0" MinWidth="6" MinHeight="6" Fill="{StaticResource &#380;}"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                            RecognizesAccessKey="True"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource &#238;}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource &#381;}" TargetName="radioButtonBorder" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#382;}" TargetName="radioButtonBorder" />
                            <Setter Property="Fill" Value="{StaticResource &#383;}" TargetName="optionMark" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource &#387;}" TargetName="radioButtonBorder" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#388;}" TargetName="radioButtonBorder" />
                            <Setter Property="Fill" Value="{StaticResource &#389;}" TargetName="optionMark" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource &#384;}" TargetName="radioButtonBorder" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#385;}" TargetName="radioButtonBorder" />
                            <Setter Property="Fill" Value="{StaticResource &#386;}" TargetName="optionMark" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" Value="1" TargetName="optionMark" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" Value="0.56" TargetName="optionMark" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <LinearGradientBrush x:Key="&#390;"
                          StartPoint="0,0.25"
                          EndPoint="1,0.75">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFF"
                          Offset="0.3"/>
            <GradientStop Color="#BBC5D7"
                          Offset="0.75"/>
            <GradientStop Color="#6D83A9"
                          Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>


    <!--=================================================================
        ResizeGrip
    ==================================================================-->
    <Style x:Key="{x:Type ResizeGrip}"
           TargetType="{x:Type ResizeGrip}">
        <Setter Property="MinWidth"
                Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinHeight"
                Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ResizeGrip}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        <Path HorizontalAlignment="Right"
                              VerticalAlignment="Bottom"
                              Margin="0,0,2,2"
                              Data="M 9,0 L 11,0 L 11,11 L 0,11 L 0,9 L 3,9 L 3,6 L 6,6 L 6,3 L 9,3 z">

                            <Path.Fill>
                                <DrawingBrush Viewbox="0,0,3,3"
                                              Viewport="0,0,3,3"
                                              TileMode="Tile"
                                              ViewportUnits="Absolute"
                                              ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <DrawingGroup.Children>
                                                <GeometryDrawing Brush="{StaticResource &#390;}"
                                                                 Geometry="M 0,0 L 2,0 L 2,2 L 0,2 z "/>
                                            </DrawingGroup.Children>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Path.Fill>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <SolidColorBrush x:Key="&#391;" Color="#F0F0F0" />
    <SolidColorBrush x:Key="&#392;" Color="#F0F0F0" />
    <SolidColorBrush x:Key="&#393;" Color="#606060" />
    <SolidColorBrush x:Key="&#394;" Color="#CDCDCD" />
    <SolidColorBrush x:Key="&#395;" Color="#DADADA" />
    <SolidColorBrush x:Key="&#396;" Color="#DADADA" />
    <SolidColorBrush x:Key="&#397;" Color="#000000" />
    <SolidColorBrush x:Key="&#398;" Color="#A6A6A6" />
    <SolidColorBrush x:Key="&#399;" Color="#606060" />
    <SolidColorBrush x:Key="&#400;" Color="#606060" />
    <SolidColorBrush x:Key="&#401;" Color="#606060" />
    <SolidColorBrush x:Key="&#402;" Color="#FFFFFF" />
    <SolidColorBrush x:Key="&#403;" Color="#F0F0F0" />
    <SolidColorBrush x:Key="&#404;" Color="#F0F0F0" />
    <SolidColorBrush x:Key="&#405;" Color="#BFBFBF" />
    <SolidColorBrush x:Key="&#406;" Color="#F0F0F0" />

    <!-- RepeatButton Transparent -->
    <Style x:Key="&#407;" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#408;" TargetType="{x:Type RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource &#221;}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="border"
                        BorderThickness="1"
                        SnapsToDevicePixels="true"
                        Background="{StaticResource &#391;}"
                        BorderBrush="{StaticResource &#392;}">
                        <ContentPresenter x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource &#395;}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource &#396;}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource &#399;}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource &#400;}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
                            <Setter TargetName="border" Property="Background" Value="{StaticResource &#403;}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource &#404;}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#409;" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle"
            SnapsToDevicePixels="True"
            Fill="{StaticResource &#394;}"
            Height="{TemplateBinding Height}"
            Width="{TemplateBinding Width}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Property="Fill" Value="{StaticResource &#398;}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter TargetName="rectangle" Property="Fill" Value="{StaticResource &#401;}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#410;" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle"
                    SnapsToDevicePixels="True"
                    Fill="{StaticResource &#394;}"
                    Height="{TemplateBinding Height}"
                    Width="{TemplateBinding Width}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Property="Fill" Value="{StaticResource &#398;}" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter TargetName="rectangle" Property="Fill" Value="{StaticResource &#401;}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{StaticResource &#391;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#392;}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1,0" />
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Border
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Grid.Row="1"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" />
                        <RepeatButton x:Name="PART_LineUpButton"
                            Command="{x:Static ScrollBar.LineUpCommand}"
                            IsEnabled="{TemplateBinding IsMouseOver}"
                            Style="{StaticResource &#408;}">
                            <Path x:Name="ArrowTop"
                                Data="M 0,4 C0,4 0,6 0,6 0,6 3.5,2.5 3.5,2.5 3.5,2.5 7,6 7,6 7,6 7,4 7,4 7,4 3.5,0.5 3.5,0.5 3.5,0.5 0,4 0,4 z"
                                Stretch="Uniform"
                                Margin="3,4,3,3"
                                Fill="{StaticResource &#393;}" />
                        </RepeatButton>
                        <Track x:Name="PART_Track"
                            IsDirectionReversed="true"
                            IsEnabled="{TemplateBinding IsMouseOver}"
                            Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource &#407;}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource &#407;}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource &#409;}" />
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton"
                            Command="{x:Static ScrollBar.LineDownCommand}"
                            IsEnabled="{TemplateBinding IsMouseOver}"
                            Grid.Row="2"
                            Style="{StaticResource &#408;}">
                            <Path x:Name="ArrowBottom"
                                Data="M 0,2.5 C0,2.5 0,0.5 0,0.5 0,0.5 3.5,4 3.5,4 3.5,4 7,0.5 7,0.5 7,0.5 7,2.5 7,2.5 7,2.5 3.5,6 3.5,6 3.5,6 0,2.5 0,2.5 z"
                                Stretch="Uniform"
                                Margin="3,4,3,3"
                                Fill="{StaticResource &#393;}" />
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_LineDownButton, Path=IsMouseOver}" Value="true" />
                                <Condition Binding="{Binding ElementName=PART_LineDownButton, Path=IsPressed}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ArrowBottom" Property="Fill" Value="{StaticResource &#402;}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_LineUpButton, Path=IsMouseOver}" Value="true" />
                                <Condition Binding="{Binding ElementName=PART_LineUpButton, Path=IsPressed}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ArrowTop" Property="Fill" Value="{StaticResource &#402;}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_LineDownButton, Path=IsMouseOver}" Value="true" />
                                <Condition Binding="{Binding ElementName=PART_LineDownButton, Path=IsPressed}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ArrowBottom" Property="Fill" Value="{StaticResource &#397;}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_LineUpButton, Path=IsMouseOver}" Value="true" />
                                <Condition Binding="{Binding ElementName=PART_LineUpButton, Path=IsPressed}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ArrowTop" Property="Fill" Value="{StaticResource &#397;}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="ArrowTop" Property="Fill" Value="{StaticResource &#405;}" />
                            <Setter TargetName="ArrowBottom" Property="Fill" Value="{StaticResource &#405;}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="BorderThickness" Value="0,1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Border
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Grid.Column="1"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}" />
                                <RepeatButton x:Name="PART_LineLeftButton"
                                    Command="{x:Static ScrollBar.LineLeftCommand}"
                                    IsEnabled="{TemplateBinding IsMouseOver}"
                                    Style="{StaticResource &#408;}">
                                    <Path x:Name="ArrowLeft"
                                        Data="M 3.18,7 C3.18,7 5,7 5,7 5,7 1.81,3.5 1.81,3.5 1.81,3.5 5,0 5,0 5,0 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z"
                                        Stretch="Uniform"
                                        Margin="3"
                                        Fill="{StaticResource &#393;}" />
                                </RepeatButton>
                                <Track x:Name="PART_Track"
                                    Grid.Column="1"
                                    IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource &#407;}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource &#407;}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource &#410;}" />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineRightButton"
                                    Grid.Column="2"
                                    Command="{x:Static ScrollBar.LineRightCommand}"
                                    IsEnabled="{TemplateBinding IsMouseOver}"
                                    Style="{StaticResource &#408;}">
                                    <Path x:Name="ArrowRight"
                                        Data="M 1.81,7 C1.81,7 0,7 0,7 0,7 3.18,3.5 3.18,3.5 3.18,3.5 0,0 0,0 0,0 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z"
                                        Stretch="Uniform"
                                        Margin="3"
                    Fill="{StaticResource &#393;}" />
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_LineRightButton, Path=IsMouseOver}" Value="true" />
                                        <Condition Binding="{Binding ElementName=PART_LineRightButton, Path=IsPressed}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="ArrowRight" Property="Fill" Value="{StaticResource &#402;}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_LineLeftButton, Path=IsMouseOver}" Value="true" />
                                        <Condition Binding="{Binding ElementName=PART_LineLeftButton, Path=IsPressed}" Value="true" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="ArrowLeft" Property="Fill" Value="{StaticResource &#402;}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_LineRightButton, Path=IsMouseOver}" Value="true" />
                                        <Condition Binding="{Binding ElementName=PART_LineRightButton, Path=IsPressed}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="ArrowRight" Property="Fill" Value="{StaticResource &#397;}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=PART_LineLeftButton, Path=IsMouseOver}" Value="true" />
                                        <Condition Binding="{Binding ElementName=PART_LineLeftButton, Path=IsPressed}" Value="false" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="ArrowLeft" Property="Fill" Value="{StaticResource &#397;}" />
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="ArrowLeft" Property="Fill" Value="{StaticResource &#405;}" />
                                    <Setter TargetName="ArrowRight" Property="Fill" Value="{StaticResource &#405;}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>



    <!--=================================================================
        ScrollViewer
    ==================================================================-->
    <Style x:Key="{x:Type ScrollViewer}"
           TargetType="{x:Type ScrollViewer}">
        <Style.Triggers>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--=================================================================
        Separator
    ==================================================================-->
    <Style x:Key="{x:Type Separator}"
           TargetType="{x:Type Separator}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
        <Setter Property="Margin"
                Value="0,2,0,2"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true"
                            Height="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <SolidColorBrush x:Key="&#411;" Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="&#412;" Color="#FFACACAC" />
    <SolidColorBrush x:Key="&#413;" Color="#FFE5E5E5" />
    <SolidColorBrush x:Key="&#414;" Color="#FFDCECFC" />
    <SolidColorBrush x:Key="&#415;" Color="#FF7Eb4EA" />
    <SolidColorBrush x:Key="&#416;" Color="#FFDAECFC" />
    <SolidColorBrush x:Key="&#417;" Color="#FF569DE5" />
    <SolidColorBrush x:Key="&#418;" Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="&#419;" Color="#FFD9D9D9" />
    <SolidColorBrush x:Key="&#420;" Color="#FFE7EAEA" />
    <SolidColorBrush x:Key="&#421;" Color="#FFD6D6D6" />

    <ControlTemplate x:Key="&#422;" TargetType="{x:Type Thumb}">
        <Grid
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            UseLayoutRounding="True">
            <Path x:Name="grip"
                Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 z"
                SnapsToDevicePixels="True"
                StrokeThickness="1"
                VerticalAlignment="Center"
                UseLayoutRounding="True"
                Stretch="Fill"
                Fill="{StaticResource &#411;}"
                Stroke="{StaticResource &#412;}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#414;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#415;}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#416;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#417;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#418;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#419;}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#423;" TargetType="{x:Type Thumb}">
        <Grid
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            UseLayoutRounding="True">
            <Path x:Name="grip"
                Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z"
                SnapsToDevicePixels="True"
                StrokeThickness="1"
                VerticalAlignment="Center"
                UseLayoutRounding="True"
                Stretch="Fill"
                Fill="{StaticResource &#411;}"
                Stroke="{StaticResource &#412;}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#414;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#415;}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#416;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#417;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#418;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#419;}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#424;" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True">
            <Path x:Name="grip"
                Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z"
                SnapsToDevicePixels="True"
                StrokeThickness="1"
                VerticalAlignment="Center"
                UseLayoutRounding="True"
                Stretch="Fill"
                Fill="{StaticResource &#411;}"
                Stroke="{StaticResource &#412;}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#414;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#415;}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#416;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#417;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#418;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#419;}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#425;" TargetType="{x:Type Slider}">
        <Border x:Name="border"
                 SnapsToDevicePixels="True"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TickBar x:Name="TopTick"
                    Height="4"
                    Placement="Top"
                    Grid.Row="0"
                    Visibility="Collapsed"
                    Margin="0,0,0,2"
                    Fill="{TemplateBinding Foreground}" />
                <TickBar x:Name="BottomTick"
                    Height="4"
                    Placement="Bottom"
                    Grid.Row="2"
                    Visibility="Collapsed"
                    Margin="0,2,0,0"
                    Fill="{TemplateBinding Foreground}" />
                <Border x:Name="TrackBackground"
                    BorderThickness="1"
                    Height="4.0"
                    Margin="5,0"
                    Grid.Row="1"
                    VerticalAlignment="center"
                    BorderBrush="{StaticResource &#421;}"
                    Background="{StaticResource &#420;}">
                    <Canvas Margin="-6,-1">
                        <Rectangle x:Name="PART_SelectionRange"
                            Height="4.0"
                            Visibility="Hidden"
                            Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton
                            Command="{x:Static Slider.DecreaseLarge}"
                            Style="{StaticResource &#407;}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton
                            Command="{x:Static Slider.IncreaseLarge}"
                            Style="{StaticResource &#407;}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb"
                            OverridesDefaultStyle="True"
                            Focusable="False"
                            VerticalAlignment="Center"
                            Template="{StaticResource &#422;}"
                            Width="11"
                            Height="18"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource &#423;}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource &#424;}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#426;" TargetType="{x:Type Thumb}">
        <Grid
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            UseLayoutRounding="True">
            <Path x:Name="grip"
                Data="M0.5,0.5 L18.5,0.5 18.5,11.5 0.5,11.5z"
                Stretch="Fill"
                Stroke="{StaticResource &#412;}"
                Fill="{StaticResource &#411;}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#414;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#415;}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#416;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#417;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#418;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#419;}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#427;" TargetType="{x:Type Thumb}">
        <Grid
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            UseLayoutRounding="True">
            <Path x:Name="grip"
                Data="M 6,11 C6,11 0,5.5 0,5.5 0,5.5 6,0 6,0 6,0 18,0 18,0 18,0 18,11 18,11 18,11 6,11 6,11 z"
                Stretch="Fill"
                Stroke="{StaticResource &#412;}"
                Fill="{StaticResource &#411;}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#414;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#415;}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#416;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#417;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#418;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#419;}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#428;" TargetType="{x:Type Thumb}">
        <Grid
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            UseLayoutRounding="True">
            <Path x:Name="grip"
                Data="M 12,11 C12,11 18,5.5 18,5.5 18,5.5 12,0 12,0 12,0 0,0 0,0 0,0 0,11 0,11 0,11 12,11 12,11 z"
                Stretch="Fill"
                Stroke="{StaticResource &#412;}"
                Fill="{StaticResource &#411;}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#414;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#415;}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#416;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#417;}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="grip" Property="Fill" Value="{StaticResource &#418;}" />
                <Setter TargetName="grip" Property="Stroke" Value="{StaticResource &#419;}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#429;" TargetType="{x:Type Slider}">
        <Border x:Name="border"
                 SnapsToDevicePixels="True"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopTick"
                    Grid.Column="0"
                    Placement="Left"
                    Visibility="Collapsed"
                    Width="4"
                    Margin="0,0,2,0"
                    Fill="{TemplateBinding Foreground}" />
                <TickBar x:Name="BottomTick"
                    Grid.Column="2"
                    Placement="Right"
                    Visibility="Collapsed"
                    Width="4"
                    Margin="2,0,0,0"
                    Fill="{TemplateBinding Foreground}" />
                <Border x:Name="TrackBackground"
                    BorderThickness="1"
                    Grid.Column="1"
                    HorizontalAlignment="center"
                    Margin="0,5"
                    Width="4.0"
                    BorderBrush="{StaticResource &#421;}"
                    Background="{StaticResource &#420;}">
                    <Canvas Margin="-1,-6">
                        <Rectangle x:Name="PART_SelectionRange"
                            Visibility="Hidden"
                            Width="4.0"
                            Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </Canvas>
                </Border>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton
                            Command="{x:Static Slider.DecreaseLarge}"
                            Style="{StaticResource &#407;}"/>
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton
                            Command="{x:Static Slider.IncreaseLarge}"
                            Style="{StaticResource &#407;}"/>
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb x:Name="Thumb"
                            OverridesDefaultStyle="True"
                            Focusable="False"
                            VerticalAlignment="Top"
                            Width="18"
                            Height="11"
                            Template="{StaticResource &#426;}"/>
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource &#427;}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                <Setter Property="Template" TargetName="Thumb" Value="{StaticResource &#428;}"/>
                <Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5"/>
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource &#413;}" />
        <Setter Property="Template" Value="{StaticResource &#425;}" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource &#429;}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- End of Aero2 Slider -->




    <!--=================================================================
        StatusBar
    ==================================================================-->
    <Style x:Key="{x:Type StatusBar}"
           TargetType="{x:Type StatusBar}">
        <Setter Property="Background"
                Value="#FFF1EDED"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="FontSize"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
        <Setter Property="FontStyle"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}"
           TargetType="{x:Type Separator}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
        <Setter Property="MinWidth"
                Value="1"/>
        <Setter Property="MinHeight"
                Value="1"/>
        <Setter Property="Margin"
                Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type StatusBarItem}"
           TargetType="{x:Type StatusBarItem}">
        <Setter Property="Padding"
                Value="3"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Left"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <LinearGradientBrush x:Key="&#430;" StartPoint="0,0" EndPoint="0,1" >
        <GradientStop Color="#F0F0F0" Offset="0.0" />
        <GradientStop Color="#E5E5E5" Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="&#431;" Color="#ACACAC" />
    <LinearGradientBrush x:Key="&#432;" StartPoint="0,0" EndPoint="0,1" >
        <GradientStop Color="#ECF4FC" Offset="0.0" />
        <GradientStop Color="#DCECFC" Offset="1.0" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="&#433;" Color="#7EB4EA" />
    <SolidColorBrush x:Key="&#434;" Color="#FFFFFF" />
    <SolidColorBrush x:Key="&#435;" Color="#ACACAC" />
    <SolidColorBrush x:Key="&#436;" Color="#F0F0F0" />
    <SolidColorBrush x:Key="&#437;" Color="#D9D9D9" />

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource &#434;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#435;}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot"
                        ClipToBounds="true"
                        SnapsToDevicePixels="true"
                        KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel"
                            Background="Transparent"
                            Grid.Column="0"
                            Grid.Row="0"
                            IsItemsHost="true"
                            Margin="2,2,2,0"
                            KeyboardNavigation.TabIndex="1"
                            Panel.ZIndex="1"/>
                        <Border x:Name="ContentPanel"
                            Grid.Column="0"
                            Grid.Row="1"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            KeyboardNavigation.TabNavigation="Local"
                            KeyboardNavigation.TabIndex="2"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Margin="{TemplateBinding Padding}"
                                              ContentSource="SelectedContent"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="2,2,0,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource &#221;}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="{StaticResource &#430;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#431;}" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="6,2,6,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder"
                            BorderThickness="1,1,1,0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Margin="0">
                            <Border x:Name="innerBorder"
                                BorderThickness="1,1,1,0"
                                Background="{StaticResource &#434;}"
                                BorderBrush="{StaticResource &#435;}"
                                Margin="-1"
                                Opacity="0" />
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                            ContentSource="Header"
                            HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                            VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            Focusable="False"
                            Margin="{TemplateBinding Padding}"
                            RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource &#432;}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource &#433;}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource &#432;}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource &#433;}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource &#432;}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource &#433;}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource &#432;}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource &#433;}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
                            <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource &#436;}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource &#437;}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
                            <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource &#436;}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource &#437;}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
                            <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource &#436;}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource &#437;}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
                            <Setter TargetName="mainBorder" Property="Background" Value="{StaticResource &#436;}" />
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource &#437;}" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,0,-2"/>
                            <Setter TargetName="innerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,0,-2,-2"/>
                            <Setter TargetName="innerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="0,-2,-2,-2"/>
                            <Setter TargetName="innerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                            <Setter TargetName="innerBorder" Property="Opacity" Value="1" />
                            <Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <SolidColorBrush x:Key="&#271;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#438;" Color="#FFABAdB3" />
    <SolidColorBrush x:Key="&#439;" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="&#440;" Color="#FF569DE5" />

    <!--=================================================================
        TextBoxBase
    ==================================================================-->
    <Style x:Key="{x:Type TextBoxBase}" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource &#438;}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                            Focusable="false"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource &#439;}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource &#440;}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(framework:FrameworkAppContextSwitches.UseAdornerForTextboxSelectionRendering)}" Value="false">
                <!-- DDVSO:405199
                     Ensure that the proper text selection colors are used per theme if non-adorner selection is enabled -->
                <Setter Property="SelectionBrush"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter Property="SelectionTextBrush"
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                <Setter Property="SelectionTextBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--=================================================================
        PasswordBox
    ==================================================================-->
    <Style x:Key="{x:Type PasswordBox}"
           TargetType="{x:Type PasswordBox}">
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource &#438;}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost"
                            Focusable="false"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Opacity" Value="0.56"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource &#439;}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource &#440;}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(framework:FrameworkAppContextSwitches.UseAdornerForTextboxSelectionRendering)}" Value="false">
                <!-- DDVSO:405199
                     Ensure that the proper text selection colors are used per theme if non-adorner selection is enabled -->
                <Setter Property="SelectionBrush"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter Property="SelectionTextBrush"
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                    <Condition Property="IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                <Setter Property="SelectionTextBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>



    <!--=================================================================
        TextBox
    ==================================================================-->
    <Style x:Key="{x:Type TextBox}"
           BasedOn="{StaticResource {x:Type TextBoxBase}}"
           TargetType="{x:Type TextBox}">
    </Style>
    <!--=================================================================
        RichTextBox
    ==================================================================-->
    <Style x:Key="{x:Type RichTextBox}"
           BasedOn="{StaticResource {x:Type TextBoxBase}}"
           TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}"
                   TargetType="{x:Type FlowDocument}">
                <Setter Property="OverridesDefaultStyle"
                        Value="true"/>
            </Style>
            <Style x:Key="{x:Type Hyperlink}"
                   BasedOn="{StaticResource {x:Type Hyperlink}}"
                   TargetType="{x:Type Hyperlink}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver"
                             Value="true">
                        <Setter Property="Foreground"
                                Value="Blue"/>
                    </Trigger>
                    <Trigger Property="IsEnabled"
                             Value="false">
                        <Setter Property="Foreground"
                                Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth"
                Value="10"/>
    </Style>


    <!--=================================================================
        Thumb
    ==================================================================-->
    <!--
TODO:
    1. Add ThumbMinWidth & ThumbMinHeight to SystemMetrics
       (MinWidth = 2 * cxEdge, MinHeight = 2 * cyEdge)
-->
    <Style x:Key="{x:Type Thumb}"
           TargetType="{x:Type Thumb}">
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false"/>
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <!-- Draw Edge -->
                            <Border BorderThickness="0,0,1,1"
                                    Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                            <Border BorderThickness="0,0,1,1"
                                    Margin="1"
                                    Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"
                                    BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Border Margin="2"
                                    Background="{TemplateBinding Background}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="&#466;" Color="#FFF1F2F7" />
    <SolidColorBrush x:Key="&#467;" Color="#FF767676" />
    <SolidColorBrush x:Key="&#468;" Color="#FF575757" />

    <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
        <Setter Property="Background" Value="{StaticResource &#466;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#467;}" />
        <Setter Property="Foreground" Value="{StaticResource &#468;}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="6,4" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HasDropShadow" Value="False" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <!--=================================================================
        TreeView
    ==================================================================-->
    <Style x:Key="{x:Type TreeView}"
           TargetType="{x:Type TreeView}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush"
                Value="{StaticResource &#322;}"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Padding"
                Value="1"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border Name="Bd"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <ScrollViewer Name="_tv_scrollviewer_"
                                      Background="{TemplateBinding Background}"
                                      Focusable="false"
                                      CanContentScroll="false"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                      Padding="{TemplateBinding Padding}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing"
                                 Value="true">
                            <Setter TargetName="_tv_scrollviewer_"
                                    Property="CanContentScroll"
                                    Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing"
                     Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="&#469;" Color="#FF818181"/>
    <SolidColorBrush x:Key="&#470;" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="&#471;" Color="#FF27C7F7"/>
    <SolidColorBrush x:Key="&#472;" Color="#FFCCEEFB"/>
    <SolidColorBrush x:Key="&#473;" Color="#FF262626"/>
    <SolidColorBrush x:Key="&#474;" Color="#FF595959"/>
    <SolidColorBrush x:Key="&#475;" Color="#FF1CC4F7"/>
    <SolidColorBrush x:Key="&#476;" Color="#FF82DFFB"/>




    <!--=================================================================
        TreeViewItem
    ==================================================================-->
    <PathGeometry x:Key="&#477;">
        <PathGeometry.Figures>
            <PathFigureCollection>
                <PathFigure IsFilled="True"
                            StartPoint="0 0"
                            IsClosed="True">
                    <PathFigure.Segments>
                        <PathSegmentCollection>
                            <LineSegment Point="0 6"/>
                            <LineSegment Point="6 0"/>
                        </PathSegmentCollection>
                    </PathFigure.Segments>
                </PathFigure>
            </PathFigureCollection>
        </PathGeometry.Figures>
    </PathGeometry>
    <Style x:Key="&#478;"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable"
                Value="False"/>
        <Setter Property="Width"
                Value="16"/>
        <Setter Property="Height"
                Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="16"
                            Height="16"
                            Background="Transparent"
                            Padding="5,5,5,5">
                        <Path x:Name="ExpandPath"
                              Fill="{StaticResource &#470;}"
                              Stroke="{StaticResource &#469;}"
                              Data="{StaticResource &#477;}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135"
                                                 CenterX="3"
                                                 CenterY="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"
                                                     CenterX="3"
                                                     CenterY="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ExpandPath"
                                    Property="Fill"
                                    Value="{StaticResource &#474;}"/>
                            <Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{StaticResource &#473;}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{StaticResource &#471;}"/>
                            <Setter TargetName="ExpandPath"
                                    Property="Fill"
                                    Value="{StaticResource &#472;}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpandPath"
                                    Property="Stroke"
                                    Value="{StaticResource &#475;}"/>
                            <Setter TargetName="ExpandPath"
                                    Property="Fill"
                                    Value="{StaticResource &#476;}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--=================================================================
        TreeViewItem
    ==================================================================-->
    <Style x:Key="&#479;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type TreeViewItem}"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment"
                Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment"
                Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding"
                Value="1,0,0,0"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle"
                Value="{StaticResource &#479;}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19"
                                              Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      Style="{StaticResource &#478;}"
                                      IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press"/>
                        <Border Name="Bd"
                                Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="false">
                            <Setter TargetName="ItemsHost"
                                    Property="Visibility"
                                    Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="true"/>
                                <Condition Property="IsSelectionActive"
                                           Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing"
                     Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--=================================================================
        UserControl
    ==================================================================-->
    <Style x:Key="{x:Type UserControl}"
           TargetType="{x:Type UserControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type UserControl}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--=================================================================
        Window
    ==================================================================-->
    <ControlTemplate x:Key="&#480;"
                     TargetType="{x:Type Window}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <AdornerDecorator>
                    <ContentPresenter/>
                </AdornerDecorator>

                <ResizeGrip x:Name="WindowResizeGrip"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Bottom"
                            Visibility="Collapsed"
                            IsTabStop="false"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <!-- There may be perf implications b/c of the following conditions.  We may cause
                     an extra layout to happen when WindowState changes to Minimized and ResizeMode
                     is set to CanResizeWithGrip.
                     NavigationWindow's style requires the ResizeMode condition tag even though
                     Window's style already takes care of this condition.
                     -->
                <MultiTrigger.Conditions>
                    <Condition Property="Window.ResizeMode"
                               Value="CanResizeWithGrip"/>
                    <Condition Property="Window.WindowState"
                               Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="WindowResizeGrip"
                        Property="Visibility"
                        Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="{x:Type Window}"
           TargetType="{x:Type Window}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <AdornerDecorator>
                            <ContentPresenter/>
                        </AdornerDecorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Window.ResizeMode"
                     Value="CanResizeWithGrip">
                <Setter Property="Template"
                        Value="{StaticResource &#480;}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <JournalEntryListConverter x:Key="&#200;"/>

    <!-- Browser Window back/fwd button Drop Down style-->
    <Style x:Key="&#201;"
           TargetType="{x:Type MenuItem}">
        <Setter Property="Header"
                Value="{Binding Path=Name}"/>
        <Setter Property="Command"
                Value="NavigationCommands.NavigateJournal"/>
        <!-- It is important to target the NavigationWindow directly, to avoid the command routing's 
            dependence on the focused element. Menu is a FocusScope. -->
        <Setter Property="CommandTarget"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}"/>
        <Setter Property="CommandParameter"
                Value="{Binding RelativeSource={RelativeSource Self}}"/>
    </Style>




    <Style x:Key="&#202;"
           TargetType="{x:Type MenuItem}">
        <Setter Property="Margin"
                Value="0"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <DockPanel x:Name="Panel"
                               Background="Transparent">
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="true"
                               Placement="Bottom"
                               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                               Focusable="false"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                            <theme:SystemDropShadowChrome Name="Shdw"
                                                          Color="Transparent">
                                <Border Name="SubMenuBorder"
                                        Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
                                    <ScrollViewer Name="SubMenuScrollViewer"
                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle
                                                    Name="OpaqueRect"
                                                    Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                                    Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                            </Canvas>
                                            <ItemsPresenter Name="ItemsPresenter" Margin="2"
                                                            KeyboardNavigation.TabNavigation="Cycle"
                                                            KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>
                        <Path x:Name="Arrow"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Margin="0 2 0 0"
                              Fill="white"
                              Stroke="#AAAAAA"
                              StrokeThickness="1"
                              Data="{StaticResource &#203;}"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSuspendingPopupAnimation"
                                 Value="true">
                            <Setter TargetName="PART_Popup"
                                    Property="PopupAnimation"
                                    Value="None"/>
                        </Trigger>

                        <Trigger Property="IsHighlighted"
                                 Value="true">
                            <Setter TargetName="Arrow"
                                    Property="Fill"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            <Setter TargetName="Panel"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Arrow"
                                    Property="Fill"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup"
                                 Property="Popup.HasDropShadow"
                                 Value="true">
                            <Setter TargetName="Shdw"
                                    Property="Margin"
                                    Value="0,0,5,5"/>
                            <Setter TargetName="Shdw"
                                    Property="SnapsToDevicePixels"
                                    Value="true"/>
                            <Setter TargetName="Shdw"
                                    Property="Color"
                                    Value="#71000000"/>
                        </Trigger>
                        <Trigger SourceName="SubMenuScrollViewer"
                                 Property="ScrollViewer.CanContentScroll"
                                 Value="false" >
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Top"
                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Left"
                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#204;"
           TargetType="{x:Type Menu}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <DockPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding"
                Value="0,0,0,0"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="IsMainMenu" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!--=================================================================
        BrowserWindow
    ==================================================================-->
    <!-- Downlevel Browser Window Back Button Style -->
    <Style x:Key="&#205;"
           TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Margin"
                Value="0,0,0,0"/>
        <Setter Property="IsEnabled"
                Value="false"/>
        <Setter Property="Command"
                Value="NavigationCommands.BrowseBack"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <DockPanel>
                        <!--right -->
                        <Rectangle DockPanel.Dock="Right"
                                   x:Name="R1"
                                   Width="1"
                                   Visibility="Hidden"
                                   Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        <!--bottom-->
                        <Rectangle DockPanel.Dock="Bottom"
                                   x:Name="B1"
                                   Height="1"
                                   Visibility="Hidden"
                                   Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        <!--left  -->
                        <Rectangle DockPanel.Dock="Left"
                                   x:Name="L1"
                                   Width="1"
                                   Visibility="Hidden"
                                   Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        <!--top   -->
                        <Rectangle DockPanel.Dock="Top"
                                   x:Name="T1"
                                   Height="1"
                                   Visibility="Hidden"
                                   Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Viewbox Grid.Column="0"
                                     Grid.Row="0">
                                <Grid Width="50"
                                      Height="50"
                                      Margin="15,0,0,0">
                                    <Ellipse x:Name="EllipseBackground"
                                             Opacity="1"
                                             StrokeThickness="2">
                                        <Ellipse.Fill>
                                            <LinearGradientBrush StartPoint="0,0"
                                                                 EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="#B3E2A2"
                                                                      Offset="0"/>
                                                        <GradientStop Color="#25B40E"
                                                                      Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Ellipse.Fill>
                                        <Ellipse.Stroke>
                                            <LinearGradientBrush StartPoint="0,0"
                                                                 EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="black"
                                                                      Offset="0"/>
                                                        <GradientStop Color="#ccffffff"
                                                                      Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Ellipse.Stroke>
                                    </Ellipse>
                                    <Ellipse x:Name="EllipseShine"
                                             Stroke="transparent"
                                             Margin="5,5,5,15">
                                        <Ellipse.Fill>
                                            <LinearGradientBrush StartPoint="0,0"
                                                                 EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="#aaffffff"
                                                                      Offset="0"/>
                                                        <GradientStop Color="transparent"
                                                                      Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                    <Path x:Name="Arrow"
                                          Fill="white"
                                          Stroke="#086403"
                                          Data="M0.5,20.468c0.002,0.34,0.036,0.679,0.102,1.013c0.032,0.162,0.092,0.312,0.139,0.468    c0.052,0.176,0.092,0.355,0.163,0.527c0.076,0.183,0.18,0.349,0.274,0.521c0.073,0.132,0.131,0.27,0.216,0.397    c0.196,0.294,0.418,0.568,0.667,0.817l14.611,14.611c2.083,2.083,5.459,2.083,7.542,0c2.083-2.083,2.083-5.459,0-7.542    l-5.509-5.509h23.791c2.945,0,5.333-2.388,5.333-5.333c0-2.946-2.388-5.333-5.333-5.333H18.732l5.509-5.509    c2.083-2.083,2.083-5.459,0-7.542c-2.083-2.083-5.459-2.083-7.542,0L2.203,16.549c-0.043,0.04-0.095,0.07-0.136,0.111    c-0.002,0.002-0.005,0.003-0.007,0.006c-0.002,0.002-0.003,0.004-0.005,0.006c-0.246,0.247-0.465,0.517-0.659,0.807    c-0.088,0.132-0.149,0.275-0.224,0.413c-0.092,0.167-0.192,0.328-0.266,0.505c-0.072,0.175-0.114,0.357-0.167,0.538    c-0.045,0.153-0.104,0.299-0.135,0.458C0.536,19.732,0.5,20.075,0.5,20.419c0,0.006-0.002,0.012-0.002,0.019    C0.498,20.448,0.5,20.458,0.5,20.468z">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <ScaleTransform ScaleX="0.65"
                                                                        ScaleY="0.65"/>
                                                        <TranslateTransform X="11.5"
                                                                            Y="10"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>
                            </Viewbox>
                            <DockPanel Grid.Column="1"
                                       Grid.Row="0">
                                <!--right -->
                                <Rectangle DockPanel.Dock="Right"
                                           x:Name="R2"
                                           Width="1"
                                           Visibility="Hidden"
                                           Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                <!--bottom-->
                                <Rectangle DockPanel.Dock="Bottom"
                                           x:Name="B2"
                                           Height="1"
                                           Visibility="Hidden"
                                           Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                <!--left  -->
                                <Rectangle DockPanel.Dock="Left"
                                           x:Name="L2"
                                           Width="1"
                                           Visibility="Hidden"
                                           Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                <!--top   -->
                                <Rectangle DockPanel.Dock="Top"
                                           x:Name="T2"
                                           Height="1"
                                           Visibility="Hidden"
                                           Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                <Grid Width="10">
                                    <Menu Style="{StaticResource &#204;}">
                                        <MenuItem x:Name="NavWinMenu"
                                                  Style="{StaticResource &#202;}"
                                                  ItemContainerStyle="{StaticResource &#201;}"
                                                  ItemsSource="{Binding Path=BackStack,Converter={StaticResource &#200;},Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}"
                                                  IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Menu>
                                </Grid>
                            </DockPanel>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Path.Fill"
                                    TargetName="EllipseBackground">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0"
                                                         EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="white"
                                                              Offset="0"/>
                                                <GradientStop Color="gray"
                                                              Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="EllipseBackground"
                                    Property="Path.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0"
                                                         EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#25B40E"
                                                              Offset="0"/>
                                                <GradientStop Color="#086403"
                                                              Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="NavWinMenu"
                                    Property="Background"
                                    Value="Transparent">
                            </Setter>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="L1"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="R1"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="T1"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="B1"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="EllipseBackground"
                                    Property="Path.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0"
                                                         EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#25B40E"
                                                              Offset="0"/>
                                                <GradientStop Color="#086403"
                                                              Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Arrow"
                                    Property="Path.RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <ScaleTransform ScaleX="0.65"
                                                                ScaleY="0.65"/>
                                                <TranslateTransform X="10"
                                                                    Y="12"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="EllipseShine"
                                    Property="Path.RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform X="0"
                                                        Y="2"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="MenuItem.IsSubmenuOpen"
                                 Value="true">
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="L2"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="R2"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="T2"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="B2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Downlevel Browser Window Forward Button Style -->
    <Style x:Key="&#206;"
           TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Margin"
                Value="0,0,0,0"/>
        <Setter Property="IsEnabled"
                Value="false"/>
        <Setter Property="Command"
                Value="NavigationCommands.BrowseForward"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <DockPanel>
                        <!--right -->
                        <Rectangle DockPanel.Dock="Right"
                                   x:Name="R1"
                                   Width="1"
                                   Visibility="Hidden"
                                   Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        <!--bottom-->
                        <Rectangle DockPanel.Dock="Bottom"
                                   x:Name="B1"
                                   Height="1"
                                   Visibility="Hidden"
                                   Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        <!--left  -->
                        <Rectangle DockPanel.Dock="Left"
                                   x:Name="L1"
                                   Width="1"
                                   Visibility="Hidden"
                                   Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        <!--top   -->
                        <Rectangle DockPanel.Dock="Top"
                                   x:Name="T1"
                                   Height="1"
                                   Visibility="Hidden"
                                   Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Viewbox Grid.Column="0"
                                     Grid.Row="0">
                                <Grid Width="50"
                                      Height="50"
                                      Margin="15,0,0,0">
                                    <Ellipse x:Name="EllipseBackground"
                                             Opacity="1"
                                             StrokeThickness="2">
                                        <Ellipse.Fill>
                                            <LinearGradientBrush StartPoint="0,0"
                                                                 EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="#B3E2A2"
                                                                      Offset="0"/>
                                                        <GradientStop Color="#25B40E"
                                                                      Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Ellipse.Fill>
                                        <Ellipse.Stroke>
                                            <LinearGradientBrush StartPoint="0,0"
                                                                 EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="black"
                                                                      Offset="0"/>
                                                        <GradientStop Color="#ccffffff"
                                                                      Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Ellipse.Stroke>
                                    </Ellipse>
                                    <Ellipse x:Name="EllipseShine"
                                             Stroke="transparent"
                                             Margin="5,3,5,15">
                                        <Ellipse.Fill>
                                            <LinearGradientBrush StartPoint="0,0"
                                                                 EndPoint="0,1">
                                                <GradientBrush.GradientStops>
                                                    <GradientStopCollection>
                                                        <GradientStop Color="#aaffffff"
                                                                      Offset="0"/>
                                                        <GradientStop Color="transparent"
                                                                      Offset="1"/>
                                                    </GradientStopCollection>
                                                </GradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                    <Path x:Name="Arrow"
                                          Fill="white"
                                          Stroke="#086403"
                                          Data="M47.82,20.407c-0.002-0.34-0.036-0.679-0.102-1.013c-0.032-0.162-0.092-0.312-0.139-0.468    c-0.052-0.176-0.092-0.355-0.163-0.527c-0.076-0.183-0.18-0.349-0.274-0.521c-0.073-0.132-0.131-0.27-0.216-0.397    c-0.196-0.294-0.418-0.568-0.667-0.817L31.647,2.053c-2.083-2.083-5.459-2.083-7.542,0c-2.083,2.083-2.083,5.459,0,7.542    l5.509,5.509H5.823c-2.945,0-5.333,2.388-5.333,5.333c0,2.946,2.388,5.333,5.333,5.333h23.765l-5.509,5.509    c-2.083,2.083-2.083,5.459,0,7.542c2.083,2.083,5.459,2.083,7.542,0l14.497-14.497c0.043-0.04,0.095-0.07,0.136-0.111    c0.002-0.002,0.005-0.003,0.007-0.006c0.002-0.002,0.003-0.004,0.005-0.006c0.246-0.247,0.465-0.517,0.659-0.807    c0.088-0.132,0.149-0.275,0.224-0.413c0.092-0.167,0.192-0.328,0.266-0.505c0.072-0.175,0.114-0.357,0.167-0.538    c0.045-0.153,0.104-0.299,0.135-0.458c0.067-0.339,0.103-0.682,0.104-1.026c0-0.006,0.002-0.012,0.002-0.019    C47.823,20.427,47.82,20.417,47.82,20.407z">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <TransformGroup.Children>
                                                    <TransformCollection>
                                                        <ScaleTransform ScaleX="0.65"
                                                                        ScaleY="0.65"/>
                                                        <TranslateTransform X="8.5"
                                                                            Y="10"/>
                                                    </TransformCollection>
                                                </TransformGroup.Children>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>
                            </Viewbox>
                            <DockPanel Grid.Column="1"
                                       Grid.Row="0">
                                <!--right -->
                                <Rectangle DockPanel.Dock="Right"
                                           x:Name="R2"
                                           Width="1"
                                           Visibility="Hidden"
                                           Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                <!--bottom-->
                                <Rectangle DockPanel.Dock="Bottom"
                                           x:Name="B2"
                                           Height="1"
                                           Visibility="Hidden"
                                           Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                <!--left  -->
                                <Rectangle DockPanel.Dock="Left"
                                           x:Name="L2"
                                           Width="1"
                                           Visibility="Hidden"
                                           Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                <!--top   -->
                                <Rectangle DockPanel.Dock="Top"
                                           x:Name="T2"
                                           Height="1"
                                           Visibility="Hidden"
                                           Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                <Grid Width="10">
                                    <Menu Style="{StaticResource &#204;}">
                                        <MenuItem x:Name="NavWinMenu"
                                                  Style="{StaticResource &#202;}"
                                                  ItemContainerStyle="{StaticResource &#201;}"
                                                  ItemsSource="{Binding Path=ForwardStack,Converter={StaticResource &#200;},Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}"
                                                  IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Menu>
                                </Grid>
                            </DockPanel>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Path.Fill"
                                    TargetName="EllipseBackground">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0"
                                                         EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="white"
                                                              Offset="0"/>
                                                <GradientStop Color="gray"
                                                              Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="EllipseBackground"
                                    Property="Path.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0"
                                                         EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#25B40E"
                                                              Offset="0"/>
                                                <GradientStop Color="#086403"
                                                              Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="NavWinMenu"
                                    Property="Background"
                                    Value="Transparent">
                            </Setter>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="L1"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="R1"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="T1"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="B1"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="EllipseBackground"
                                    Property="Path.Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0"
                                                         EndPoint="0,1">
                                        <GradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Color="#25B40E"
                                                              Offset="0"/>
                                                <GradientStop Color="#086403"
                                                              Offset="1"/>
                                            </GradientStopCollection>
                                        </GradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Arrow"
                                    Property="Path.RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <ScaleTransform ScaleX="0.65"
                                                                ScaleY="0.65"/>
                                                <TranslateTransform X="10"
                                                                    Y="12"/>
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="EllipseShine"
                                    Property="Path.RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform X="0"
                                                        Y="2"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="MenuItem.IsSubmenuOpen"
                                 Value="true">
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="L2"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="R2"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="T2"/>
                            <Setter Property="Visibility"
                                    Value="Visible"
                                    TargetName="B2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="&#207;"
                     TargetType="{x:Type NavigationWindow}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <AdornerDecorator>
                <ContentPresenter Name="PART_NavWinCP" ClipToBounds="true"/>
            </AdornerDecorator>
        </Border>
    </ControlTemplate>
    <Style x:Key="{x:Static SystemParameters.NavigationChromeStyleKey}"
           TargetType="{x:Type NavigationWindow}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Template"
                Value="{StaticResource &#207;}"/>
    </Style>
    <ControlTemplate x:Key="&#208;"
                     TargetType="{x:Type NavigationWindow}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
                <Grid
                      FlowDirection="{x:Static theme:PlatformCulture.FlowDirection}"
                      DockPanel.Dock="Top"
                      Height="30">
                    <Grid.Background>
                        <LinearGradientBrush StartPoint="0,0"
                                             EndPoint="1,0">
                            <GradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="silver"
                                                  Offset="0"/>
                                    <GradientStop Color="white"
                                                  Offset="1"/>
                                </GradientStopCollection>
                            </GradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Grid.Background>
                    <DockPanel LastChildFill="false">
                        <Button Style="{StaticResource &#205;}"
                                DockPanel.Dock="left"
                                Width="40"
                                Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoBack}"/>
                        <Button Style="{StaticResource &#206;}"
                                DockPanel.Dock="left"
                                Width="40"
                                Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoForward}"/>
                    </DockPanel>
                </Grid>
                <Border>
                    <AdornerDecorator>
                        <ContentPresenter Name="PART_NavWinCP" ClipToBounds="true"/>
                    </AdornerDecorator>
                </Border>
            </DockPanel>
        </Border>
    </ControlTemplate>
    <Style x:Key="{x:Static SystemParameters.NavigationChromeDownLevelStyleKey}"
           TargetType="{x:Type NavigationWindow}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Template"
                Value="{StaticResource &#208;}"/>
        <Style.Triggers>
            <Trigger Property="NavigationWindow.ShowsNavigationUI"
                     Value="false">
                <Setter Property="Template"
                        Value="{StaticResource &#207;}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- Color Resources -->
    <SolidColorBrush x:Key="&#209;" Color="#FFDDDDDD" />
    <SolidColorBrush x:Key="&#210;" Color="#FF707070" />
    <SolidColorBrush x:Key="&#211;" Color="#FFBEE6FD" />
    <SolidColorBrush x:Key="&#212;" Color="#FF3C7FB1" />
    <SolidColorBrush x:Key="&#213;" Color="#FFC4E5F6" />
    <SolidColorBrush x:Key="&#214;" Color="#FF2C628B" />
    <SolidColorBrush x:Key="&#215;" Color="#FFBCDDEE" />
    <SolidColorBrush x:Key="&#216;" Color="#FF245A83" />
    <SolidColorBrush x:Key="&#217;" Color="#FFF4F4F4" />
    <SolidColorBrush x:Key="&#218;" Color="#FFADB2B5" />
    <SolidColorBrush x:Key="&#219;" Color="#FF838383" />

    <!-- Button -->
    <Style x:Key="&#220;" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource &#221;}"/>
        <Setter Property="Background" Value="{StaticResource &#209;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#210;}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter"
                            RecognizesAccessKey="True"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False">
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource &#211;}" TargetName="border" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#212;}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource &#213;}" TargetName="border" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#214;}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true" >
                            <Setter Property="Background" Value="{StaticResource &#215;}" TargetName="border" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#216;}" TargetName="border" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource &#217;}" TargetName="border" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#218;}" TargetName="border" />
                            <Setter Property="TextElement.Foreground" Value="{StaticResource &#219;}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Type ToggleButton}"
           BasedOn="{StaticResource &#220;}"
           TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true"/>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="false"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true"/>
                    <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="true"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type RepeatButton}"
           BasedOn="{StaticResource &#220;}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled"
                Value="false"/>
    </Style>

    <Style x:Key="{x:Type Button}"
           BasedOn="{StaticResource &#220;}"
           TargetType="{x:Type Button}"/>

    <SolidColorBrush x:Key="&#226;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#227;" Color="#FF707070" />
    <SolidColorBrush x:Key="&#228;" Color="#FF212121" />
    <SolidColorBrush x:Key="&#229;" Color="#FFF3F9FF" />
    <SolidColorBrush x:Key="&#230;" Color="#FF5593FF" />
    <SolidColorBrush x:Key="&#231;" Color="#FF212121" />
    <SolidColorBrush x:Key="&#232;" Color="#FFD9ECFF" />
    <SolidColorBrush x:Key="&#233;" Color="#FF3C77DD" />
    <SolidColorBrush x:Key="&#234;" Color="#FF212121" />
    <SolidColorBrush x:Key="&#235;" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="&#236;" Color="#FFBCBCBC" />
    <SolidColorBrush x:Key="&#237;" Color="#FF707070" />


    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource &#221;}"/>
        <Setter Property="Background" Value="{StaticResource &#226;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#227;}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="True" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder"
                            Margin="1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark" Opacity="0" Stretch="None" Margin="1" Fill="{StaticResource &#228;}" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z "/>
                                <Rectangle x:Name="indeterminateMark" Margin="2" Opacity="0" Fill="{StaticResource &#228;}" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                            RecognizesAccessKey="True"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource &#238;}"/>
                            <Setter Property="Padding" Value="4,-1,0,0"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource &#229;}" TargetName="checkBoxBorder" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#230;}" TargetName="checkBoxBorder" />
                            <Setter Property="Fill" Value="{StaticResource &#231;}" TargetName="optionMark" />
                            <Setter Property="Fill" Value="{StaticResource &#231;}" TargetName="indeterminateMark" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource &#235;}" TargetName="checkBoxBorder" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#236;}" TargetName="checkBoxBorder" />
                            <Setter Property="Fill" Value="{StaticResource &#237;}" TargetName="optionMark" />
                            <Setter Property="Fill" Value="{StaticResource &#237;}" TargetName="indeterminateMark" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource &#232;}" TargetName="checkBoxBorder" />
                            <Setter Property="BorderBrush" Value="{StaticResource &#233;}" TargetName="checkBoxBorder" />
                            <Setter Property="Fill" Value="{StaticResource &#234;}" TargetName="optionMark" />
                            <Setter Property="Fill" Value="{StaticResource &#234;}" TargetName="indeterminateMark" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" Value="1" TargetName="optionMark" />
                            <Setter Property="Opacity" Value="0" TargetName="indeterminateMark" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" Value="0" TargetName="optionMark" />
                            <Setter Property="Opacity" Value="1" TargetName="indeterminateMark" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="&#239;">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="4,4,21,4"
                               StrokeThickness="1"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashArray="1 2"
                               SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="&#240;"
           TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(base:AccessibilitySwitches.UseNetFx47CompatibleAccessibilityFeatures)}" Value="false">
                <Setter Property="AutomationProperties.Name"
                      Value="{Binding Path=(AutomationProperties.Name),
                                  Mode=OneWay, 
                                  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}"/>
                <Setter Property="AutomationProperties.LabeledBy"
                        Value="{Binding Path=(AutomationProperties.LabeledBy),
                                  Mode=OneWay, 
                                  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}"/>
                <Setter Property="AutomationProperties.HelpText"
                        Value="{Binding Path=(AutomationProperties.HelpText),
                                  Mode=OneWay, 
                                  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(framework:FrameworkAppContextSwitches.UseAdornerForTextboxSelectionRendering)}" Value="false">
                <!-- DDVSO:572332
                    Ensure that the proper text selection colors are used per theme if non-ardorner selection is enabled.
                    ComboBoxes override the styles of the base TextBox when they are editable, so we have to add the trigger back to
                    ensure the selection brushes are updated. -->
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter Property="SelectionTextBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="OverridesDefaultStyle"
                Value="true"/>
        <Setter Property="AllowDrop"
                Value="true"/>
        <Setter Property="MinWidth"
                Value="0"/>
        <Setter Property="MinHeight"
                Value="0"/>
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Focusable="false"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"
                                  Background="Transparent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <LinearGradientBrush x:Key="&#241;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FFF0F0F0" Offset="0.0"/>
        <GradientStop Color="#FFE5E5E5" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="&#242;" Color="#FFACACAC" />
    <SolidColorBrush x:Key="&#243;" Color="#FF606060" />
    <SolidColorBrush x:Key="&#244;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#245;" Color="#FFABADB3" />
    <SolidColorBrush x:Key="&#246;" Color="Transparent" />
    <SolidColorBrush x:Key="&#247;" Color="Transparent" />

    <LinearGradientBrush x:Key="&#248;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FFECF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="&#249;" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="&#250;" Color="#FF000000" />
    <SolidColorBrush x:Key="&#251;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#252;" Color="#FF7EB4EA" />
    <LinearGradientBrush x:Key="&#253;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
        <GradientStop Color="#FFDCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="&#254;" Color="#FF7EB4EA" />

    <LinearGradientBrush x:Key="&#255;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FFDAECFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="&#256;" Color="#FF569DE5" />
    <SolidColorBrush x:Key="&#257;" Color="#FF000000" />
    <SolidColorBrush x:Key="&#258;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#259;" Color="#FF569DE5" />
    <LinearGradientBrush x:Key="&#260;" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
        <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="&#261;" Color="#FF569DE5" />

    <SolidColorBrush x:Key="&#262;" Color="#FFF0F0F0" />
    <SolidColorBrush x:Key="&#263;" Color="#FFD9D9D9" />
    <SolidColorBrush x:Key="&#264;" Color="#FFBFBFBF" />
    <SolidColorBrush x:Key="&#265;" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="&#266;" Color="#FFBFBFBF" />
    <SolidColorBrush x:Key="&#267;" Color="Transparent" />
    <SolidColorBrush x:Key="&#268;" Color="Transparent" />


    <Style x:Key="&#269;" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot"
                        SnapsToDevicePixels="true"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{StaticResource &#242;}"
                        Background="{StaticResource &#241;}">
                        <Border x:Name="splitBorder"
                            SnapsToDevicePixels="true"
                            HorizontalAlignment="Right"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            BorderThickness="1"
                            BorderBrush="Transparent"
                            Margin="0">
                            <Path x:Name="Arrow"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Fill="{StaticResource &#243;}"
                                Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                                Margin="0"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                <Condition Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding Path=IsPressed,RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding Path=IsEnabled,RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#244;}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#245;}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource &#246;}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource &#247;}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource &#250;}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#248;}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#249;}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#251;}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#252;}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource &#253;}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource &#254;}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource &#257;}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed,RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#255;}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#256;}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed,RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#258;}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#259;}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource &#260;}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource &#261;}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource &#264;}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled,RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#262;}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#263;}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled,RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding Path=IsEditable,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource &#265;}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{StaticResource &#266;}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource &#267;}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource &#268;}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="&#270;" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                AllowsTransparency="true"
                Placement="Bottom"
                Grid.ColumnSpan="2"
                IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow"
                    Color="Transparent"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="DropDownBorder"
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                        BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top"
                                    Height="0"
                                    Width="0">
                                    <Rectangle x:Name="OpaqueRect"
                                        Fill="{Binding Background, ElementName=DropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                        Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource &#269;}"
                Grid.ColumnSpan="2"/>
            <Border x:Name="Border"
                Margin="{TemplateBinding BorderThickness}"
                Background="{StaticResource &#271;}">
                <TextBox x:Name="PART_EditableTextBox"
                    Style="{StaticResource &#240;}"
                    IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                    Margin="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="Border" Property="Opacity" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="&#272;" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                AllowsTransparency="true"
                Margin="1"
                Placement="Bottom"
                Grid.ColumnSpan="2"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow"
                    Color="Transparent"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                    <Border x:Name="DropDownBorder"
                        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                        BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top"
                                    Height="0"
                                    Width="0">
                                    <Rectangle x:Name="OpaqueRect"
                                        Fill="{Binding Background, ElementName=DropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                        Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource &#269;}"
                Grid.ColumnSpan="2" />
            <ContentPresenter x:Name="contentPresenter"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                IsHitTestVisible="false"
                Margin="{TemplateBinding Padding}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource &#221;}"/>
        <Setter Property="Background" Value="{StaticResource &#241;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#242;}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource &#272;}" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource &#270;}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <SolidColorBrush x:Key="&#273;" Color="#1F26A0DA" />
    <SolidColorBrush x:Key="&#274;" Color="#A826A0DA" />
    <SolidColorBrush x:Key="&#275;" Color="#3D26A0DA" />
    <SolidColorBrush x:Key="&#276;" Color="#FF26A0DA" />
    <SolidColorBrush x:Key="&#277;" Color="#2E0080FF" />
    <SolidColorBrush x:Key="&#278;" Color="#99006CD9" />
    <SolidColorBrush x:Key="&#279;" Color="#3DDADADA" />
    <SolidColorBrush x:Key="&#280;" Color="#FFDADADA" />
    <SolidColorBrush x:Key="&#281;" Color="#FF26A0DA" />
    <SolidColorBrush x:Key="&#282;" Color="#5426A0DA" />
    <SolidColorBrush x:Key="&#283;" Color="#FF26A0DA" />


    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource &#221;}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource &#273;}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#274;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource &#275;}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#276;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource &#277;}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#278;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource &#279;}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#280;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#281;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="UIElement.IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource &#282;}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource &#283;}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--=================================================================
        Frame
    ==================================================================-->
    <ControlTemplate x:Key="&#312;"
                     TargetType="{x:Type Frame}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}">
            <DockPanel>
                <Grid Background="{StaticResource &#313;}"
                      DockPanel.Dock="Top"
                      Height="22">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="16"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- Menu -->
                    <Menu Name="NavMenu"
                          Grid.ColumnSpan="3"
                          Height="16"
                          Margin="1,0,0,0"
                          VerticalAlignment="Center"
                          Style="{StaticResource &#314;}">

                        <MenuItem Padding="0,2,4,0"
                                  Style="{StaticResource &#315;}"
                                  ItemContainerStyle="{StaticResource &#316;}"
                                  IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
                            <MenuItem.ItemsSource>
                                <MultiBinding Converter="{StaticResource &#317;}">
                                    <MultiBinding.Bindings>
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="BackStack" />
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="ForwardStack" />
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </MenuItem.ItemsSource>
                        </MenuItem>
                    </Menu>

                    <Path Grid.Column="0"
                          SnapsToDevicePixels="false"
                          IsHitTestVisible="false"
                          Margin="2,0,0,0"
                          Grid.ColumnSpan="3"
                          StrokeThickness="1"
                          HorizontalAlignment="Left"
                          VerticalAlignment="Center"
                          Data="M22.5767,21.035 Q27,19.37 31.424,21.035 A12.5,12.5,0,0,0,53.5,13 A12.5,12.5,0,0,0,37.765,0.926 Q27,4.93 16.235,0.926 A12.5,12.5,0,0,0,0.5,13 A12.5,12.5,0,0,0,22.5767,21.035 z">
                        <Path.Fill>
                            <LinearGradientBrush StartPoint="0,0"
                                                 EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#A0C2CCE7" Offset="0"/>
                                        <GradientStop Color="#60FFFFFF" Offset="1"/>
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Path.Fill>

                        <Path.Stroke>
                            <LinearGradientBrush StartPoint="0,0"
                                                 EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#FFB7C2E3" Offset="0.2"/>
                                        <GradientStop Color="#A0FFFFFF" Offset="0.9"/>
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Path.Stroke>
                        <Path.LayoutTransform>
                            <ScaleTransform ScaleX="0.667" ScaleY="0.667"/>
                        </Path.LayoutTransform>
                    </Path>

                    <Button Style="{StaticResource &#318;}"
                            Margin="3,0,1,0"
                            Grid.Column="0">
                        <Button.LayoutTransform>
                            <ScaleTransform ScaleX="0.667" ScaleY="0.667"/>
                        </Button.LayoutTransform>
                    </Button>


                    <Button Style="{StaticResource &#319;}"
                            Margin="1,0,0,0"
                            Grid.Column="1">
                        <Button.LayoutTransform>
                            <ScaleTransform ScaleX="0.667" ScaleY="0.667"/>
                        </Button.LayoutTransform>
                    </Button>
                </Grid>
                <ContentPresenter x:Name="PART_FrameCP"/>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="CanGoForward"
                               Value="false"/>
                    <Condition Property="CanGoBack"
                               Value="false"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="NavMenu"
                        Property="IsEnabled"
                        Value="false"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type Frame}"
           TargetType="{x:Type Frame}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Frame}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="PART_FrameCP"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="NavigationUIVisibility"
                     Value="Visible">
                <Setter Property="Template"
                        Value="{StaticResource &#312;}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="JournalOwnership"
                               Value="OwnsJournal"/>
                    <Condition Property="NavigationUIVisibility"
                               Value="Automatic"/>
                </MultiTrigger.Conditions>
                <Setter Property="Template"
                        Value="{StaticResource &#312;}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--=================================================================
        ToolBar
    ==================================================================-->
    <!-- Common colors for ToolBar controls -->
    <SolidColorBrush x:Key="&#441;" Color="#FFEEF5FD"/>
    <SolidColorBrush x:Key="&#442;" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="&#443;" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="&#444;" Color="#FFB6BDC5"/>
    <SolidColorBrush x:Key="&#445;" Color="#210080FF"/>
    <SolidColorBrush x:Key="&#446;" Color="#80DADADA"/>
    <SolidColorBrush x:Key="&#447;" Color="#400080FF"/>
    <SolidColorBrush x:Key="&#448;" Color="#400080FF"/>
    <SolidColorBrush x:Key="&#449;" Color="#90006CD9"/>
    <SolidColorBrush x:Key="&#450;" Color="#FFB6BDC5"/>
    <SolidColorBrush x:Key="&#451;" Color="#FFEEF5FD"/>
    <SolidColorBrush x:Key="&#452;" Color="#FF212121"/>
    <SolidColorBrush x:Key="&#453;" Color="#FFEEF5FD"/>
    <SolidColorBrush x:Key="&#454;" Color="#FFEEF5FD"/>
    <SolidColorBrush x:Key="&#455;" Color="#FFEEF5FD"/>
    <SolidColorBrush x:Key="&#456;" Color="#FFEEF5FD"/>
    <SolidColorBrush x:Key="&#457;" Color="#FF6D6D6D"/>
    <SolidColorBrush x:Key="&#458;" Color="#FFEEF5FD"/>
    <SolidColorBrush x:Key="&#459;" Color="#FFEEF5FD"/>


    <Geometry x:Key="&#460;"> M 0,2.5 L 2.5,5 L 7,0.5</Geometry>

    <Style x:Key="&#461;" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <Setter Property="CornerRadius" Value="0,0,0,0" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Margin" Value="0,0,11,0" />
        <Setter Property="CornerRadius" Value="3,3,3,3" />
    </Style>

    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}"
           TargetType="{x:Type Separator}">
        <Setter Property="Background"
                Value="{StaticResource &#444;}"/>
        <Setter Property="MinWidth"
                Value="1"/>
        <Setter Property="MinHeight"
                Value="1"/>
        <Setter Property="Margin"
                Value="2,2,2,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
           TargetType="{x:Type Button}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Padding"
                Value="2"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="HorizontalAlignment"
                Value="Center"/>
        <Setter Property="VerticalAlignment"
                Value="Center"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Center"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{StaticResource &#445;}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{StaticResource &#445;}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#449;}"/>
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{StaticResource &#448;}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Padding"
                Value="2"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="BorderBrush"
                Value="Transparent"/>
        <Setter Property="HorizontalAlignment"
                Value="Center"/>
        <Setter Property="VerticalAlignment"
                Value="Center"/>
        <Setter Property="HorizontalContentAlignment"
                Value="Center"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                            <Setter Property="Background"
                                    Value="{StaticResource &#447;}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                            <Setter Property="Background"
                                    Value="{StaticResource &#445;}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                            <Setter Property="Background"
                                    Value="{StaticResource &#445;}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true"/>
                                <Condition Property="IsChecked"
                                           Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource &#449;}"/>
                            <Setter Property="Background"
                                    Value="{StaticResource &#448;}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused"
                                           Value="true"/>
                                <Condition Property="IsChecked"
                                           Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource &#449;}"/>
                            <Setter Property="Background"
                                    Value="{StaticResource &#448;}"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="BorderBrush"
                                    Value="{StaticResource &#449;}"/>
                            <Setter Property="Background"
                                    Value="{StaticResource &#448;}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
           BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
           TargetType="{x:Type CheckBox}"/>
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
           BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
           TargetType="{x:Type RadioButton}"/>


    <Style x:Key="&#462;"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth"
                Value="0"/>
        <Setter Property="MinHeight"
                Value="0"/>
        <Setter Property="Width"
                Value="Auto"/>
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="Focusable"
                Value="false"/>
        <Setter Property="ClickMode"
                Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"
                                              SharedSizeGroup="ComboBoxButton"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Chrome"
                                Grid.Column="1"
                                Width="13"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="true">
                            <Path x:Name="ArrowDownPath"
                                  Data="M 2.5 0 L 8.5 0 L 5.5 3 Z"
                                  Fill="black"
                                  VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Chrome"
                                    Property="BorderBrush"
                                    Value="{x:Null}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver"
                                           Value="true"/>
                                <Condition Property="IsChecked"
                                           Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Chrome"
                                    Property="Background"
                                    Value="{StaticResource &#445;}"/>
                        </MultiTrigger>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter TargetName="Chrome"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#449;}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter TargetName="Chrome"
                                    Property="Background"
                                    Value="{StaticResource &#448;}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="ArrowDownPath"
                                    Property="Fill"
                                    Value="{StaticResource &#443;}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(base:AccessibilitySwitches.UseNetFx47CompatibleAccessibilityFeatures)}" Value="false"/>
                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="true"/>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={x:Static RelativeSource.Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <!-- DDVSO:437424
                             In high contrast, set the arrow fill to the foreground of the templated parent in order to match the enabled colors.
                             This fixes an issue where the arrow would not be visible in certain high contrast scenarios.
                             Also ensure the outline is drawn to the appropriate control color. -->
                            <Setter TargetName="ArrowDownPath" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            <Setter TargetName="Chrome" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}"
           TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Margin"
                Value="1,0"/>
        <Setter Property="Padding"
                Value="0"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll"
                Value="true"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="HorizontalAlignment"
                Value="Center"/>
        <Setter Property="VerticalAlignment"
                Value="Center"/>
        <Setter Property="MinHeight"
                Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid Grid.IsSharedSizeScope="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"
                                                  SharedSizeGroup="ComboBoxButton"/>
                            </Grid.ColumnDefinitions>
                            <Border Name="Background"
                                    Background="{TemplateBinding Background}"/>
                            <Border Name="SelectedContentBorder"
                                    Margin="2,2,1,2">
                                <ContentPresenter x:Name="ContentSite"
                                                  Content="{TemplateBinding SelectionBoxItem}"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                  Margin="{TemplateBinding Padding}"
                                                  VerticalAlignment="Center"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <Border Name="Border"
                                    Grid.ColumnSpan="2"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"/>
                            <ToggleButton BorderBrush="white"
                                          BorderThickness="1"
                                          x:Name="DropDownButton"
                                          Grid.ColumnSpan="2"
                                          Style="{StaticResource &#462;}"
                                          IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"/>
                            <TextBox Padding="{TemplateBinding Padding}"
                                     Margin="1,1,0,1"
                                     MinHeight="18"
                                     x:Name="PART_EditableTextBox"
                                     Style="{StaticResource &#240;}"
                                     Visibility="Collapsed"
                                     IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}"
                                     VerticalAlignment="Center"/>
                        </Grid>
                        <Popup Name="PART_Popup"
                               AllowsTransparency="true"
                               Placement="Bottom"
                               IsOpen="{Binding Path=IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent}}"
                               Focusable="false"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <theme:SystemDropShadowChrome Name="Shdw"
                                                          Color="Transparent"
                                                          MinWidth="{TemplateBinding ActualWidth}"
                                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="1"
                                        BorderBrush="{StaticResource &#450;}">
                                    <ScrollViewer Name="DropDownScrollViewer">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle
                                                    Name="OpaqueRect"
                                                    Height="{Binding ElementName=DropDownBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=DropDownBorder,Path=ActualWidth}"
                                                    Fill="{Binding ElementName=DropDownBorder,Path=Background}" />
                                            </Canvas>
                                            <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter TargetName="Background"
                                    Property="Background"
                                    Value="{StaticResource &#442;}"/>
                            <Setter TargetName="Background"
                                    Property="Grid.ColumnSpan"
                                    Value="2"/>
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#443;}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin"
                                           Value="true"/>
                                <Condition Property="IsDropDownOpen"
                                           Value="false"/>
                                <Condition Property="IsEditable"
                                           Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SelectedContentBorder"
                                    Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEditable"
                                 Value="true">
                            <!-- For editable ComboBox we want to step directly on TextBox and skip ComboBox itself -->
                            <Setter TargetName="DropDownButton"
                                    Property="Background"
                                    Value="{x:Null}"/>
                            <Setter TargetName="ContentSite"
                                    Property="Visibility"
                                    Value="Collapsed"/>
                            <Setter TargetName="PART_EditableTextBox"
                                    Property="Visibility"
                                    Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="DropDownButton"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                            <Setter TargetName="DropDownButton"
                                    Property="Background"
                                    Value="{StaticResource &#445;}"/>
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin"
                                 Value="true">
                            <Setter TargetName="DropDownButton"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                            <Setter TargetName="DropDownButton"
                                    Property="Background"
                                    Value="{StaticResource &#445;}"/>
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup"
                                 Property="Popup.HasDropShadow"
                                 Value="true">
                            <Setter TargetName="Shdw"
                                    Property="Margin"
                                    Value="0,0,5,5"/>
                            <Setter TargetName="Shdw"
                                    Property="SnapsToDevicePixels"
                                    Value="true"/>
                            <Setter TargetName="Shdw"
                                    Property="Color"
                                    Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="HasItems"
                                 Value="false">
                            <!-- Set minimum height for empty drop down -->
                            <Setter TargetName="DropDownBorder"
                                    Property="MinHeight"
                                    Value="95"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin"
                                           Value="true"/>
                                <Condition Property="IsDropDownOpen"
                                           Value="false"/>
                                <Condition Property="IsEditable"
                                           Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEditable"
                                 Value="true">
                            <Setter Property="Padding"
                                    Value="2"/>
                            <Setter Property="IsTabStop"
                                    Value="false"/>
                        </Trigger>
                        <Trigger SourceName="DropDownScrollViewer"
                                 Property="ScrollViewer.CanContentScroll"
                                 Value="false" >
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Top"
                                    Value="{Binding ElementName=DropDownScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect"
                                    Property="Canvas.Left"
                                    Value="{Binding ElementName=DropDownScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}"
           TargetType="{x:Type TextBox}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush"
                Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderThickness"
                Value="1"/>
        <Setter Property="Margin"
                Value="1,0"/>
        <Setter Property="Padding"
                Value="2"/>
        <Setter Property="HorizontalAlignment"
                Value="Center"/>
        <Setter Property="VerticalAlignment"
                Value="Center"/>
        <Setter Property="MinHeight"
                Value="18"/>
        <Setter Property="ScrollViewer.PanningMode"
                Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled"
                Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost"
                                      VerticalAlignment="Center"
                                      MinHeight="18"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{StaticResource &#442;}"/>
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#443;}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin"
                                 Value="true">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{StaticResource &#446;}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Static ToolBar.MenuStyleKey}"
           TargetType="{x:Type Menu}">
        <Setter Property="FontFamily"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight"
                Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="VerticalContentAlignment"
                Value="Center"/>
        <Setter Property="KeyboardNavigation.TabNavigation"
                Value="Continue"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
                <Setter Property="OverridesDefaultStyle"
                        Value="true" />
                <Setter Property="Background"
                        Value="{StaticResource &#444;}" />
                <Setter Property="Height" Value="1" />
                <Setter Property="Margin" Value="0,1,0,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Grid SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="24" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="1" Margin="8,0,0,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="{x:Type MenuItem}"
                   TargetType="{x:Type MenuItem}">
                <Setter Property="OverridesDefaultStyle"
                        Value="true" />
                <Setter Property="HorizontalContentAlignment"
                        Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment"
                        Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Background"
                        Value="Transparent"/>
                <Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
                <Setter Property="BorderThickness"
                        Value="1"/>
                <Setter Property="Margin"
                        Value="0,1,0,0"/>
                <Setter Property="Padding"
                        Value="8,3,8,3"/>
                <Setter Property="DockPanel.Dock"
                        Value="Top"/>
                <Setter Property="ScrollViewer.PanningMode"
                        Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled"
                        Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <!-- SubmenuItem Template -->
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Grid Background="Transparent"
                                  SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="24"
                                                      Width="Auto"
                                                      SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"
                                                      SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition Width="14"/>
                                </Grid.ColumnDefinitions>
                                <Border Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Grid.ColumnSpan="4"
                                        Margin="1,0"/>
                                <!-- Glyph -->
                                <ContentPresenter x:Name="Icon"
                                                  Margin="0"
                                                  VerticalAlignment="Center"
                                                  ContentSource="Icon"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Border Name="GlyphPanel"
                                        Margin="0,1"
                                        Width="20"
                                        Height="20"
                                        Visibility="Hidden"
                                        BorderBrush="{StaticResource &#446;}"
                                        Background="{StaticResource &#452;}"
                                        BorderThickness="1">
                                    <Path VerticalAlignment="Center"
                                          HorizontalAlignment="Center"
                                          FlowDirection="LeftToRight"
                                          Stroke="{TemplateBinding Foreground}"
                                          StrokeThickness="1.2"
                                          Data="{StaticResource &#460;}"/>
                                </Border>

                                <ContentPresenter Grid.Column="1"
                                                  ContentSource="Header"
                                                  Margin="{TemplateBinding Padding}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <TextBlock Grid.Column="2"
                                           Text="{TemplateBinding InputGestureText}"
                                           Margin="4,3,2,3"
                                           HorizontalAlignment="Right"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Icon"
                                         Value="{x:Null}">
                                    <Setter TargetName="Icon"
                                            Property="Visibility"
                                            Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsChecked"
                                         Value="true">
                                    <Setter TargetName="GlyphPanel"
                                            Property="Visibility"
                                            Value="Visible"/>
                                    <Setter TargetName="Icon"
                                            Property="Visibility"
                                            Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsHighlighted"
                                         Value="true">
                                    <Setter TargetName="Border"
                                            Property="BorderBrush"
                                            Value="{StaticResource &#446;}"/>
                                    <Setter TargetName="Border"
                                            Property="Background"
                                            Value="{StaticResource &#445;}"/>
                                    <Setter TargetName="GlyphPanel"
                                            Property="BorderBrush"
                                            Value="{StaticResource &#449;}"/>
                                    <Setter TargetName="GlyphPanel"
                                            Property="Background"
                                            Value="{StaticResource &#441;}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled"
                                         Value="false">
                                    <Setter Property="Foreground"
                                            Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Role"
                             Value="TopLevelHeader">
                        <Setter Property="Padding"
                                Value="6,2,7,2"/>
                        <Setter Property="Grid.IsSharedSizeScope"
                                Value="true"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Border Name="Border"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="1"
                                            SnapsToDevicePixels="true">
                                        <DockPanel Name="Header">
                                            <!-- Glyph -->
                                            <ContentPresenter x:Name="Icon"
                                                              Margin="4,0,6,0"
                                                              VerticalAlignment="Center"
                                                              ContentSource="Icon"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            <Path x:Name="GlyphPanel"
                                                  Margin="4,0,6,0"
                                                  Visibility="Collapsed"
                                                  VerticalAlignment="Center"
                                                  FlowDirection="LeftToRight"
                                                  Stroke="{TemplateBinding Foreground}"
                                                  StrokeThickness="1.2"
                                                  Data="{StaticResource &#460;}"/>
                                            <!-- Header Content -->
                                            <ContentPresenter ContentSource="Header"
                                                              Margin="{TemplateBinding Padding}"
                                                              RecognizesAccessKey="True"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            <!-- Submenu Popup -->
                                            <Popup x:Name="PART_Popup"
                                                   Placement="Bottom"
                                                   HorizontalOffset="-1"
                                                   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                                   Focusable="false"
                                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                                   AllowsTransparency="true">
                                                <theme:SystemDropShadowChrome Name="Shdw"
                                                                              Color="Transparent">
                                                    <Border Name="SubMenuBorder" Background="{StaticResource &#451;}"
                                                            BorderBrush="{StaticResource &#450;}"
                                                            BorderThickness="1">
                                                        <Grid>
                                                            <Rectangle Fill="{StaticResource &#451;}"
                                                                       Margin="0,-1,0,0"
                                                                       VerticalAlignment="Top"
                                                                       HorizontalAlignment="Left"
                                                                       Height="1"
                                                                       Width="{Binding ElementName=Header, Path=ActualWidth}" />
                                                            <ScrollViewer Name="SubMenuScrollViewer"
                                                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                                <Grid RenderOptions.ClearTypeHint="Enabled" Grid.IsSharedSizeScope="true">
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition MinWidth="24"
                                                                                          Width="Auto"
                                                                                          SharedSizeGroup="MenuItemIconColumnGroup"/>
                                                                        <ColumnDefinition Width="*"/>
                                                                    </Grid.ColumnDefinitions>
                                                                    <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                                        <Rectangle
                                                                            Name="OpaqueRect"
                                                                            Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                                                            Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                                                            Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                                                    </Canvas>
                                                                    <Rectangle Fill="{StaticResource &#456;}"
                                                                               Margin="0,1"/>
                                                                    <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                                    Grid.ColumnSpan="2"
                                                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                                                    Margin="0,0,0,1"
                                                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                                </Grid>
                                                            </ScrollViewer>
                                                        </Grid>
                                                    </Border>
                                                </theme:SystemDropShadowChrome>
                                            </Popup>
                                        </DockPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSuspendingPopupAnimation"
                                                 Value="true">
                                            <Setter TargetName="PART_Popup"
                                                    Property="PopupAnimation"
                                                    Value="None"/>
                                        </Trigger>
                                        <Trigger Property="Icon"
                                                 Value="{x:Null}">
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked"
                                                 Value="true">
                                            <Setter TargetName="GlyphPanel"
                                                    Property="Visibility"
                                                    Value="Visible"/>
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsHighlighted"
                                                 Value="true">
                                            <Setter TargetName="Border"
                                                    Property="BorderBrush"
                                                    Value="{StaticResource &#446;}"/>
                                            <Setter TargetName="Border"
                                                    Property="Background"
                                                    Value="{StaticResource &#445;}"/>
                                        </Trigger>
                                        <Trigger Property="IsSubmenuOpen"
                                                 Value="true">
                                            <Setter TargetName="Border"
                                                    Property="BorderBrush"
                                                    Value="{StaticResource &#450;}"/>
                                            <Setter TargetName="Border"
                                                    Property="Background"
                                                    Value="{StaticResource &#453;}"/>
                                        </Trigger>
                                        <Trigger SourceName="PART_Popup"
                                                  Property="Popup.HasDropShadow"
                                                  Value="true">
                                            <Setter TargetName="Shdw"
                                                    Property="Margin"
                                                    Value="0,0,5,5"/>
                                            <Setter TargetName="Shdw"
                                                    Property="SnapsToDevicePixels"
                                                    Value="true"/>
                                            <Setter TargetName="Shdw"
                                                    Property="Color"
                                                    Value="#71000000"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled"
                                                 Value="false">
                                            <Setter Property="Foreground"
                                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                        <Trigger SourceName="SubMenuScrollViewer"
                                                 Property="ScrollViewer.CanContentScroll"
                                                 Value="false" >
                                            <Setter TargetName="OpaqueRect"
                                                    Property="Canvas.Top"
                                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                                            <Setter TargetName="OpaqueRect"
                                                    Property="Canvas.Left"
                                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="Role"
                             Value="TopLevelItem">
                        <Setter Property="Margin"
                                Value="0,1,0,1"/>
                        <Setter Property="Padding"
                                Value="7,1,8,2"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Border Name="Border"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="1"
                                            SnapsToDevicePixels="true">
                                        <DockPanel>
                                            <!-- Glyph -->
                                            <ContentPresenter x:Name="Icon"
                                                              Margin="4,0,6,0"
                                                              VerticalAlignment="Center"
                                                              ContentSource="Icon"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            <Path x:Name="GlyphPanel"
                                                  Margin="4,0,6,0"
                                                  Visibility="Collapsed"
                                                  VerticalAlignment="Center"
                                                  FlowDirection="LeftToRight"
                                                  Stroke="{TemplateBinding Foreground}"
                                                  StrokeThickness="1.2"
                                                  Data="{StaticResource &#460;}"/>
                                            <!-- Header Content -->
                                            <ContentPresenter ContentSource="Header"
                                                              Margin="{TemplateBinding Padding}"
                                                              RecognizesAccessKey="True"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </DockPanel>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="Icon"
                                                 Value="{x:Null}">
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked"
                                                 Value="true">
                                            <Setter TargetName="GlyphPanel"
                                                    Property="Visibility"
                                                    Value="Visible"/>
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsHighlighted"
                                                 Value="true">
                                            <Setter TargetName="Border"
                                                    Property="BorderBrush"
                                                    Value="{StaticResource &#446;}"/>
                                            <Setter TargetName="Border"
                                                    Property="Background"
                                                    Value="{StaticResource &#445;}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled"
                                                 Value="false">
                                            <Setter Property="Foreground"
                                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                    <Trigger Property="Role"
                             Value="SubmenuHeader">
                        <Setter Property="DockPanel.Dock"
                                Value="Top"/>
                        <Setter Property="Padding"
                                Value="8,3,8,3"/>
                        <Setter Property="Grid.IsSharedSizeScope"
                                Value="true"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                    <Grid Background="Transparent"
                                          SnapsToDevicePixels="true">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition MinWidth="24"
                                                              Width="Auto"
                                                              SharedSizeGroup="MenuItemIconColumnGroup"/>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"
                                                              SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                            <ColumnDefinition Width="14"/>
                                        </Grid.ColumnDefinitions>
                                        <Border Name="Border"
                                                Background="{TemplateBinding Background}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                Grid.ColumnSpan="4"
                                                Margin="1,0"/>
                                        <!-- Glyph -->
                                        <ContentPresenter x:Name="Icon"
                                                          Margin="3"
                                                          VerticalAlignment="Center"
                                                          ContentSource="Icon"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        <Border Name="GlyphPanel"
                                                Margin="0,1"
                                                Width="20"
                                                Height="20"
                                                Visibility="Hidden"
                                                BorderBrush="{StaticResource &#446;}"
                                                Background="{StaticResource &#452;}"
                                                BorderThickness="1">
                                            <Path VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  FlowDirection="LeftToRight"
                                                  Stroke="{TemplateBinding Foreground}"
                                                  StrokeThickness="1.2"
                                                  Data="{StaticResource &#460;}"/>
                                        </Border>
                                        <ContentPresenter Grid.Column="1"
                                                          ContentSource="Header"
                                                          Margin="{TemplateBinding Padding}"
                                                          RecognizesAccessKey="True"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        <Path Grid.Column="3"
                                              DockPanel.Dock="Right"
                                              VerticalAlignment="Center"
                                              Margin="4,0,6,0"
                                              Fill="{TemplateBinding Foreground}"
                                              Data="{StaticResource &#362;}"/>
                                        <Popup x:Name="PART_Popup"
                                               Placement="Right"
                                               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                               Focusable="false"
                                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                               AllowsTransparency="true">
                                            <theme:SystemDropShadowChrome Name="Shdw"
                                                                          Color="Transparent">
                                                <Border Name="SubMenuBorder" Background="{StaticResource &#451;}"
                                                        BorderBrush="{StaticResource &#450;}"
                                                        BorderThickness="1"
                                                        Grid.IsSharedSizeScope="true">
                                                    <ScrollViewer Name="SubMenuScrollViewer"
                                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">
                                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition MinWidth="24"
                                                                                  Width="Auto"
                                                                                  SharedSizeGroup="MenuItemIconColumnGroup"/>
                                                                <ColumnDefinition Width="*"/>
                                                            </Grid.ColumnDefinitions>
                                                            <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                                <Rectangle
                                                                    Name="OpaqueRect"
                                                                    Height="{Binding ElementName=SubMenuBorder,Path=ActualHeight}"
                                                                    Width="{Binding ElementName=SubMenuBorder,Path=ActualWidth}"
                                                                    Fill="{Binding ElementName=SubMenuBorder,Path=Background}" />
                                                            </Canvas>
                                                            <Rectangle Fill="{StaticResource &#456;}"
                                                                       Margin="0,1"/>
                                                            <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                            Grid.ColumnSpan="2"
                                                                            KeyboardNavigation.TabNavigation="Cycle"
                                                                            Margin="0,0,0,1"
                                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                        </Grid>
                                                    </ScrollViewer>
                                                </Border>
                                            </theme:SystemDropShadowChrome>
                                        </Popup>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSuspendingPopupAnimation"
                                                 Value="true">
                                            <Setter TargetName="PART_Popup"
                                                    Property="PopupAnimation"
                                                    Value="None"/>
                                        </Trigger>
                                        <Trigger Property="Icon"
                                                 Value="{x:Null}">
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked"
                                                 Value="true">
                                            <Setter TargetName="GlyphPanel"
                                                    Property="Visibility"
                                                    Value="Visible"/>
                                            <Setter TargetName="Icon"
                                                    Property="Visibility"
                                                    Value="Collapsed"/>
                                        </Trigger>
                                        <Trigger Property="IsHighlighted"
                                                 Value="true">
                                            <Setter TargetName="Border"
                                                    Property="BorderBrush"
                                                    Value="{StaticResource &#446;}"/>
                                            <Setter TargetName="Border"
                                                    Property="Background"
                                                    Value="{StaticResource &#445;}"/>
                                            <Setter TargetName="GlyphPanel"
                                                    Property="BorderBrush"
                                                    Value="{StaticResource &#449;}"/>
                                            <Setter TargetName="GlyphPanel"
                                                    Property="Background"
                                                    Value="{StaticResource &#441;}"/>
                                        </Trigger>
                                        <Trigger SourceName="PART_Popup"
                                                  Property="Popup.HasDropShadow"
                                                  Value="true">
                                            <Setter TargetName="Shdw"
                                                    Property="Margin"
                                                    Value="0,0,5,5"/>
                                            <Setter TargetName="Shdw"
                                                    Property="SnapsToDevicePixels"
                                                    Value="true"/>
                                            <Setter TargetName="Shdw"
                                                    Property="Color"
                                                    Value="#71000000"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled"
                                                 Value="false">
                                            <Setter Property="Foreground"
                                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                        </Trigger>
                                        <Trigger SourceName="SubMenuScrollViewer"
                                                 Property="ScrollViewer.CanContentScroll"
                                                 Value="false" >
                                            <Setter TargetName="OpaqueRect"
                                                    Property="Canvas.Top"
                                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                                            <Setter TargetName="OpaqueRect"
                                                    Property="Canvas.Left"
                                                    Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>



    <!-- Thumb used in ToolBar Style -->
    <Style x:Key="&#463;"
           TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                            Background="Transparent"
                            SnapsToDevicePixels="True">
                        <Rectangle>
                            <Rectangle.Fill>
                                <DrawingBrush Viewbox="0,0,4,4"
                                              Viewport="0,0,4,4"
                                              TileMode="Tile"
                                              ViewportUnits="Absolute"
                                              ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <DrawingGroup.Children>
                                                <GeometryDrawing Brush="White"
                                                                 Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
                                                <GeometryDrawing Brush="{StaticResource &#457;}"
                                                                 Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                                            </DrawingGroup.Children>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Cursor"
                                    Value="SizeAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="&#464;"
           TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <!-- This trigger on a SystemParameter works because switching into high contrast mode requires a re-evaluation of theme -->
                <Setter Property="Background"
                            Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Background"
                    Value="{StaticResource &#458;}"/>
        <Setter Property="MinHeight"
                Value="0"/>
        <Setter Property="MinWidth"
                Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Bd"
                            CornerRadius="0,3,3,0"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <Canvas Width="6"
                                Height="7"
                                Margin="7,2,2,2"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                SnapsToDevicePixels="true">
                            <Path Stroke="White"
                                  Data="M 1 1.5 L 6 1.5"/>
                            <Path Stroke="{TemplateBinding Foreground}"
                                  Data="M 0 0.5 L 5 0.5"/>
                            <Path Fill="White"
                                  Data="M 0.5 4 L 6.5 4 L 3.5 7 Z"/>
                            <Path Fill="{TemplateBinding Foreground}"
                                  Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{StaticResource &#445;}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{StaticResource &#445;}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{StaticResource &#457;}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="&#465;"
           TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <!-- This trigger on a SystemParameter works because switching into high contrast mode requires a re-evaluation of theme -->
                <Setter Property="Background"
                            Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Background"
                    Value="{StaticResource &#459;}"/>
        <Setter Property="MinHeight"
                Value="0"/>
        <Setter Property="MinWidth"
                Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Bd"
                            CornerRadius="0,0,3,3"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <Canvas Width="7"
                                Height="6"
                                Margin="2,7,2,2"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                SnapsToDevicePixels="true">
                            <Path Stroke="White"
                                  Data="M 1.5 1 L 1.5 6"/>
                            <Path Stroke="{TemplateBinding Foreground}"
                                  Data="M 0.5 0 L 0.5 5"/>
                            <Path Fill="White"
                                  Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z"/>
                            <Path Fill="{TemplateBinding Foreground}"
                                  Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{StaticResource &#445;}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{StaticResource &#445;}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{StaticResource &#457;}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolBar}"
           TargetType="{x:Type ToolBar}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <!-- This trigger on a SystemParameter works because switching into high contrast mode requires a re-evaluation of theme -->
                <Setter Property="Background"
                            Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{StaticResource &#455;}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid Name="Grid"
                          Margin="3,1,1,1"
                          SnapsToDevicePixels="true">
                        <Grid HorizontalAlignment="Right"
                              x:Name="OverflowGrid">
                            <ToggleButton x:Name="OverflowButton"
                                          FocusVisualStyle="{x:Null}"
                                          IsEnabled="{TemplateBinding HasOverflowItems}"
                                          Style="{StaticResource &#464;}"
                                          IsChecked="{Binding Path=IsOverflowOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press"/>
                            <Popup x:Name="OverflowPopup"
                                   AllowsTransparency="true"
                                   Placement="Bottom"
                                   IsOpen="{Binding Path=IsOverflowOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                   StaysOpen="false"
                                   Focusable="false"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                <theme:SystemDropShadowChrome Name="Shdw"
                                                              Color="Transparent">
                                    <Border Background="{StaticResource &#451;}"
                                            BorderBrush="{StaticResource &#450;}"
                                            BorderThickness="1"
                                            RenderOptions.ClearTypeHint="Enabled"
                                            x:Name="ToolBarSubMenuBorder">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                              Margin="2"
                                                              WrapWidth="200"
                                                              Focusable="true"
                                                              FocusVisualStyle="{x:Null}"
                                                              KeyboardNavigation.TabNavigation="Cycle"
                                                              KeyboardNavigation.DirectionalNavigation="Cycle"
                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </theme:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                Style="{StaticResource &#461;}">
                            <DockPanel KeyboardNavigation.TabIndex="1"
                                       KeyboardNavigation.TabNavigation="Local">
                                <Thumb x:Name="ToolBarThumb"
                                       Style="{StaticResource &#463;}"
                                       Margin="-3,-1,0,0"
                                       Width="10"
                                       Padding="6,5,1,6"/>
                                <ContentPresenter x:Name="ToolBarHeader"
                                                  ContentSource="Header"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  Margin="4,0,4,0"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel"
                                              IsItemsHost="true"
                                              Margin="0,1,2,2"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen"
                                 Value="true">
                            <Setter TargetName="ToolBarThumb"
                                    Property="IsEnabled"
                                    Value="false"/>
                        </Trigger>
                        <Trigger Property="Header"
                                 Value="{x:Null}">
                            <Setter TargetName="ToolBarHeader"
                                    Property="Visibility"
                                    Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked"
                                 Value="true">
                            <Setter TargetName="ToolBarThumb"
                                    Property="Visibility"
                                    Value="Collapsed"/>
                        </Trigger>
                        <Trigger SourceName="OverflowPopup"
                                 Property="Popup.HasDropShadow"
                                 Value="true">
                            <Setter TargetName="Shdw"
                                    Property="Margin"
                                    Value="0,0,5,5"/>
                            <Setter TargetName="Shdw"
                                    Property="SnapsToDevicePixels"
                                    Value="true"/>
                            <Setter TargetName="Shdw"
                                    Property="Color"
                                    Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="Orientation"
                                 Value="Vertical">
                            <Setter TargetName="Grid"
                                    Property="Margin"
                                    Value="1,3,1,1"/>
                            <Setter TargetName="OverflowButton"
                                    Property="Style"
                                    Value="{StaticResource &#465;}"/>
                            <Setter TargetName="ToolBarThumb"
                                    Property="Height"
                                    Value="10"/>
                            <Setter TargetName="ToolBarThumb"
                                    Property="Width"
                                    Value="Auto"/>
                            <Setter TargetName="ToolBarThumb"
                                    Property="Margin"
                                    Value="-1,-3,0,0"/>
                            <Setter TargetName="ToolBarThumb"
                                    Property="Padding"
                                    Value="5,6,6,1"/>
                            <Setter TargetName="ToolBarHeader"
                                    Property="Margin"
                                    Value="0,0,0,4"/>
                            <Setter TargetName="PART_ToolBarPanel"
                                    Property="Margin"
                                    Value="1,0,2,2"/>
                            <Setter TargetName="ToolBarThumb"
                                    Property="DockPanel.Dock"
                                    Value="Top"/>
                            <Setter TargetName="ToolBarHeader"
                                    Property="DockPanel.Dock"
                                    Value="Top"/>
                            <Setter TargetName="OverflowGrid"
                                    Property="HorizontalAlignment"
                                    Value="Stretch"/>
                            <Setter TargetName="OverflowGrid"
                                    Property="VerticalAlignment"
                                    Value="Bottom"/>
                            <Setter TargetName="OverflowPopup"
                                    Property="Placement"
                                    Value="Right"/>
                            <Setter TargetName="MainPanelBorder"
                                    Property="Margin"
                                    Value="0,0,0,11"/>
                            <Setter Property="Background"
                                    Value="{StaticResource &#456;}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background"
                Value="{StaticResource &#454;}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
                <!-- This trigger on a SystemParameter works because switching into high contrast mode requires a re-evaluation of theme -->
                <Setter Property="Background"
                            Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
