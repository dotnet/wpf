namespace System.IO.Packaging
{
    public static partial class PackageStore
    {
        public static void AddPackage(System.Uri uri, System.IO.Packaging.Package package) { }
        public static System.IO.Packaging.Package GetPackage(System.Uri uri) { throw null; }
        public static void RemovePackage(System.Uri uri) { }
    }
    public sealed partial class PackWebRequest : System.Net.WebRequest
    {
        internal PackWebRequest() { }
        public override System.Net.Cache.RequestCachePolicy CachePolicy { get { throw null; } set { } }
        public override string ConnectionGroupName { get { throw null; } set { } }
        public override long ContentLength { get { throw null; } set { } }
        public override string ContentType { get { throw null; } set { } }
        public override System.Net.ICredentials Credentials { get { throw null; } set { } }
        public override System.Net.WebHeaderCollection Headers { get { throw null; } set { } }
        public override string Method { get { throw null; } set { } }
        public override bool PreAuthenticate { get { throw null; } set { } }
        public override System.Net.IWebProxy Proxy { get { throw null; } set { } }
        public override System.Uri RequestUri { get { throw null; } }
        public override int Timeout { get { throw null; } set { } }
        public override bool UseDefaultCredentials { get { throw null; } set { } }
        public System.Net.WebRequest GetInnerRequest() { throw null; }
        public override System.IO.Stream GetRequestStream() { throw null; }
        public override System.Net.WebResponse GetResponse() { throw null; }
    }
    public sealed partial class PackWebRequestFactory : System.Net.IWebRequestCreate
    {
        public PackWebRequestFactory() { }
        System.Net.WebRequest System.Net.IWebRequestCreate.Create(System.Uri uri) { throw null; }
    }
    public sealed partial class PackWebResponse : System.Net.WebResponse
    {
        internal PackWebResponse() { }
        public override long ContentLength { get { throw null; } }
        public override string ContentType { get { throw null; } }
        public override System.Net.WebHeaderCollection Headers { get { throw null; } }
        public System.Net.WebResponse InnerResponse { get { throw null; } }
        public override bool IsFromCache { get { throw null; } }
        public override System.Uri ResponseUri { get { throw null; } }
        public override void Close() { }
        protected override void Dispose(bool disposing) { }
        public override System.IO.Stream GetResponseStream() { throw null; }
    }
}
namespace System.Windows
{
    public partial class AutoResizedEventArgs : System.EventArgs
    {
        public AutoResizedEventArgs(System.Windows.Size size) { }
        public System.Windows.Size Size { get { throw null; } }
    }
    public delegate void AutoResizedEventHandler(object sender, System.Windows.AutoResizedEventArgs e);
    public enum BaselineAlignment
    {
        Top = 0,
        Center = 1,
        Bottom = 2,
        Baseline = 3,
        TextTop = 4,
        TextBottom = 5,
        Subscript = 6,
        Superscript = 7,
    }
    public static partial class Clipboard
    {
        public static void Clear() { }
        public static bool ContainsAudio() { throw null; }
        public static bool ContainsData(string format) { throw null; }
        public static bool ContainsFileDropList() { throw null; }
        public static bool ContainsImage() { throw null; }
        public static bool ContainsText() { throw null; }
        public static bool ContainsText(System.Windows.TextDataFormat format) { throw null; }
        public static void Flush() { }
        public static System.IO.Stream GetAudioStream() { throw null; }
        public static object GetData(string format) { throw null; }
        public static System.Windows.IDataObject GetDataObject() { throw null; }
        public static System.Collections.Specialized.StringCollection GetFileDropList() { throw null; }
        public static System.Windows.Media.Imaging.BitmapSource GetImage() { throw null; }
        public static string GetText() { throw null; }
        public static string GetText(System.Windows.TextDataFormat format) { throw null; }
        public static bool IsCurrent(System.Windows.IDataObject data) { throw null; }
        public static void SetAudio(byte[] audioBytes) { }
        public static void SetAudio(System.IO.Stream audioStream) { }
        public static void SetData(string format, object data) { }
        public static void SetDataObject(object data) { }
        public static void SetDataObject(object data, bool copy) { }
        public static void SetFileDropList(System.Collections.Specialized.StringCollection fileDropList) { }
        public static void SetImage(System.Windows.Media.Imaging.BitmapSource image) { }
        public static void SetText(string text) { }
        public static void SetText(string text, System.Windows.TextDataFormat format) { }
    }
    public partial class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable
    {
        public static readonly System.Windows.DependencyProperty AllowDropProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
        public static readonly System.Windows.RoutedEvent DragEnterEvent;
        public static readonly System.Windows.RoutedEvent DragLeaveEvent;
        public static readonly System.Windows.RoutedEvent DragOverEvent;
        public static readonly System.Windows.RoutedEvent DropEvent;
        public static readonly System.Windows.DependencyProperty FocusableProperty;
        public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
        public static readonly System.Windows.RoutedEvent GotFocusEvent;
        public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
        public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
        public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
        public static readonly System.Windows.DependencyProperty IsEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsFocusedProperty;
        public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
        public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
        public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
        public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
        public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
        public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
        public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
        public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
        public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
        public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
        public static readonly System.Windows.RoutedEvent KeyDownEvent;
        public static readonly System.Windows.RoutedEvent KeyUpEvent;
        public static readonly System.Windows.RoutedEvent LostFocusEvent;
        public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
        public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
        public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
        public static readonly System.Windows.RoutedEvent MouseDownEvent;
        public static readonly System.Windows.RoutedEvent MouseEnterEvent;
        public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
        public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
        public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
        public static readonly System.Windows.RoutedEvent MouseMoveEvent;
        public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
        public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
        public static readonly System.Windows.RoutedEvent MouseUpEvent;
        public static readonly System.Windows.RoutedEvent MouseWheelEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
        public static readonly System.Windows.RoutedEvent PreviewDropEvent;
        public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
        public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
        public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
        public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
        public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
        public static readonly System.Windows.RoutedEvent QueryCursorEvent;
        public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
        public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
        public static readonly System.Windows.RoutedEvent StylusDownEvent;
        public static readonly System.Windows.RoutedEvent StylusEnterEvent;
        public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
        public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
        public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
        public static readonly System.Windows.RoutedEvent StylusMoveEvent;
        public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
        public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
        public static readonly System.Windows.RoutedEvent StylusUpEvent;
        public static readonly System.Windows.RoutedEvent TextInputEvent;
        public static readonly System.Windows.RoutedEvent TouchDownEvent;
        public static readonly System.Windows.RoutedEvent TouchEnterEvent;
        public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
        public static readonly System.Windows.RoutedEvent TouchMoveEvent;
        public static readonly System.Windows.RoutedEvent TouchUpEvent;
        public ContentElement() { }
        public bool AllowDrop { get { throw null; } set { } }
        public bool AreAnyTouchesCaptured { get { throw null; } }
        public bool AreAnyTouchesCapturedWithin { get { throw null; } }
        public bool AreAnyTouchesDirectlyOver { get { throw null; } }
        public bool AreAnyTouchesOver { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Input.CommandBindingCollection CommandBindings { get { throw null; } }
        public bool Focusable { get { throw null; } set { } }
        public bool HasAnimatedProperties { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Input.InputBindingCollection InputBindings { get { throw null; } }
        public bool IsEnabled { get { throw null; } set { } }
        protected virtual bool IsEnabledCore { get { throw null; } }
        public bool IsFocused { get { throw null; } }
        public bool IsInputMethodEnabled { get { throw null; } }
        public bool IsKeyboardFocused { get { throw null; } }
        public bool IsKeyboardFocusWithin { get { throw null; } }
        public bool IsMouseCaptured { get { throw null; } }
        public bool IsMouseCaptureWithin { get { throw null; } }
        public bool IsMouseDirectlyOver { get { throw null; } }
        public bool IsMouseOver { get { throw null; } }
        public bool IsStylusCaptured { get { throw null; } }
        public bool IsStylusCaptureWithin { get { throw null; } }
        public bool IsStylusDirectlyOver { get { throw null; } }
        public bool IsStylusOver { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get { throw null; } }
        public event System.Windows.DragEventHandler DragEnter { add { } remove { } }
        public event System.Windows.DragEventHandler DragLeave { add { } remove { } }
        public event System.Windows.DragEventHandler DragOver { add { } remove { } }
        public event System.Windows.DragEventHandler Drop { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged { add { } remove { } }
        public event System.Windows.GiveFeedbackEventHandler GiveFeedback { add { } remove { } }
        public event System.Windows.RoutedEventHandler GotFocus { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler GotMouseCapture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler GotStylusCapture { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler KeyDown { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler KeyUp { add { } remove { } }
        public event System.Windows.RoutedEventHandler LostFocus { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler LostMouseCapture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler LostStylusCapture { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseDown { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler MouseEnter { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler MouseLeave { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler MouseMove { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseUp { add { } remove { } }
        public event System.Windows.Input.MouseWheelEventHandler MouseWheel { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDragEnter { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDragLeave { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDragOver { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDrop { add { } remove { } }
        public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler PreviewKeyDown { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler PreviewKeyUp { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler PreviewMouseMove { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp { add { } remove { } }
        public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel { add { } remove { } }
        public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp { add { } remove { } }
        public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusInRange { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange { add { } remove { } }
        public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusUp { add { } remove { } }
        public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp { add { } remove { } }
        public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag { add { } remove { } }
        public event System.Windows.Input.QueryCursorEventHandler QueryCursor { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp { add { } remove { } }
        public event System.Windows.Input.StylusDownEventHandler StylusDown { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusEnter { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusInAirMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusInRange { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusLeave { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusOutOfRange { add { } remove { } }
        public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusUp { add { } remove { } }
        public event System.Windows.Input.TextCompositionEventHandler TextInput { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchDown { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchMove { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchUp { add { } remove { } }
        public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
        public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler, bool handledEventsToo) { }
        public void AddToEventRoute(System.Windows.EventRoute route, System.Windows.RoutedEventArgs e) { }
        public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock) { }
        public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
        public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation) { }
        public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
        public bool CaptureMouse() { throw null; }
        public bool CaptureStylus() { throw null; }
        public bool CaptureTouch(System.Windows.Input.TouchDevice touchDevice) { throw null; }
        public bool Focus() { throw null; }
        public object GetAnimationBaseValue(System.Windows.DependencyProperty dp) { throw null; }
        protected internal virtual System.Windows.DependencyObject GetUIParentCore() { throw null; }
        public virtual bool MoveFocus(System.Windows.Input.TraversalRequest request) { throw null; }
        protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected internal virtual void OnDragEnter(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnDragLeave(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnDragOver(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnDrop(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
        protected virtual void OnGotFocus(System.Windows.RoutedEventArgs e) { }
        protected internal virtual void OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected internal virtual void OnGotMouseCapture(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnGotStylusCapture(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnGotTouchCapture(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected internal virtual void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected internal virtual void OnKeyUp(System.Windows.Input.KeyEventArgs e) { }
        protected virtual void OnLostFocus(System.Windows.RoutedEventArgs e) { }
        protected internal virtual void OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected internal virtual void OnLostMouseCapture(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnLostStylusCapture(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnLostTouchCapture(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseEnter(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnMouseLeave(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseMove(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
        protected internal virtual void OnPreviewDragEnter(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnPreviewDragLeave(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnPreviewDragOver(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnPreviewDrop(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
        protected internal virtual void OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected internal virtual void OnPreviewKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected internal virtual void OnPreviewKeyUp(System.Windows.Input.KeyEventArgs e) { }
        protected internal virtual void OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected internal virtual void OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseMove(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
        protected internal virtual void OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
        protected internal virtual void OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
        protected internal virtual void OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
        protected internal virtual void OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
        protected internal virtual void OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewStylusMove(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
        protected internal virtual void OnPreviewStylusUp(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
        protected internal virtual void OnPreviewTouchDown(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnPreviewTouchMove(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnPreviewTouchUp(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
        protected internal virtual void OnQueryCursor(System.Windows.Input.QueryCursorEventArgs e) { }
        protected internal virtual void OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
        protected internal virtual void OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
        protected internal virtual void OnStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
        protected internal virtual void OnStylusEnter(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusInRange(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusLeave(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusMove(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
        protected internal virtual void OnStylusUp(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
        protected internal virtual void OnTouchDown(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnTouchEnter(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnTouchLeave(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnTouchMove(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnTouchUp(System.Windows.Input.TouchEventArgs e) { }
        public virtual System.Windows.DependencyObject PredictFocus(System.Windows.Input.FocusNavigationDirection direction) { throw null; }
        public void RaiseEvent(System.Windows.RoutedEventArgs e) { }
        public void ReleaseAllTouchCaptures() { }
        public void ReleaseMouseCapture() { }
        public void ReleaseStylusCapture() { }
        public bool ReleaseTouchCapture(System.Windows.Input.TouchDevice touchDevice) { throw null; }
        public void RemoveHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeCommandBindings() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeInputBindings() { throw null; }
    }
    public static partial class ContentOperations
    {
        public static System.Windows.DependencyObject GetParent(System.Windows.ContentElement reference) { throw null; }
        public static void SetParent(System.Windows.ContentElement reference, System.Windows.DependencyObject parent) { }
    }
    public static partial class CoreCompatibilityPreferences
    {
        public static bool? EnableMultiMonitorDisplayClipping { get { throw null; } set { } }
        public static bool IsAltKeyRequiredInAccessKeyDefaultScope { get { throw null; } set { } }
    }
    public partial class CultureInfoIetfLanguageTagConverter : System.ComponentModel.TypeConverter
    {
        public CultureInfoIetfLanguageTagConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object source) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class DataFormat
    {
        public DataFormat(string name, int id) { }
        public int Id { get { throw null; } }
        public string Name { get { throw null; } }
    }
    public static partial class DataFormats
    {
        public static readonly string Bitmap;
        public static readonly string CommaSeparatedValue;
        public static readonly string Dib;
        public static readonly string Dif;
        public static readonly string EnhancedMetafile;
        public static readonly string FileDrop;
        public static readonly string Html;
        public static readonly string Locale;
        public static readonly string MetafilePicture;
        public static readonly string OemText;
        public static readonly string Palette;
        public static readonly string PenData;
        public static readonly string Riff;
        public static readonly string Rtf;
        public static readonly string Serializable;
        public static readonly string StringFormat;
        public static readonly string SymbolicLink;
        public static readonly string Text;
        public static readonly string Tiff;
        public static readonly string UnicodeText;
        public static readonly string WaveAudio;
        public static readonly string Xaml;
        public static readonly string XamlPackage;
        public static System.Windows.DataFormat GetDataFormat(int id) { throw null; }
        public static System.Windows.DataFormat GetDataFormat(string format) { throw null; }
    }
    public sealed partial class DataObject : System.Runtime.InteropServices.ComTypes.IDataObject, System.Windows.IDataObject
    {
        public static readonly System.Windows.RoutedEvent CopyingEvent;
        public static readonly System.Windows.RoutedEvent PastingEvent;
        public static readonly System.Windows.RoutedEvent SettingDataEvent;
        public DataObject() { }
        public DataObject(object data) { }
        public DataObject(string format, object data) { }
        public DataObject(string format, object data, bool autoConvert) { }
        public DataObject(System.Type format, object data) { }
        public static void AddCopyingHandler(System.Windows.DependencyObject element, System.Windows.DataObjectCopyingEventHandler handler) { }
        public static void AddPastingHandler(System.Windows.DependencyObject element, System.Windows.DataObjectPastingEventHandler handler) { }
        public static void AddSettingDataHandler(System.Windows.DependencyObject element, System.Windows.DataObjectSettingDataEventHandler handler) { }
        public bool ContainsAudio() { throw null; }
        public bool ContainsFileDropList() { throw null; }
        public bool ContainsImage() { throw null; }
        public bool ContainsText() { throw null; }
        public bool ContainsText(System.Windows.TextDataFormat format) { throw null; }
        public System.IO.Stream GetAudioStream() { throw null; }
        public object GetData(string format) { throw null; }
        public object GetData(string format, bool autoConvert) { throw null; }
        public object GetData(System.Type format) { throw null; }
        public bool GetDataPresent(string format) { throw null; }
        public bool GetDataPresent(string format, bool autoConvert) { throw null; }
        public bool GetDataPresent(System.Type format) { throw null; }
        public System.Collections.Specialized.StringCollection GetFileDropList() { throw null; }
        public string[] GetFormats() { throw null; }
        public string[] GetFormats(bool autoConvert) { throw null; }
        public System.Windows.Media.Imaging.BitmapSource GetImage() { throw null; }
        public string GetText() { throw null; }
        public string GetText(System.Windows.TextDataFormat format) { throw null; }
        public static void RemoveCopyingHandler(System.Windows.DependencyObject element, System.Windows.DataObjectCopyingEventHandler handler) { }
        public static void RemovePastingHandler(System.Windows.DependencyObject element, System.Windows.DataObjectPastingEventHandler handler) { }
        public static void RemoveSettingDataHandler(System.Windows.DependencyObject element, System.Windows.DataObjectSettingDataEventHandler handler) { }
        public void SetAudio(byte[] audioBytes) { }
        public void SetAudio(System.IO.Stream audioStream) { }
        public void SetData(object data) { }
        public void SetData(string format, object data) { }
        public void SetData(string format, object data, bool autoConvert) { }
        public void SetData(System.Type format, object data) { }
        public void SetFileDropList(System.Collections.Specialized.StringCollection fileDropList) { }
        public void SetImage(System.Windows.Media.Imaging.BitmapSource image) { }
        public void SetText(string textData) { }
        public void SetText(string textData, System.Windows.TextDataFormat format) { }
        int System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(ref System.Runtime.InteropServices.ComTypes.FORMATETC pFormatetc, System.Runtime.InteropServices.ComTypes.ADVF advf, System.Runtime.InteropServices.ComTypes.IAdviseSink pAdvSink, out int pdwConnection) { throw null; }
        void System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(int dwConnection) { }
        int System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(out System.Runtime.InteropServices.ComTypes.IEnumSTATDATA enumAdvise) { throw null; }
        System.Runtime.InteropServices.ComTypes.IEnumFORMATETC System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR dwDirection) { throw null; }
        int System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(ref System.Runtime.InteropServices.ComTypes.FORMATETC pformatetcIn, out System.Runtime.InteropServices.ComTypes.FORMATETC pformatetcOut) { throw null; }
        void System.Runtime.InteropServices.ComTypes.IDataObject.GetData(ref System.Runtime.InteropServices.ComTypes.FORMATETC formatetc, out System.Runtime.InteropServices.ComTypes.STGMEDIUM medium) { throw null; }
        void System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(ref System.Runtime.InteropServices.ComTypes.FORMATETC formatetc, ref System.Runtime.InteropServices.ComTypes.STGMEDIUM medium) { }
        int System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(ref System.Runtime.InteropServices.ComTypes.FORMATETC formatetc) { throw null; }
        void System.Runtime.InteropServices.ComTypes.IDataObject.SetData(ref System.Runtime.InteropServices.ComTypes.FORMATETC pFormatetcIn, ref System.Runtime.InteropServices.ComTypes.STGMEDIUM pmedium, bool fRelease) { }
    }
    public sealed partial class DataObjectCopyingEventArgs : System.Windows.DataObjectEventArgs
    {
        public DataObjectCopyingEventArgs(System.Windows.IDataObject dataObject, bool isDragDrop) { }
        public System.Windows.IDataObject DataObject { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void DataObjectCopyingEventHandler(object sender, System.Windows.DataObjectCopyingEventArgs e);
    public abstract partial class DataObjectEventArgs : System.Windows.RoutedEventArgs
    {
        internal DataObjectEventArgs() { }
        public bool CommandCancelled { get { throw null; } }
        public bool IsDragDrop { get { throw null; } }
        public void CancelCommand() { }
    }
    public sealed partial class DataObjectPastingEventArgs : System.Windows.DataObjectEventArgs
    {
        public DataObjectPastingEventArgs(System.Windows.IDataObject dataObject, bool isDragDrop, string formatToApply) { }
        public System.Windows.IDataObject DataObject { get { throw null; } set { } }
        public string FormatToApply { get { throw null; } set { } }
        public System.Windows.IDataObject SourceDataObject { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void DataObjectPastingEventHandler(object sender, System.Windows.DataObjectPastingEventArgs e);
    public sealed partial class DataObjectSettingDataEventArgs : System.Windows.DataObjectEventArgs
    {
        public DataObjectSettingDataEventArgs(System.Windows.IDataObject dataObject, string format) { }
        public System.Windows.IDataObject DataObject { get { throw null; } }
        public string Format { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void DataObjectSettingDataEventHandler(object sender, System.Windows.DataObjectSettingDataEventArgs e);
    public sealed partial class DpiChangedEventArgs : System.Windows.RoutedEventArgs
    {
        internal DpiChangedEventArgs() { }
        public System.Windows.DpiScale NewDpi { get { throw null; } }
        public System.Windows.DpiScale OldDpi { get { throw null; } }
    }
    public delegate void DpiChangedEventHandler(object sender, System.Windows.DpiChangedEventArgs e);
    public partial struct DpiScale
    {
        public DpiScale(double dpiScaleX, double dpiScaleY) { throw null; }
        public double DpiScaleX { get { throw null; } }
        public double DpiScaleY { get { throw null; } }
        public double PixelsPerDip { get { throw null; } }
        public double PixelsPerInchX { get { throw null; } }
        public double PixelsPerInchY { get { throw null; } }
    }
    public enum DragAction
    {
        Continue = 0,
        Drop = 1,
        Cancel = 2,
    }
    public static partial class DragDrop
    {
        public static readonly System.Windows.RoutedEvent DragEnterEvent;
        public static readonly System.Windows.RoutedEvent DragLeaveEvent;
        public static readonly System.Windows.RoutedEvent DragOverEvent;
        public static readonly System.Windows.RoutedEvent DropEvent;
        public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
        public static readonly System.Windows.RoutedEvent PreviewDropEvent;
        public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
        public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
        public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
        public static void AddDragEnterHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void AddDragLeaveHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void AddDragOverHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void AddDropHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void AddGiveFeedbackHandler(System.Windows.DependencyObject element, System.Windows.GiveFeedbackEventHandler handler) { }
        public static void AddPreviewDragEnterHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void AddPreviewDragLeaveHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void AddPreviewDragOverHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void AddPreviewDropHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void AddPreviewGiveFeedbackHandler(System.Windows.DependencyObject element, System.Windows.GiveFeedbackEventHandler handler) { }
        public static void AddPreviewQueryContinueDragHandler(System.Windows.DependencyObject element, System.Windows.QueryContinueDragEventHandler handler) { }
        public static void AddQueryContinueDragHandler(System.Windows.DependencyObject element, System.Windows.QueryContinueDragEventHandler handler) { }
        public static System.Windows.DragDropEffects DoDragDrop(System.Windows.DependencyObject dragSource, object data, System.Windows.DragDropEffects allowedEffects) { throw null; }
        public static void RemoveDragEnterHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void RemoveDragLeaveHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void RemoveDragOverHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void RemoveDropHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void RemoveGiveFeedbackHandler(System.Windows.DependencyObject element, System.Windows.GiveFeedbackEventHandler handler) { }
        public static void RemovePreviewDragEnterHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void RemovePreviewDragLeaveHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void RemovePreviewDragOverHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void RemovePreviewDropHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
        public static void RemovePreviewGiveFeedbackHandler(System.Windows.DependencyObject element, System.Windows.GiveFeedbackEventHandler handler) { }
        public static void RemovePreviewQueryContinueDragHandler(System.Windows.DependencyObject element, System.Windows.QueryContinueDragEventHandler handler) { }
        public static void RemoveQueryContinueDragHandler(System.Windows.DependencyObject element, System.Windows.QueryContinueDragEventHandler handler) { }
    }
    [System.FlagsAttribute]
    public enum DragDropEffects
    {
        Scroll = -2147483648,
        All = -2147483645,
        None = 0,
        Copy = 1,
        Move = 2,
        Link = 4,
    }
    [System.FlagsAttribute]
    public enum DragDropKeyStates
    {
        None = 0,
        LeftMouseButton = 1,
        RightMouseButton = 2,
        ShiftKey = 4,
        ControlKey = 8,
        MiddleMouseButton = 16,
        AltKey = 32,
    }
    public sealed partial class DragEventArgs : System.Windows.RoutedEventArgs
    {
        internal DragEventArgs() { }
        public System.Windows.DragDropEffects AllowedEffects { get { throw null; } }
        public System.Windows.IDataObject Data { get { throw null; } }
        public System.Windows.DragDropEffects Effects { get { throw null; } set { } }
        public System.Windows.DragDropKeyStates KeyStates { get { throw null; } }
        public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { throw null; }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void DragEventHandler(object sender, System.Windows.DragEventArgs e);
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.DurationConverter))]
    public partial struct Duration
    {
        public Duration(System.TimeSpan timeSpan) { throw null; }
        public static System.Windows.Duration Automatic { get { throw null; } }
        public static System.Windows.Duration Forever { get { throw null; } }
        public bool HasTimeSpan { get { throw null; } }
        public System.TimeSpan TimeSpan { get { throw null; } }
        public System.Windows.Duration Add(System.Windows.Duration duration) { throw null; }
        public static int Compare(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public override bool Equals(object value) { throw null; }
        public bool Equals(System.Windows.Duration duration) { throw null; }
        public static bool Equals(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Windows.Duration operator +(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public static bool operator ==(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public static bool operator >(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public static bool operator >=(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public static implicit operator System.Windows.Duration(System.TimeSpan timeSpan) { throw null; }
        public static bool operator !=(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public static bool operator <(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public static bool operator <=(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public static System.Windows.Duration operator -(System.Windows.Duration t1, System.Windows.Duration t2) { throw null; }
        public static System.Windows.Duration operator +(System.Windows.Duration duration) { throw null; }
        public static System.Windows.Duration Plus(System.Windows.Duration duration) { throw null; }
        public System.Windows.Duration Subtract(System.Windows.Duration duration) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class DurationConverter : System.ComponentModel.TypeConverter
    {
        public DurationConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo cultureInfo, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { throw null; }
    }
    public static partial class EventManager
    {
        public static System.Windows.RoutedEvent[] GetRoutedEvents() { throw null; }
        public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner(System.Type ownerType) { throw null; }
        public static void RegisterClassHandler(System.Type classType, System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
        public static void RegisterClassHandler(System.Type classType, System.Windows.RoutedEvent routedEvent, System.Delegate handler, bool handledEventsToo) { }
        public static System.Windows.RoutedEvent RegisterRoutedEvent(string name, System.Windows.RoutingStrategy routingStrategy, System.Type handlerType, System.Type ownerType) { throw null; }
    }
    public partial class EventPrivateKey
    {
        public EventPrivateKey() { }
    }
    public sealed partial class EventRoute
    {
        public EventRoute(System.Windows.RoutedEvent routedEvent) { }
        public void Add(object target, System.Delegate handler, bool handledEventsToo) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object PeekBranchNode() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object PeekBranchSource() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object PopBranchNode() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void PushBranchNode(object node, object source) { }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public enum FlowDirection
    {
        LeftToRight = 0,
        RightToLeft = 1,
    }
    public enum FontCapitals
    {
        Normal = 0,
        AllSmallCaps = 1,
        SmallCaps = 2,
        AllPetiteCaps = 3,
        PetiteCaps = 4,
        Unicase = 5,
        Titling = 6,
    }
    public enum FontEastAsianLanguage
    {
        Normal = 0,
        Jis78 = 1,
        Jis83 = 2,
        Jis90 = 3,
        Jis04 = 4,
        HojoKanji = 5,
        NlcKanji = 6,
        Simplified = 7,
        Traditional = 8,
        TraditionalNames = 9,
    }
    public enum FontEastAsianWidths
    {
        Normal = 0,
        Proportional = 1,
        Full = 2,
        Half = 3,
        Third = 4,
        Quarter = 5,
    }
    public enum FontFraction
    {
        Normal = 0,
        Slashed = 1,
        Stacked = 2,
    }
    public enum FontNumeralAlignment
    {
        Normal = 0,
        Proportional = 1,
        Tabular = 2,
    }
    public enum FontNumeralStyle
    {
        Normal = 0,
        Lining = 1,
        OldStyle = 2,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.FontStretchConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None)]
    public partial struct FontStretch : System.IFormattable
    {
        public static int Compare(System.Windows.FontStretch left, System.Windows.FontStretch right) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.FontStretch obj) { throw null; }
        public static System.Windows.FontStretch FromOpenTypeStretch(int stretchValue) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.FontStretch left, System.Windows.FontStretch right) { throw null; }
        public static bool operator >(System.Windows.FontStretch left, System.Windows.FontStretch right) { throw null; }
        public static bool operator >=(System.Windows.FontStretch left, System.Windows.FontStretch right) { throw null; }
        public static bool operator !=(System.Windows.FontStretch left, System.Windows.FontStretch right) { throw null; }
        public static bool operator <(System.Windows.FontStretch left, System.Windows.FontStretch right) { throw null; }
        public static bool operator <=(System.Windows.FontStretch left, System.Windows.FontStretch right) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public int ToOpenTypeStretch() { throw null; }
        public override string ToString() { throw null; }
    }
    public sealed partial class FontStretchConverter : System.ComponentModel.TypeConverter
    {
        public FontStretchConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public static partial class FontStretches
    {
        public static System.Windows.FontStretch Condensed { get { throw null; } }
        public static System.Windows.FontStretch Expanded { get { throw null; } }
        public static System.Windows.FontStretch ExtraCondensed { get { throw null; } }
        public static System.Windows.FontStretch ExtraExpanded { get { throw null; } }
        public static System.Windows.FontStretch Medium { get { throw null; } }
        public static System.Windows.FontStretch Normal { get { throw null; } }
        public static System.Windows.FontStretch SemiCondensed { get { throw null; } }
        public static System.Windows.FontStretch SemiExpanded { get { throw null; } }
        public static System.Windows.FontStretch UltraCondensed { get { throw null; } }
        public static System.Windows.FontStretch UltraExpanded { get { throw null; } }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.FontStyleConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None)]
    public partial struct FontStyle : System.IFormattable
    {
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.FontStyle obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.FontStyle left, System.Windows.FontStyle right) { throw null; }
        public static bool operator !=(System.Windows.FontStyle left, System.Windows.FontStyle right) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
    }
    public sealed partial class FontStyleConverter : System.ComponentModel.TypeConverter
    {
        public FontStyleConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public static partial class FontStyles
    {
        public static System.Windows.FontStyle Italic { get { throw null; } }
        public static System.Windows.FontStyle Normal { get { throw null; } }
        public static System.Windows.FontStyle Oblique { get { throw null; } }
    }
    public enum FontVariants
    {
        Normal = 0,
        Superscript = 1,
        Subscript = 2,
        Ordinal = 3,
        Inferior = 4,
        Ruby = 5,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.FontWeightConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None)]
    public partial struct FontWeight : System.IFormattable
    {
        public static int Compare(System.Windows.FontWeight left, System.Windows.FontWeight right) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.FontWeight obj) { throw null; }
        public static System.Windows.FontWeight FromOpenTypeWeight(int weightValue) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.FontWeight left, System.Windows.FontWeight right) { throw null; }
        public static bool operator >(System.Windows.FontWeight left, System.Windows.FontWeight right) { throw null; }
        public static bool operator >=(System.Windows.FontWeight left, System.Windows.FontWeight right) { throw null; }
        public static bool operator !=(System.Windows.FontWeight left, System.Windows.FontWeight right) { throw null; }
        public static bool operator <(System.Windows.FontWeight left, System.Windows.FontWeight right) { throw null; }
        public static bool operator <=(System.Windows.FontWeight left, System.Windows.FontWeight right) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public int ToOpenTypeWeight() { throw null; }
        public override string ToString() { throw null; }
    }
    public sealed partial class FontWeightConverter : System.ComponentModel.TypeConverter
    {
        public FontWeightConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public static partial class FontWeights
    {
        public static System.Windows.FontWeight Black { get { throw null; } }
        public static System.Windows.FontWeight Bold { get { throw null; } }
        public static System.Windows.FontWeight DemiBold { get { throw null; } }
        public static System.Windows.FontWeight ExtraBlack { get { throw null; } }
        public static System.Windows.FontWeight ExtraBold { get { throw null; } }
        public static System.Windows.FontWeight ExtraLight { get { throw null; } }
        public static System.Windows.FontWeight Heavy { get { throw null; } }
        public static System.Windows.FontWeight Light { get { throw null; } }
        public static System.Windows.FontWeight Medium { get { throw null; } }
        public static System.Windows.FontWeight Normal { get { throw null; } }
        public static System.Windows.FontWeight Regular { get { throw null; } }
        public static System.Windows.FontWeight SemiBold { get { throw null; } }
        public static System.Windows.FontWeight Thin { get { throw null; } }
        public static System.Windows.FontWeight UltraBlack { get { throw null; } }
        public static System.Windows.FontWeight UltraBold { get { throw null; } }
        public static System.Windows.FontWeight UltraLight { get { throw null; } }
    }
    public partial class FreezableCollection<T> : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged where T : System.Windows.DependencyObject
    {
        public FreezableCollection() { }
        public FreezableCollection(System.Collections.Generic.IEnumerable<T> collection) { }
        public FreezableCollection(int capacity) { }
        public int Count { get { throw null; } }
        public T this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged { add { } remove { } }
        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
        public void Add(T value) { }
        public void Clear() { }
        public new System.Windows.FreezableCollection<T> Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.FreezableCollection<T> CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(T value) { throw null; }
        public void CopyTo(T[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.FreezableCollection<T>.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(T value) { throw null; }
        public void Insert(int index, T value) { }
        public bool Remove(T value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable
        {
            public T Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class GiveFeedbackEventArgs : System.Windows.RoutedEventArgs
    {
        internal GiveFeedbackEventArgs() { }
        public System.Windows.DragDropEffects Effects { get { throw null; } }
        public bool UseDefaultCursors { get { throw null; } set { } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void GiveFeedbackEventHandler(object sender, System.Windows.GiveFeedbackEventArgs e);
    public sealed partial class HwndDpiChangedEventArgs : System.ComponentModel.HandledEventArgs
    {
        internal HwndDpiChangedEventArgs() { }
        public System.Windows.DpiScale NewDpi { get { throw null; } }
        public System.Windows.DpiScale OldDpi { get { throw null; } }
        public System.Windows.Rect SuggestedRect { get { throw null; } }
    }
    public delegate void HwndDpiChangedEventHandler(object sender, System.Windows.HwndDpiChangedEventArgs e);
    public partial interface IContentHost
    {
        System.Collections.Generic.IEnumerator<System.Windows.IInputElement> HostedElements { get; }
        System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Rect> GetRectangles(System.Windows.ContentElement child);
        System.Windows.IInputElement InputHitTest(System.Windows.Point point);
        void OnChildDesiredSizeChanged(System.Windows.UIElement child);
    }
    public partial interface IDataObject
    {
        object GetData(string format);
        object GetData(string format, bool autoConvert);
        object GetData(System.Type format);
        bool GetDataPresent(string format);
        bool GetDataPresent(string format, bool autoConvert);
        bool GetDataPresent(System.Type format);
        string[] GetFormats();
        string[] GetFormats(bool autoConvert);
        void SetData(object data);
        void SetData(string format, object data);
        void SetData(string format, object data, bool autoConvert);
        void SetData(System.Type format, object data);
    }
    public partial interface IInputElement
    {
        bool Focusable { get; set; }
        bool IsEnabled { get; }
        bool IsKeyboardFocused { get; }
        bool IsKeyboardFocusWithin { get; }
        bool IsMouseCaptured { get; }
        bool IsMouseDirectlyOver { get; }
        bool IsMouseOver { get; }
        bool IsStylusCaptured { get; }
        bool IsStylusDirectlyOver { get; }
        bool IsStylusOver { get; }
        event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
        event System.Windows.Input.MouseEventHandler GotMouseCapture;
        event System.Windows.Input.StylusEventHandler GotStylusCapture;
        event System.Windows.Input.KeyEventHandler KeyDown;
        event System.Windows.Input.KeyEventHandler KeyUp;
        event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
        event System.Windows.Input.MouseEventHandler LostMouseCapture;
        event System.Windows.Input.StylusEventHandler LostStylusCapture;
        event System.Windows.Input.MouseEventHandler MouseEnter;
        event System.Windows.Input.MouseEventHandler MouseLeave;
        event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
        event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
        event System.Windows.Input.MouseEventHandler MouseMove;
        event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
        event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
        event System.Windows.Input.MouseWheelEventHandler MouseWheel;
        event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
        event System.Windows.Input.KeyEventHandler PreviewKeyDown;
        event System.Windows.Input.KeyEventHandler PreviewKeyUp;
        event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
        event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
        event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
        event System.Windows.Input.MouseEventHandler PreviewMouseMove;
        event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
        event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
        event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
        event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
        event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
        event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
        event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
        event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
        event System.Windows.Input.StylusEventHandler PreviewStylusMove;
        event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
        event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
        event System.Windows.Input.StylusEventHandler PreviewStylusUp;
        event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
        event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
        event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
        event System.Windows.Input.StylusDownEventHandler StylusDown;
        event System.Windows.Input.StylusEventHandler StylusEnter;
        event System.Windows.Input.StylusEventHandler StylusInAirMove;
        event System.Windows.Input.StylusEventHandler StylusInRange;
        event System.Windows.Input.StylusEventHandler StylusLeave;
        event System.Windows.Input.StylusEventHandler StylusMove;
        event System.Windows.Input.StylusEventHandler StylusOutOfRange;
        event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
        event System.Windows.Input.StylusEventHandler StylusUp;
        event System.Windows.Input.TextCompositionEventHandler TextInput;
        void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler);
        bool CaptureMouse();
        bool CaptureStylus();
        bool Focus();
        void RaiseEvent(System.Windows.RoutedEventArgs e);
        void ReleaseMouseCapture();
        void ReleaseStylusCapture();
        void RemoveHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler);
    }
    public partial class KeySplineConverter : System.ComponentModel.TypeConverter
    {
        public KeySplineConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptor, System.Type destinationType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { throw null; }
    }
    public partial class KeyTimeConverter : System.ComponentModel.TypeConverter
    {
        public KeyTimeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type type) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type type) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { throw null; }
    }
    public enum LineBreakCondition
    {
        BreakDesired = 0,
        BreakPossible = 1,
        BreakRestrained = 2,
        BreakAlways = 3,
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Field | System.AttributeTargets.Property | System.AttributeTargets.Struct, AllowMultiple = false, Inherited = true)]
    public sealed partial class LocalizabilityAttribute : System.Attribute
    {
        public LocalizabilityAttribute(System.Windows.LocalizationCategory category) { }
        public System.Windows.LocalizationCategory Category { get { throw null; } }
        public System.Windows.Modifiability Modifiability { get { throw null; } set { } }
        public System.Windows.Readability Readability { get { throw null; } set { } }
    }
    public enum LocalizationCategory
    {
        None = 0,
        Text = 1,
        Title = 2,
        Label = 3,
        Button = 4,
        CheckBox = 5,
        ComboBox = 6,
        ListBox = 7,
        Menu = 8,
        RadioButton = 9,
        ToolTip = 10,
        Hyperlink = 11,
        TextFlow = 12,
        XmlData = 13,
        Font = 14,
        Inherit = 15,
        Ignore = 16,
        NeverLocalize = 17,
    }
    public enum Modifiability
    {
        Unmodifiable = 0,
        Modifiable = 1,
        Inherit = 2,
    }
    public abstract partial class PresentationSource : System.Windows.Threading.DispatcherObject
    {
        protected PresentationSource() { }
        public System.Windows.Media.CompositionTarget CompositionTarget { get { throw null; } }
        public static System.Collections.IEnumerable CurrentSources { get { throw null; } }
        public abstract bool IsDisposed { get; }
        public abstract System.Windows.Media.Visual RootVisual { get; set; }
        public event System.EventHandler ContentRendered { add { } remove { } }
        protected void AddSource() { }
        public static void AddSourceChangedHandler(System.Windows.IInputElement element, System.Windows.SourceChangedEventHandler handler) { }
        protected void ClearContentRenderedListeners() { }
        public static System.Windows.PresentationSource FromDependencyObject(System.Windows.DependencyObject dependencyObject) { throw null; }
        public static System.Windows.PresentationSource FromVisual(System.Windows.Media.Visual visual) { throw null; }
        protected abstract System.Windows.Media.CompositionTarget GetCompositionTargetCore();
        protected void RemoveSource() { }
        public static void RemoveSourceChangedHandler(System.Windows.IInputElement e, System.Windows.SourceChangedEventHandler handler) { }
        protected void RootChanged(System.Windows.Media.Visual oldRoot, System.Windows.Media.Visual newRoot) { }
    }
    public sealed partial class QueryContinueDragEventArgs : System.Windows.RoutedEventArgs
    {
        internal QueryContinueDragEventArgs() { }
        public System.Windows.DragAction Action { get { throw null; } set { } }
        public bool EscapePressed { get { throw null; } }
        public System.Windows.DragDropKeyStates KeyStates { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void QueryContinueDragEventHandler(object sender, System.Windows.QueryContinueDragEventArgs e);
    public enum Readability
    {
        Unreadable = 0,
        Readable = 1,
        Inherit = 2,
    }
    [System.ComponentModel.TypeConverterAttribute("System.Windows.Markup.RoutedEventConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
    [System.Windows.Markup.ValueSerializerAttribute("System.Windows.Markup.RoutedEventValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
    public sealed partial class RoutedEvent
    {
        internal RoutedEvent() { }
        public System.Type HandlerType { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Type OwnerType { get { throw null; } }
        public System.Windows.RoutingStrategy RoutingStrategy { get { throw null; } }
        public System.Windows.RoutedEvent AddOwner(System.Type ownerType) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class RoutedEventArgs : System.EventArgs
    {
        public RoutedEventArgs() { }
        public RoutedEventArgs(System.Windows.RoutedEvent routedEvent) { }
        public RoutedEventArgs(System.Windows.RoutedEvent routedEvent, object source) { }
        public bool Handled { get { throw null; } set { } }
        public object OriginalSource { get { throw null; } }
        public System.Windows.RoutedEvent RoutedEvent { get { throw null; } set { } }
        public object Source { get { throw null; } set { } }
        protected virtual void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
        protected virtual void OnSetSource(object source) { }
    }
    public delegate void RoutedEventHandler(object sender, System.Windows.RoutedEventArgs e);
    public partial struct RoutedEventHandlerInfo
    {
        public System.Delegate Handler { get { throw null; } }
        public bool InvokeHandledEventsToo { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.RoutedEventHandlerInfo handlerInfo) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.RoutedEventHandlerInfo handlerInfo1, System.Windows.RoutedEventHandlerInfo handlerInfo2) { throw null; }
        public static bool operator !=(System.Windows.RoutedEventHandlerInfo handlerInfo1, System.Windows.RoutedEventHandlerInfo handlerInfo2) { throw null; }
    }
    public enum RoutingStrategy
    {
        Tunnel = 0,
        Bubble = 1,
        Direct = 2,
    }
    public partial class SizeChangedInfo
    {
        public SizeChangedInfo(System.Windows.UIElement element, System.Windows.Size previousSize, bool widthChanged, bool heightChanged) { }
        public bool HeightChanged { get { throw null; } }
        public System.Windows.Size NewSize { get { throw null; } }
        public System.Windows.Size PreviousSize { get { throw null; } }
        public bool WidthChanged { get { throw null; } }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public enum SizeToContent
    {
        Manual = 0,
        Width = 1,
        Height = 2,
        WidthAndHeight = 3,
    }
    public sealed partial class SourceChangedEventArgs : System.Windows.RoutedEventArgs
    {
        public SourceChangedEventArgs(System.Windows.PresentationSource oldSource, System.Windows.PresentationSource newSource) { }
        public SourceChangedEventArgs(System.Windows.PresentationSource oldSource, System.Windows.PresentationSource newSource, System.Windows.IInputElement element, System.Windows.IInputElement oldParent) { }
        public System.Windows.IInputElement Element { get { throw null; } }
        public System.Windows.PresentationSource NewSource { get { throw null; } }
        public System.Windows.IInputElement OldParent { get { throw null; } }
        public System.Windows.PresentationSource OldSource { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void SourceChangedEventHandler(object sender, System.Windows.SourceChangedEventArgs e);
    public partial class StrokeCollectionConverter : System.ComponentModel.TypeConverter
    {
        public StrokeCollectionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public enum TextAlignment
    {
        Left = 0,
        Right = 1,
        Center = 2,
        Justify = 3,
    }
    public enum TextDataFormat
    {
        Text = 0,
        UnicodeText = 1,
        Rtf = 2,
        Html = 3,
        CommaSeparatedValue = 4,
        Xaml = 5,
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None)]
    public sealed partial class TextDecoration : System.Windows.Media.Animation.Animatable
    {
        public static readonly System.Windows.DependencyProperty LocationProperty;
        public static readonly System.Windows.DependencyProperty PenOffsetProperty;
        public static readonly System.Windows.DependencyProperty PenOffsetUnitProperty;
        public static readonly System.Windows.DependencyProperty PenProperty;
        public static readonly System.Windows.DependencyProperty PenThicknessUnitProperty;
        public TextDecoration() { }
        public TextDecoration(System.Windows.TextDecorationLocation location, System.Windows.Media.Pen pen, double penOffset, System.Windows.TextDecorationUnit penOffsetUnit, System.Windows.TextDecorationUnit penThicknessUnit) { }
        public System.Windows.TextDecorationLocation Location { get { throw null; } set { } }
        public System.Windows.Media.Pen Pen { get { throw null; } set { } }
        public double PenOffset { get { throw null; } set { } }
        public System.Windows.TextDecorationUnit PenOffsetUnit { get { throw null; } set { } }
        public System.Windows.TextDecorationUnit PenThicknessUnit { get { throw null; } set { } }
        public new System.Windows.TextDecoration Clone() { throw null; }
        public new System.Windows.TextDecoration CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.TextDecorationCollectionConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public sealed partial class TextDecorationCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.TextDecoration>, System.Collections.Generic.IEnumerable<System.Windows.TextDecoration>, System.Collections.Generic.IList<System.Windows.TextDecoration>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public TextDecorationCollection() { }
        public TextDecorationCollection(System.Collections.Generic.IEnumerable<System.Windows.TextDecoration> collection) { }
        public TextDecorationCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.TextDecoration this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.TextDecoration>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        public void Add(System.Collections.Generic.IEnumerable<System.Windows.TextDecoration> textDecorations) { }
        public void Add(System.Windows.TextDecoration value) { }
        public void Clear() { }
        public new System.Windows.TextDecorationCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.TextDecorationCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.TextDecoration value) { throw null; }
        public void CopyTo(System.Windows.TextDecoration[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.TextDecorationCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.TextDecoration value) { throw null; }
        public void Insert(int index, System.Windows.TextDecoration value) { }
        public bool Remove(System.Windows.TextDecoration value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.TextDecoration> System.Collections.Generic.IEnumerable<System.Windows.TextDecoration>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public bool TryRemove(System.Collections.Generic.IEnumerable<System.Windows.TextDecoration> textDecorations, out System.Windows.TextDecorationCollection result) { throw null; }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.TextDecoration>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.TextDecoration Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class TextDecorationCollectionConverter : System.ComponentModel.TypeConverter
    {
        public TextDecorationCollectionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object input) { throw null; }
        public static new System.Windows.TextDecorationCollection ConvertFromString(string text) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public enum TextDecorationLocation
    {
        Underline = 0,
        OverLine = 1,
        Strikethrough = 2,
        Baseline = 3,
    }
    public static partial class TextDecorations
    {
        public static System.Windows.TextDecorationCollection Baseline { get { throw null; } }
        public static System.Windows.TextDecorationCollection OverLine { get { throw null; } }
        public static System.Windows.TextDecorationCollection Strikethrough { get { throw null; } }
        public static System.Windows.TextDecorationCollection Underline { get { throw null; } }
    }
    public enum TextDecorationUnit
    {
        FontRecommended = 0,
        FontRenderingEmSize = 1,
        Pixel = 2,
    }
    public enum TextMarkerStyle
    {
        None = 0,
        Disc = 1,
        Circle = 2,
        Square = 3,
        Box = 4,
        LowerRoman = 5,
        UpperRoman = 6,
        LowerLatin = 7,
        UpperLatin = 8,
        Decimal = 9,
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public enum TextTrimming
    {
        None = 0,
        CharacterEllipsis = 1,
        WordEllipsis = 2,
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public enum TextWrapping
    {
        WrapWithOverflow = 0,
        NoWrap = 1,
        Wrap = 2,
    }
    [System.Windows.Markup.UidPropertyAttribute("Uid")]
    public partial class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable
    {
        public static readonly System.Windows.DependencyProperty AllowDropProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
        public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;
        public static readonly System.Windows.DependencyProperty BitmapEffectProperty;
        public static readonly System.Windows.DependencyProperty CacheModeProperty;
        public static readonly System.Windows.DependencyProperty ClipProperty;
        public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;
        public static readonly System.Windows.RoutedEvent DragEnterEvent;
        public static readonly System.Windows.RoutedEvent DragLeaveEvent;
        public static readonly System.Windows.RoutedEvent DragOverEvent;
        public static readonly System.Windows.RoutedEvent DropEvent;
        public static readonly System.Windows.DependencyProperty EffectProperty;
        public static readonly System.Windows.DependencyProperty FocusableProperty;
        public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
        public static readonly System.Windows.RoutedEvent GotFocusEvent;
        public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
        public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
        public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
        public static readonly System.Windows.DependencyProperty IsEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsFocusedProperty;
        public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
        public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
        public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
        public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
        public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
        public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
        public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
        public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
        public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
        public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
        public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
        public static readonly System.Windows.DependencyProperty IsVisibleProperty;
        public static readonly System.Windows.RoutedEvent KeyDownEvent;
        public static readonly System.Windows.RoutedEvent KeyUpEvent;
        public static readonly System.Windows.RoutedEvent LostFocusEvent;
        public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
        public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
        public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
        public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;
        public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;
        public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;
        public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;
        public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;
        public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;
        public static readonly System.Windows.RoutedEvent MouseDownEvent;
        public static readonly System.Windows.RoutedEvent MouseEnterEvent;
        public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
        public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
        public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
        public static readonly System.Windows.RoutedEvent MouseMoveEvent;
        public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
        public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
        public static readonly System.Windows.RoutedEvent MouseUpEvent;
        public static readonly System.Windows.RoutedEvent MouseWheelEvent;
        public static readonly System.Windows.DependencyProperty OpacityMaskProperty;
        public static readonly System.Windows.DependencyProperty OpacityProperty;
        public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
        public static readonly System.Windows.RoutedEvent PreviewDropEvent;
        public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
        public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
        public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
        public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
        public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
        public static readonly System.Windows.RoutedEvent QueryCursorEvent;
        public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;
        public static readonly System.Windows.DependencyProperty RenderTransformProperty;
        public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;
        public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
        public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
        public static readonly System.Windows.RoutedEvent StylusDownEvent;
        public static readonly System.Windows.RoutedEvent StylusEnterEvent;
        public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
        public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
        public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
        public static readonly System.Windows.RoutedEvent StylusMoveEvent;
        public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
        public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
        public static readonly System.Windows.RoutedEvent StylusUpEvent;
        public static readonly System.Windows.RoutedEvent TextInputEvent;
        public static readonly System.Windows.RoutedEvent TouchDownEvent;
        public static readonly System.Windows.RoutedEvent TouchEnterEvent;
        public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
        public static readonly System.Windows.RoutedEvent TouchMoveEvent;
        public static readonly System.Windows.RoutedEvent TouchUpEvent;
        public static readonly System.Windows.DependencyProperty UidProperty;
        public static readonly System.Windows.DependencyProperty VisibilityProperty;
        public UIElement() { }
        public bool AllowDrop { get { throw null; } set { } }
        public bool AreAnyTouchesCaptured { get { throw null; } }
        public bool AreAnyTouchesCapturedWithin { get { throw null; } }
        public bool AreAnyTouchesDirectlyOver { get { throw null; } }
        public bool AreAnyTouchesOver { get { throw null; } }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get { throw null; } set { } }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get { throw null; } set { } }
        public System.Windows.Media.CacheMode CacheMode { get { throw null; } set { } }
        public System.Windows.Media.Geometry Clip { get { throw null; } set { } }
        public bool ClipToBounds { get { throw null; } set { } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Input.CommandBindingCollection CommandBindings { get { throw null; } }
        public System.Windows.Size DesiredSize { get { throw null; } }
        public System.Windows.Media.Effects.Effect Effect { get { throw null; } set { } }
        public bool Focusable { get { throw null; } set { } }
        public bool HasAnimatedProperties { get { throw null; } }
        protected internal virtual bool HasEffectiveKeyboardFocus { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Input.InputBindingCollection InputBindings { get { throw null; } }
        public bool IsArrangeValid { get { throw null; } }
        public bool IsEnabled { get { throw null; } set { } }
        protected virtual bool IsEnabledCore { get { throw null; } }
        public bool IsFocused { get { throw null; } }
        public bool IsHitTestVisible { get { throw null; } set { } }
        public bool IsInputMethodEnabled { get { throw null; } }
        public bool IsKeyboardFocused { get { throw null; } }
        public bool IsKeyboardFocusWithin { get { throw null; } }
        public bool IsManipulationEnabled { get { throw null; } set { } }
        public bool IsMeasureValid { get { throw null; } }
        public bool IsMouseCaptured { get { throw null; } }
        public bool IsMouseCaptureWithin { get { throw null; } }
        public bool IsMouseDirectlyOver { get { throw null; } }
        public bool IsMouseOver { get { throw null; } }
        public bool IsStylusCaptured { get { throw null; } }
        public bool IsStylusCaptureWithin { get { throw null; } }
        public bool IsStylusDirectlyOver { get { throw null; } }
        public bool IsStylusOver { get { throw null; } }
        public bool IsVisible { get { throw null; } }
        [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
        public double Opacity { get { throw null; } set { } }
        public System.Windows.Media.Brush OpacityMask { get { throw null; } set { } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.ObsoleteAttribute("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")]
        public int PersistId { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public System.Windows.Size RenderSize { get { throw null; } set { } }
        public System.Windows.Media.Transform RenderTransform { get { throw null; } set { } }
        public System.Windows.Point RenderTransformOrigin { get { throw null; } set { } }
        public bool SnapsToDevicePixels { get { throw null; } set { } }
        protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get { throw null; } }
        public string Uid { get { throw null; } set { } }
        [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
        public System.Windows.Visibility Visibility { get { throw null; } set { } }
        public event System.Windows.DragEventHandler DragEnter { add { } remove { } }
        public event System.Windows.DragEventHandler DragLeave { add { } remove { } }
        public event System.Windows.DragEventHandler DragOver { add { } remove { } }
        public event System.Windows.DragEventHandler Drop { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged { add { } remove { } }
        public event System.Windows.GiveFeedbackEventHandler GiveFeedback { add { } remove { } }
        public event System.Windows.RoutedEventHandler GotFocus { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler GotMouseCapture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler GotStylusCapture { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler KeyDown { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler KeyUp { add { } remove { } }
        public event System.EventHandler LayoutUpdated { add { } remove { } }
        public event System.Windows.RoutedEventHandler LostFocus { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler LostMouseCapture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler LostStylusCapture { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> ManipulationBoundaryFeedback { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> ManipulationCompleted { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> ManipulationDelta { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.ManipulationStartedEventArgs> ManipulationStarted { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.ManipulationStartingEventArgs> ManipulationStarting { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseDown { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler MouseEnter { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler MouseLeave { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler MouseMove { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseUp { add { } remove { } }
        public event System.Windows.Input.MouseWheelEventHandler MouseWheel { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDragEnter { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDragLeave { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDragOver { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDrop { add { } remove { } }
        public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler PreviewKeyDown { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler PreviewKeyUp { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler PreviewMouseMove { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp { add { } remove { } }
        public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel { add { } remove { } }
        public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp { add { } remove { } }
        public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusInRange { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange { add { } remove { } }
        public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusUp { add { } remove { } }
        public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp { add { } remove { } }
        public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag { add { } remove { } }
        public event System.Windows.Input.QueryCursorEventHandler QueryCursor { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp { add { } remove { } }
        public event System.Windows.Input.StylusDownEventHandler StylusDown { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusEnter { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusInAirMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusInRange { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusLeave { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusOutOfRange { add { } remove { } }
        public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusUp { add { } remove { } }
        public event System.Windows.Input.TextCompositionEventHandler TextInput { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchDown { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchMove { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchUp { add { } remove { } }
        public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
        public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler, bool handledEventsToo) { }
        public void AddToEventRoute(System.Windows.EventRoute route, System.Windows.RoutedEventArgs e) { }
        public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock) { }
        public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
        public void Arrange(System.Windows.Rect finalRect) { }
        protected virtual void ArrangeCore(System.Windows.Rect finalRect) { }
        public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation) { }
        public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
        public bool CaptureMouse() { throw null; }
        public bool CaptureStylus() { throw null; }
        public bool CaptureTouch(System.Windows.Input.TouchDevice touchDevice) { throw null; }
        public bool Focus() { throw null; }
        public object GetAnimationBaseValue(System.Windows.DependencyProperty dp) { throw null; }
        protected virtual System.Windows.Media.Geometry GetLayoutClip(System.Windows.Size layoutSlotSize) { throw null; }
        protected internal virtual System.Windows.DependencyObject GetUIParentCore() { throw null; }
        protected override System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { throw null; }
        protected override System.Windows.Media.HitTestResult HitTestCore(System.Windows.Media.PointHitTestParameters hitTestParameters) { throw null; }
        public System.Windows.IInputElement InputHitTest(System.Windows.Point point) { throw null; }
        public void InvalidateArrange() { }
        public void InvalidateMeasure() { }
        public void InvalidateVisual() { }
        public void Measure(System.Windows.Size availableSize) { }
        protected virtual System.Windows.Size MeasureCore(System.Windows.Size availableSize) { throw null; }
        public virtual bool MoveFocus(System.Windows.Input.TraversalRequest request) { throw null; }
        protected virtual void OnAccessKey(System.Windows.Input.AccessKeyEventArgs e) { }
        protected virtual void OnChildDesiredSizeChanged(System.Windows.UIElement child) { }
        protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected virtual void OnDragEnter(System.Windows.DragEventArgs e) { }
        protected virtual void OnDragLeave(System.Windows.DragEventArgs e) { }
        protected virtual void OnDragOver(System.Windows.DragEventArgs e) { }
        protected virtual void OnDrop(System.Windows.DragEventArgs e) { }
        protected virtual void OnGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
        protected virtual void OnGotFocus(System.Windows.RoutedEventArgs e) { }
        protected virtual void OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected virtual void OnGotMouseCapture(System.Windows.Input.MouseEventArgs e) { }
        protected virtual void OnGotStylusCapture(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnGotTouchCapture(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected virtual void OnKeyUp(System.Windows.Input.KeyEventArgs e) { }
        protected virtual void OnLostFocus(System.Windows.RoutedEventArgs e) { }
        protected virtual void OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected virtual void OnLostMouseCapture(System.Windows.Input.MouseEventArgs e) { }
        protected virtual void OnLostStylusCapture(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnLostTouchCapture(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) { }
        protected virtual void OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs e) { }
        protected virtual void OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs e) { }
        protected virtual void OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs e) { }
        protected virtual void OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs e) { }
        protected virtual void OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs e) { }
        protected virtual void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnMouseEnter(System.Windows.Input.MouseEventArgs e) { }
        protected virtual void OnMouseLeave(System.Windows.Input.MouseEventArgs e) { }
        protected virtual void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnMouseMove(System.Windows.Input.MouseEventArgs e) { }
        protected virtual void OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
        protected virtual void OnPreviewDragEnter(System.Windows.DragEventArgs e) { }
        protected virtual void OnPreviewDragLeave(System.Windows.DragEventArgs e) { }
        protected virtual void OnPreviewDragOver(System.Windows.DragEventArgs e) { }
        protected virtual void OnPreviewDrop(System.Windows.DragEventArgs e) { }
        protected virtual void OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
        protected virtual void OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected virtual void OnPreviewKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected virtual void OnPreviewKeyUp(System.Windows.Input.KeyEventArgs e) { }
        protected virtual void OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected virtual void OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnPreviewMouseMove(System.Windows.Input.MouseEventArgs e) { }
        protected virtual void OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected virtual void OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
        protected virtual void OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
        protected virtual void OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
        protected virtual void OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
        protected virtual void OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
        protected virtual void OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnPreviewStylusMove(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
        protected virtual void OnPreviewStylusUp(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
        protected virtual void OnPreviewTouchDown(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnPreviewTouchMove(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnPreviewTouchUp(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
        protected virtual void OnQueryCursor(System.Windows.Input.QueryCursorEventArgs e) { }
        protected virtual void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
        protected internal virtual void OnRenderSizeChanged(System.Windows.SizeChangedInfo info) { }
        protected virtual void OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
        protected virtual void OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
        protected virtual void OnStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
        protected virtual void OnStylusEnter(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnStylusInRange(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnStylusLeave(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnStylusMove(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
        protected virtual void OnStylusUp(System.Windows.Input.StylusEventArgs e) { }
        protected virtual void OnTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
        protected virtual void OnTouchDown(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnTouchEnter(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnTouchLeave(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnTouchMove(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnTouchUp(System.Windows.Input.TouchEventArgs e) { }
        protected internal override void OnVisualParentChanged(System.Windows.DependencyObject oldParent) { }
        public virtual System.Windows.DependencyObject PredictFocus(System.Windows.Input.FocusNavigationDirection direction) { throw null; }
        public void RaiseEvent(System.Windows.RoutedEventArgs e) { }
        public void ReleaseAllTouchCaptures() { }
        public void ReleaseMouseCapture() { }
        public void ReleaseStylusCapture() { }
        public bool ReleaseTouchCapture(System.Windows.Input.TouchDevice touchDevice) { throw null; }
        public void RemoveHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeCommandBindings() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeInputBindings() { throw null; }
        public System.Windows.Point TranslatePoint(System.Windows.Point point, System.Windows.UIElement relativeTo) { throw null; }
        public void UpdateLayout() { }
    }
    public abstract partial class UIElement3D : System.Windows.Media.Media3D.Visual3D, System.Windows.IInputElement
    {
        public static readonly System.Windows.DependencyProperty AllowDropProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
        public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
        public static readonly System.Windows.RoutedEvent DragEnterEvent;
        public static readonly System.Windows.RoutedEvent DragLeaveEvent;
        public static readonly System.Windows.RoutedEvent DragOverEvent;
        public static readonly System.Windows.RoutedEvent DropEvent;
        public static readonly System.Windows.DependencyProperty FocusableProperty;
        public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
        public static readonly System.Windows.RoutedEvent GotFocusEvent;
        public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
        public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
        public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
        public static readonly System.Windows.DependencyProperty IsEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsFocusedProperty;
        public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
        public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
        public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
        public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
        public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
        public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
        public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
        public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
        public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
        public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
        public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
        public static readonly System.Windows.DependencyProperty IsVisibleProperty;
        public static readonly System.Windows.RoutedEvent KeyDownEvent;
        public static readonly System.Windows.RoutedEvent KeyUpEvent;
        public static readonly System.Windows.RoutedEvent LostFocusEvent;
        public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
        public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
        public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
        public static readonly System.Windows.RoutedEvent MouseDownEvent;
        public static readonly System.Windows.RoutedEvent MouseEnterEvent;
        public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
        public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
        public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
        public static readonly System.Windows.RoutedEvent MouseMoveEvent;
        public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
        public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
        public static readonly System.Windows.RoutedEvent MouseUpEvent;
        public static readonly System.Windows.RoutedEvent MouseWheelEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
        public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
        public static readonly System.Windows.RoutedEvent PreviewDropEvent;
        public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
        public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
        public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
        public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
        public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
        public static readonly System.Windows.RoutedEvent QueryCursorEvent;
        public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
        public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
        public static readonly System.Windows.RoutedEvent StylusDownEvent;
        public static readonly System.Windows.RoutedEvent StylusEnterEvent;
        public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
        public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
        public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
        public static readonly System.Windows.RoutedEvent StylusMoveEvent;
        public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
        public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
        public static readonly System.Windows.RoutedEvent StylusUpEvent;
        public static readonly System.Windows.RoutedEvent TextInputEvent;
        public static readonly System.Windows.RoutedEvent TouchDownEvent;
        public static readonly System.Windows.RoutedEvent TouchEnterEvent;
        public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
        public static readonly System.Windows.RoutedEvent TouchMoveEvent;
        public static readonly System.Windows.RoutedEvent TouchUpEvent;
        public static readonly System.Windows.DependencyProperty VisibilityProperty;
        protected UIElement3D() { }
        public bool AllowDrop { get { throw null; } set { } }
        public bool AreAnyTouchesCaptured { get { throw null; } }
        public bool AreAnyTouchesCapturedWithin { get { throw null; } }
        public bool AreAnyTouchesDirectlyOver { get { throw null; } }
        public bool AreAnyTouchesOver { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Input.CommandBindingCollection CommandBindings { get { throw null; } }
        public bool Focusable { get { throw null; } set { } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Input.InputBindingCollection InputBindings { get { throw null; } }
        public bool IsEnabled { get { throw null; } set { } }
        protected virtual bool IsEnabledCore { get { throw null; } }
        public bool IsFocused { get { throw null; } }
        public bool IsHitTestVisible { get { throw null; } set { } }
        public bool IsInputMethodEnabled { get { throw null; } }
        public bool IsKeyboardFocused { get { throw null; } }
        public bool IsKeyboardFocusWithin { get { throw null; } }
        public bool IsMouseCaptured { get { throw null; } }
        public bool IsMouseCaptureWithin { get { throw null; } }
        public bool IsMouseDirectlyOver { get { throw null; } }
        public bool IsMouseOver { get { throw null; } }
        public bool IsStylusCaptured { get { throw null; } }
        public bool IsStylusCaptureWithin { get { throw null; } }
        public bool IsStylusDirectlyOver { get { throw null; } }
        public bool IsStylusOver { get { throw null; } }
        public bool IsVisible { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get { throw null; } }
        [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
        public System.Windows.Visibility Visibility { get { throw null; } set { } }
        public event System.Windows.DragEventHandler DragEnter { add { } remove { } }
        public event System.Windows.DragEventHandler DragLeave { add { } remove { } }
        public event System.Windows.DragEventHandler DragOver { add { } remove { } }
        public event System.Windows.DragEventHandler Drop { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged { add { } remove { } }
        public event System.Windows.GiveFeedbackEventHandler GiveFeedback { add { } remove { } }
        public event System.Windows.RoutedEventHandler GotFocus { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler GotMouseCapture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler GotStylusCapture { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged { add { } remove { } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler KeyDown { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler KeyUp { add { } remove { } }
        public event System.Windows.RoutedEventHandler LostFocus { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler LostMouseCapture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler LostStylusCapture { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseDown { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler MouseEnter { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler MouseLeave { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler MouseMove { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler MouseUp { add { } remove { } }
        public event System.Windows.Input.MouseWheelEventHandler MouseWheel { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDragEnter { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDragLeave { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDragOver { add { } remove { } }
        public event System.Windows.DragEventHandler PreviewDrop { add { } remove { } }
        public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler PreviewKeyDown { add { } remove { } }
        public event System.Windows.Input.KeyEventHandler PreviewKeyUp { add { } remove { } }
        public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseEventHandler PreviewMouseMove { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp { add { } remove { } }
        public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp { add { } remove { } }
        public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel { add { } remove { } }
        public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp { add { } remove { } }
        public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusInRange { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange { add { } remove { } }
        public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler PreviewStylusUp { add { } remove { } }
        public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp { add { } remove { } }
        public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag { add { } remove { } }
        public event System.Windows.Input.QueryCursorEventHandler QueryCursor { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown { add { } remove { } }
        public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp { add { } remove { } }
        public event System.Windows.Input.StylusDownEventHandler StylusDown { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusEnter { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusInAirMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusInRange { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusLeave { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusMove { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusOutOfRange { add { } remove { } }
        public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture { add { } remove { } }
        public event System.Windows.Input.StylusEventHandler StylusUp { add { } remove { } }
        public event System.Windows.Input.TextCompositionEventHandler TextInput { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchDown { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchMove { add { } remove { } }
        public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchUp { add { } remove { } }
        public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
        public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler, bool handledEventsToo) { }
        public void AddToEventRoute(System.Windows.EventRoute route, System.Windows.RoutedEventArgs e) { }
        public bool CaptureMouse() { throw null; }
        public bool CaptureStylus() { throw null; }
        public bool CaptureTouch(System.Windows.Input.TouchDevice touchDevice) { throw null; }
        public bool Focus() { throw null; }
        protected internal System.Windows.DependencyObject GetUIParentCore() { throw null; }
        public void InvalidateModel() { }
        public virtual bool MoveFocus(System.Windows.Input.TraversalRequest request) { throw null; }
        protected virtual void OnAccessKey(System.Windows.Input.AccessKeyEventArgs e) { }
        protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected internal virtual void OnDragEnter(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnDragLeave(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnDragOver(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnDrop(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
        protected virtual void OnGotFocus(System.Windows.RoutedEventArgs e) { }
        protected internal virtual void OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected internal virtual void OnGotMouseCapture(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnGotStylusCapture(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnGotTouchCapture(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected virtual void OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
        protected internal virtual void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected internal virtual void OnKeyUp(System.Windows.Input.KeyEventArgs e) { }
        protected virtual void OnLostFocus(System.Windows.RoutedEventArgs e) { }
        protected internal virtual void OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected internal virtual void OnLostMouseCapture(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnLostStylusCapture(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnLostTouchCapture(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseEnter(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnMouseLeave(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseMove(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
        protected internal virtual void OnPreviewDragEnter(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnPreviewDragLeave(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnPreviewDragOver(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnPreviewDrop(System.Windows.DragEventArgs e) { }
        protected internal virtual void OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
        protected internal virtual void OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected internal virtual void OnPreviewKeyDown(System.Windows.Input.KeyEventArgs e) { }
        protected internal virtual void OnPreviewKeyUp(System.Windows.Input.KeyEventArgs e) { }
        protected internal virtual void OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
        protected internal virtual void OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseMove(System.Windows.Input.MouseEventArgs e) { }
        protected internal virtual void OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
        protected internal virtual void OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
        protected internal virtual void OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
        protected internal virtual void OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
        protected internal virtual void OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
        protected internal virtual void OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
        protected internal virtual void OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewStylusMove(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
        protected internal virtual void OnPreviewStylusUp(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
        protected internal virtual void OnPreviewTouchDown(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnPreviewTouchMove(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnPreviewTouchUp(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
        protected internal virtual void OnQueryCursor(System.Windows.Input.QueryCursorEventArgs e) { }
        protected internal virtual void OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
        protected internal virtual void OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
        protected internal virtual void OnStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
        protected internal virtual void OnStylusEnter(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusInRange(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusLeave(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusMove(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
        protected internal virtual void OnStylusUp(System.Windows.Input.StylusEventArgs e) { }
        protected internal virtual void OnTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
        protected internal virtual void OnTouchDown(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnTouchEnter(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnTouchLeave(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnTouchMove(System.Windows.Input.TouchEventArgs e) { }
        protected internal virtual void OnTouchUp(System.Windows.Input.TouchEventArgs e) { }
        protected virtual void OnUpdateModel() { }
        protected internal override void OnVisualParentChanged(System.Windows.DependencyObject oldParent) { }
        public virtual System.Windows.DependencyObject PredictFocus(System.Windows.Input.FocusNavigationDirection direction) { throw null; }
        public void RaiseEvent(System.Windows.RoutedEventArgs e) { }
        public void ReleaseAllTouchCaptures() { }
        public void ReleaseMouseCapture() { }
        public void ReleaseStylusCapture() { }
        public bool ReleaseTouchCapture(System.Windows.Input.TouchDevice touchDevice) { throw null; }
        public void RemoveHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeCommandBindings() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeInputBindings() { throw null; }
    }
    public partial class UIPropertyMetadata : System.Windows.PropertyMetadata
    {
        public UIPropertyMetadata() { }
        public UIPropertyMetadata(object defaultValue) { }
        public UIPropertyMetadata(object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback) { }
        public UIPropertyMetadata(object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback) { }
        public UIPropertyMetadata(object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) { }
        public UIPropertyMetadata(System.Windows.PropertyChangedCallback propertyChangedCallback) { }
        public bool IsAnimationProhibited { get { throw null; } set { } }
    }
    public enum Visibility : byte
    {
        Visible = (byte)0,
        Hidden = (byte)1,
        Collapsed = (byte)2,
    }
}
namespace System.Windows.Automation
{
    public enum AutomationLiveSetting
    {
        Off = 0,
        Polite = 1,
        Assertive = 2,
    }
    public static partial class AutomationProperties
    {
        public static readonly System.Windows.DependencyProperty AcceleratorKeyProperty;
        public static readonly System.Windows.DependencyProperty AccessKeyProperty;
        public static readonly System.Windows.DependencyProperty AutomationIdProperty;
        public static readonly System.Windows.DependencyProperty HelpTextProperty;
        public static readonly System.Windows.DependencyProperty IsColumnHeaderProperty;
        public static readonly System.Windows.DependencyProperty IsOffscreenBehaviorProperty;
        public static readonly System.Windows.DependencyProperty IsRequiredForFormProperty;
        public static readonly System.Windows.DependencyProperty IsRowHeaderProperty;
        public static readonly System.Windows.DependencyProperty ItemStatusProperty;
        public static readonly System.Windows.DependencyProperty ItemTypeProperty;
        public static readonly System.Windows.DependencyProperty LabeledByProperty;
        public static readonly System.Windows.DependencyProperty LiveSettingProperty;
        public static readonly System.Windows.DependencyProperty NameProperty;
        public static readonly System.Windows.DependencyProperty PositionInSetProperty;
        public static readonly System.Windows.DependencyProperty SizeOfSetProperty;
        public static string GetAcceleratorKey(System.Windows.DependencyObject element) { throw null; }
        public static string GetAccessKey(System.Windows.DependencyObject element) { throw null; }
        public static string GetAutomationId(System.Windows.DependencyObject element) { throw null; }
        public static string GetHelpText(System.Windows.DependencyObject element) { throw null; }
        public static bool GetIsColumnHeader(System.Windows.DependencyObject element) { throw null; }
        public static System.Windows.Automation.IsOffscreenBehavior GetIsOffscreenBehavior(System.Windows.DependencyObject element) { throw null; }
        public static bool GetIsRequiredForForm(System.Windows.DependencyObject element) { throw null; }
        public static bool GetIsRowHeader(System.Windows.DependencyObject element) { throw null; }
        public static string GetItemStatus(System.Windows.DependencyObject element) { throw null; }
        public static string GetItemType(System.Windows.DependencyObject element) { throw null; }
        public static System.Windows.UIElement GetLabeledBy(System.Windows.DependencyObject element) { throw null; }
        public static System.Windows.Automation.AutomationLiveSetting GetLiveSetting(System.Windows.DependencyObject element) { throw null; }
        public static string GetName(System.Windows.DependencyObject element) { throw null; }
        public static int GetPositionInSet(System.Windows.DependencyObject element) { throw null; }
        public static int GetSizeOfSet(System.Windows.DependencyObject element) { throw null; }
        public static void SetAcceleratorKey(System.Windows.DependencyObject element, string value) { }
        public static void SetAccessKey(System.Windows.DependencyObject element, string value) { }
        public static void SetAutomationId(System.Windows.DependencyObject element, string value) { }
        public static void SetHelpText(System.Windows.DependencyObject element, string value) { }
        public static void SetIsColumnHeader(System.Windows.DependencyObject element, bool value) { }
        public static void SetIsOffscreenBehavior(System.Windows.DependencyObject element, System.Windows.Automation.IsOffscreenBehavior value) { }
        public static void SetIsRequiredForForm(System.Windows.DependencyObject element, bool value) { }
        public static void SetIsRowHeader(System.Windows.DependencyObject element, bool value) { }
        public static void SetItemStatus(System.Windows.DependencyObject element, string value) { }
        public static void SetItemType(System.Windows.DependencyObject element, string value) { }
        public static void SetLabeledBy(System.Windows.DependencyObject element, System.Windows.UIElement value) { }
        public static void SetLiveSetting(System.Windows.DependencyObject element, System.Windows.Automation.AutomationLiveSetting value) { }
        public static void SetName(System.Windows.DependencyObject element, string value) { }
        public static void SetPositionInSet(System.Windows.DependencyObject element, int value) { }
        public static void SetSizeOfSet(System.Windows.DependencyObject element, int value) { }
    }
    public enum IsOffscreenBehavior
    {
        Default = 0,
        Onscreen = 1,
        Offscreen = 2,
        FromClip = 3,
    }
}
namespace System.Windows.Automation.Peers
{
    public enum AutomationControlType
    {
        Button = 0,
        Calendar = 1,
        CheckBox = 2,
        ComboBox = 3,
        Edit = 4,
        Hyperlink = 5,
        Image = 6,
        ListItem = 7,
        List = 8,
        Menu = 9,
        MenuBar = 10,
        MenuItem = 11,
        ProgressBar = 12,
        RadioButton = 13,
        ScrollBar = 14,
        Slider = 15,
        Spinner = 16,
        StatusBar = 17,
        Tab = 18,
        TabItem = 19,
        Text = 20,
        ToolBar = 21,
        ToolTip = 22,
        Tree = 23,
        TreeItem = 24,
        Custom = 25,
        Group = 26,
        Thumb = 27,
        DataGrid = 28,
        DataItem = 29,
        Document = 30,
        SplitButton = 31,
        Window = 32,
        Pane = 33,
        Header = 34,
        HeaderItem = 35,
        Table = 36,
        TitleBar = 37,
        Separator = 38,
    }
    public enum AutomationEvents
    {
        ToolTipOpened = 0,
        ToolTipClosed = 1,
        MenuOpened = 2,
        MenuClosed = 3,
        AutomationFocusChanged = 4,
        InvokePatternOnInvoked = 5,
        SelectionItemPatternOnElementAddedToSelection = 6,
        SelectionItemPatternOnElementRemovedFromSelection = 7,
        SelectionItemPatternOnElementSelected = 8,
        SelectionPatternOnInvalidated = 9,
        TextPatternOnTextSelectionChanged = 10,
        TextPatternOnTextChanged = 11,
        AsyncContentLoaded = 12,
        PropertyChanged = 13,
        StructureChanged = 14,
        InputReachedTarget = 15,
        InputReachedOtherElement = 16,
        InputDiscarded = 17,
        LiveRegionChanged = 18,
    }
    public enum AutomationOrientation
    {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
    }
    public abstract partial class AutomationPeer : System.Windows.Threading.DispatcherObject
    {
        protected AutomationPeer() { }
        public System.Windows.Automation.Peers.AutomationPeer EventsSource { get { throw null; } set { } }
        protected internal virtual bool IsHwndHost { get { throw null; } }
        public string GetAcceleratorKey() { throw null; }
        protected abstract string GetAcceleratorKeyCore();
        public string GetAccessKey() { throw null; }
        protected abstract string GetAccessKeyCore();
        public System.Windows.Automation.Peers.AutomationControlType GetAutomationControlType() { throw null; }
        protected abstract System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore();
        public string GetAutomationId() { throw null; }
        protected abstract string GetAutomationIdCore();
        public System.Windows.Rect GetBoundingRectangle() { throw null; }
        protected abstract System.Windows.Rect GetBoundingRectangleCore();
        public System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildren() { throw null; }
        protected abstract System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore();
        public string GetClassName() { throw null; }
        protected abstract string GetClassNameCore();
        public System.Windows.Point GetClickablePoint() { throw null; }
        protected abstract System.Windows.Point GetClickablePointCore();
        public System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetControlledPeers() { throw null; }
        protected virtual System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetControlledPeersCore() { throw null; }
        public string GetHelpText() { throw null; }
        protected abstract string GetHelpTextCore();
        protected virtual System.Windows.Automation.Peers.HostedWindowWrapper GetHostRawElementProviderCore() { throw null; }
        public string GetItemStatus() { throw null; }
        protected abstract string GetItemStatusCore();
        public string GetItemType() { throw null; }
        protected abstract string GetItemTypeCore();
        public System.Windows.Automation.Peers.AutomationPeer GetLabeledBy() { throw null; }
        protected abstract System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore();
        public System.Windows.Automation.AutomationLiveSetting GetLiveSetting() { throw null; }
        protected virtual System.Windows.Automation.AutomationLiveSetting GetLiveSettingCore() { throw null; }
        public string GetLocalizedControlType() { throw null; }
        protected virtual string GetLocalizedControlTypeCore() { throw null; }
        public string GetName() { throw null; }
        protected abstract string GetNameCore();
        public System.Windows.Automation.Peers.AutomationOrientation GetOrientation() { throw null; }
        protected abstract System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore();
        public System.Windows.Automation.Peers.AutomationPeer GetParent() { throw null; }
        public abstract object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface);
        public System.Windows.Automation.Peers.AutomationPeer GetPeerFromPoint(System.Windows.Point point) { throw null; }
        protected virtual System.Windows.Automation.Peers.AutomationPeer GetPeerFromPointCore(System.Windows.Point point) { throw null; }
        public int GetPositionInSet() { throw null; }
        protected virtual int GetPositionInSetCore() { throw null; }
        public int GetSizeOfSet() { throw null; }
        protected virtual int GetSizeOfSetCore() { throw null; }
        public bool HasKeyboardFocus() { throw null; }
        protected abstract bool HasKeyboardFocusCore();
        public void InvalidatePeer() { }
        public bool IsContentElement() { throw null; }
        protected abstract bool IsContentElementCore();
        public bool IsControlElement() { throw null; }
        protected abstract bool IsControlElementCore();
        public bool IsEnabled() { throw null; }
        protected abstract bool IsEnabledCore();
        public bool IsKeyboardFocusable() { throw null; }
        protected abstract bool IsKeyboardFocusableCore();
        public bool IsOffscreen() { throw null; }
        protected abstract bool IsOffscreenCore();
        public bool IsPassword() { throw null; }
        protected abstract bool IsPasswordCore();
        public bool IsRequiredForForm() { throw null; }
        protected abstract bool IsRequiredForFormCore();
        public static bool ListenerExists(System.Windows.Automation.Peers.AutomationEvents eventId) { throw null; }
        protected System.Windows.Automation.Peers.AutomationPeer PeerFromProvider(System.Windows.Automation.Provider.IRawElementProviderSimple provider) { throw null; }
        protected internal System.Windows.Automation.Provider.IRawElementProviderSimple ProviderFromPeer(System.Windows.Automation.Peers.AutomationPeer peer) { throw null; }
        public void RaiseAsyncContentLoadedEvent(System.Windows.Automation.AsyncContentLoadedEventArgs args) { }
        public void RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents eventId) { }
        public void RaisePropertyChangedEvent(System.Windows.Automation.AutomationProperty property, object oldValue, object newValue) { }
        public void ResetChildrenCache() { }
        public void SetFocus() { }
        protected abstract void SetFocusCore();
    }
    public partial class ContentElementAutomationPeer : System.Windows.Automation.Peers.AutomationPeer
    {
        public ContentElementAutomationPeer(System.Windows.ContentElement owner) { }
        public System.Windows.ContentElement Owner { get { throw null; } }
        public static System.Windows.Automation.Peers.AutomationPeer CreatePeerForElement(System.Windows.ContentElement element) { throw null; }
        public static System.Windows.Automation.Peers.AutomationPeer FromElement(System.Windows.ContentElement element) { throw null; }
        protected override string GetAcceleratorKeyCore() { throw null; }
        protected override string GetAccessKeyCore() { throw null; }
        protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string GetAutomationIdCore() { throw null; }
        protected override System.Windows.Rect GetBoundingRectangleCore() { throw null; }
        protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
        protected override System.Windows.Point GetClickablePointCore() { throw null; }
        protected override string GetHelpTextCore() { throw null; }
        protected override string GetItemStatusCore() { throw null; }
        protected override string GetItemTypeCore() { throw null; }
        protected override System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore() { throw null; }
        protected override System.Windows.Automation.AutomationLiveSetting GetLiveSettingCore() { throw null; }
        protected override string GetNameCore() { throw null; }
        protected override System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore() { throw null; }
        public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { throw null; }
        protected override int GetPositionInSetCore() { throw null; }
        protected override int GetSizeOfSetCore() { throw null; }
        protected override bool HasKeyboardFocusCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
        protected override bool IsEnabledCore() { throw null; }
        protected override bool IsKeyboardFocusableCore() { throw null; }
        protected override bool IsOffscreenCore() { throw null; }
        protected override bool IsPasswordCore() { throw null; }
        protected override bool IsRequiredForFormCore() { throw null; }
        protected override void SetFocusCore() { }
    }
    public partial class GenericRootAutomationPeer : System.Windows.Automation.Peers.UIElementAutomationPeer
    {
        public GenericRootAutomationPeer(System.Windows.UIElement owner) : base(default(System.Windows.UIElement)) { }
        protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override System.Windows.Rect GetBoundingRectangleCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
        protected override string GetNameCore() { throw null; }
    }
    public sealed partial class HostedWindowWrapper
    {
        public HostedWindowWrapper(System.IntPtr hwnd) { }
    }
    public enum PatternInterface
    {
        Invoke = 0,
        Selection = 1,
        Value = 2,
        RangeValue = 3,
        Scroll = 4,
        ScrollItem = 5,
        ExpandCollapse = 6,
        Grid = 7,
        GridItem = 8,
        MultipleView = 9,
        Window = 10,
        SelectionItem = 11,
        Dock = 12,
        Table = 13,
        TableItem = 14,
        Toggle = 15,
        Transform = 16,
        Text = 17,
        ItemContainer = 18,
        VirtualizedItem = 19,
        SynchronizedInput = 20,
    }
    public partial class UIElement3DAutomationPeer : System.Windows.Automation.Peers.AutomationPeer
    {
        public UIElement3DAutomationPeer(System.Windows.UIElement3D owner) { }
        public System.Windows.UIElement3D Owner { get { throw null; } }
        public static System.Windows.Automation.Peers.AutomationPeer CreatePeerForElement(System.Windows.UIElement3D element) { throw null; }
        public static System.Windows.Automation.Peers.AutomationPeer FromElement(System.Windows.UIElement3D element) { throw null; }
        protected override string GetAcceleratorKeyCore() { throw null; }
        protected override string GetAccessKeyCore() { throw null; }
        protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string GetAutomationIdCore() { throw null; }
        protected override System.Windows.Rect GetBoundingRectangleCore() { throw null; }
        protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
        protected override System.Windows.Point GetClickablePointCore() { throw null; }
        protected override string GetHelpTextCore() { throw null; }
        protected override string GetItemStatusCore() { throw null; }
        protected override string GetItemTypeCore() { throw null; }
        protected override System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore() { throw null; }
        protected override System.Windows.Automation.AutomationLiveSetting GetLiveSettingCore() { throw null; }
        protected override string GetNameCore() { throw null; }
        protected override System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore() { throw null; }
        public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { throw null; }
        protected override int GetPositionInSetCore() { throw null; }
        protected override int GetSizeOfSetCore() { throw null; }
        protected override bool HasKeyboardFocusCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
        protected override bool IsEnabledCore() { throw null; }
        protected override bool IsKeyboardFocusableCore() { throw null; }
        protected override bool IsOffscreenCore() { throw null; }
        protected override bool IsPasswordCore() { throw null; }
        protected override bool IsRequiredForFormCore() { throw null; }
        protected override void SetFocusCore() { }
    }
    public partial class UIElementAutomationPeer : System.Windows.Automation.Peers.AutomationPeer
    {
        public UIElementAutomationPeer(System.Windows.UIElement owner) { }
        public System.Windows.UIElement Owner { get { throw null; } }
        public static System.Windows.Automation.Peers.AutomationPeer CreatePeerForElement(System.Windows.UIElement element) { throw null; }
        public static System.Windows.Automation.Peers.AutomationPeer FromElement(System.Windows.UIElement element) { throw null; }
        protected override string GetAcceleratorKeyCore() { throw null; }
        protected override string GetAccessKeyCore() { throw null; }
        protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string GetAutomationIdCore() { throw null; }
        protected override System.Windows.Rect GetBoundingRectangleCore() { throw null; }
        protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
        protected override System.Windows.Point GetClickablePointCore() { throw null; }
        protected override string GetHelpTextCore() { throw null; }
        protected override string GetItemStatusCore() { throw null; }
        protected override string GetItemTypeCore() { throw null; }
        protected override System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore() { throw null; }
        protected override System.Windows.Automation.AutomationLiveSetting GetLiveSettingCore() { throw null; }
        protected override string GetNameCore() { throw null; }
        protected override System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore() { throw null; }
        public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { throw null; }
        protected override int GetPositionInSetCore() { throw null; }
        protected override int GetSizeOfSetCore() { throw null; }
        protected override bool HasKeyboardFocusCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
        protected override bool IsEnabledCore() { throw null; }
        protected override bool IsKeyboardFocusableCore() { throw null; }
        protected override bool IsOffscreenCore() { throw null; }
        protected override bool IsPasswordCore() { throw null; }
        protected override bool IsRequiredForFormCore() { throw null; }
        protected override void SetFocusCore() { }
    }
}
namespace System.Windows.Diagnostics
{
    public static partial class VisualDiagnostics
    {
        public static event System.EventHandler<System.Windows.Diagnostics.VisualTreeChangeEventArgs> VisualTreeChanged { add { } remove { } }
        public static void DisableVisualTreeChanged() { }
        public static void EnableVisualTreeChanged() { }
        public static System.Windows.Diagnostics.XamlSourceInfo GetXamlSourceInfo(object obj) { throw null; }
    }
    public partial class VisualTreeChangeEventArgs : System.EventArgs
    {
        public VisualTreeChangeEventArgs(System.Windows.DependencyObject parent, System.Windows.DependencyObject child, int childIndex, System.Windows.Diagnostics.VisualTreeChangeType changeType) { }
        public System.Windows.Diagnostics.VisualTreeChangeType ChangeType { get { throw null; } }
        public System.Windows.DependencyObject Child { get { throw null; } }
        public int ChildIndex { get { throw null; } }
        public System.Windows.DependencyObject Parent { get { throw null; } }
    }
    public enum VisualTreeChangeType
    {
        Add = 0,
        Remove = 1,
    }
    public partial class XamlSourceInfo
    {
        public XamlSourceInfo(System.Uri sourceUri, int lineNumber, int linePosition) { }
        public int LineNumber { get { throw null; } }
        public int LinePosition { get { throw null; } }
        public System.Uri SourceUri { get { throw null; } }
    }
}
namespace System.Windows.Documents
{
    public abstract partial class ContentPosition
    {
        public static readonly System.Windows.Documents.ContentPosition Missing;
        protected ContentPosition() { }
    }
    public partial class DocumentPage : System.IDisposable
    {
        public static readonly System.Windows.Documents.DocumentPage Missing;
        public DocumentPage(System.Windows.Media.Visual visual) { }
        public DocumentPage(System.Windows.Media.Visual visual, System.Windows.Size pageSize, System.Windows.Rect bleedBox, System.Windows.Rect contentBox) { }
        public virtual System.Windows.Rect BleedBox { get { throw null; } }
        public virtual System.Windows.Rect ContentBox { get { throw null; } }
        public virtual System.Windows.Size Size { get { throw null; } }
        public virtual System.Windows.Media.Visual Visual { get { throw null; } }
        public event System.EventHandler PageDestroyed { add { } remove { } }
        public virtual void Dispose() { }
        protected void OnPageDestroyed(System.EventArgs e) { }
        protected void SetBleedBox(System.Windows.Rect bleedBox) { }
        protected void SetContentBox(System.Windows.Rect contentBox) { }
        protected void SetSize(System.Windows.Size size) { }
        protected void SetVisual(System.Windows.Media.Visual visual) { }
    }
    public abstract partial class DocumentPaginator
    {
        protected DocumentPaginator() { }
        public abstract bool IsPageCountValid { get; }
        public abstract int PageCount { get; }
        public abstract System.Windows.Size PageSize { get; set; }
        public abstract System.Windows.Documents.IDocumentPaginatorSource Source { get; }
        public event System.ComponentModel.AsyncCompletedEventHandler ComputePageCountCompleted { add { } remove { } }
        public event System.Windows.Documents.GetPageCompletedEventHandler GetPageCompleted { add { } remove { } }
        public event System.Windows.Documents.PagesChangedEventHandler PagesChanged { add { } remove { } }
        public virtual void CancelAsync(object userState) { }
        public virtual void ComputePageCount() { }
        public virtual void ComputePageCountAsync() { }
        public virtual void ComputePageCountAsync(object userState) { }
        public abstract System.Windows.Documents.DocumentPage GetPage(int pageNumber);
        public virtual void GetPageAsync(int pageNumber) { }
        public virtual void GetPageAsync(int pageNumber, object userState) { }
        protected virtual void OnComputePageCountCompleted(System.ComponentModel.AsyncCompletedEventArgs e) { }
        protected virtual void OnGetPageCompleted(System.Windows.Documents.GetPageCompletedEventArgs e) { }
        protected virtual void OnPagesChanged(System.Windows.Documents.PagesChangedEventArgs e) { }
    }
    public abstract partial class DynamicDocumentPaginator : System.Windows.Documents.DocumentPaginator
    {
        protected DynamicDocumentPaginator() { }
        public virtual bool IsBackgroundPaginationEnabled { get { throw null; } set { } }
        public event System.Windows.Documents.GetPageNumberCompletedEventHandler GetPageNumberCompleted { add { } remove { } }
        public event System.EventHandler PaginationCompleted { add { } remove { } }
        public event System.Windows.Documents.PaginationProgressEventHandler PaginationProgress { add { } remove { } }
        public abstract System.Windows.Documents.ContentPosition GetObjectPosition(object value);
        public abstract int GetPageNumber(System.Windows.Documents.ContentPosition contentPosition);
        public virtual void GetPageNumberAsync(System.Windows.Documents.ContentPosition contentPosition) { }
        public virtual void GetPageNumberAsync(System.Windows.Documents.ContentPosition contentPosition, object userState) { }
        public abstract System.Windows.Documents.ContentPosition GetPagePosition(System.Windows.Documents.DocumentPage page);
        protected virtual void OnGetPageNumberCompleted(System.Windows.Documents.GetPageNumberCompletedEventArgs e) { }
        protected virtual void OnPaginationCompleted(System.EventArgs e) { }
        protected virtual void OnPaginationProgress(System.Windows.Documents.PaginationProgressEventArgs e) { }
    }
    public partial class GetPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        public GetPageCompletedEventArgs(System.Windows.Documents.DocumentPage page, int pageNumber, System.Exception error, bool cancelled, object userState) : base(default(System.Exception), default(bool), default(object)) { }
        public System.Windows.Documents.DocumentPage DocumentPage { get { throw null; } }
        public int PageNumber { get { throw null; } }
    }
    public delegate void GetPageCompletedEventHandler(object sender, System.Windows.Documents.GetPageCompletedEventArgs e);
    public partial class GetPageNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        public GetPageNumberCompletedEventArgs(System.Windows.Documents.ContentPosition contentPosition, int pageNumber, System.Exception error, bool cancelled, object userState) : base(default(System.Exception), default(bool), default(object)) { }
        public System.Windows.Documents.ContentPosition ContentPosition { get { throw null; } }
        public int PageNumber { get { throw null; } }
    }
    public delegate void GetPageNumberCompletedEventHandler(object sender, System.Windows.Documents.GetPageNumberCompletedEventArgs e);
    public partial interface IDocumentPaginatorSource
    {
        System.Windows.Documents.DocumentPaginator DocumentPaginator { get; }
    }
    public partial class PagesChangedEventArgs : System.EventArgs
    {
        public PagesChangedEventArgs(int start, int count) { }
        public int Count { get { throw null; } }
        public int Start { get { throw null; } }
    }
    public delegate void PagesChangedEventHandler(object sender, System.Windows.Documents.PagesChangedEventArgs e);
    public partial class PaginationProgressEventArgs : System.EventArgs
    {
        public PaginationProgressEventArgs(int start, int count) { }
        public int Count { get { throw null; } }
        public int Start { get { throw null; } }
    }
    public delegate void PaginationProgressEventHandler(object sender, System.Windows.Documents.PaginationProgressEventArgs e);
}
namespace System.Windows.Ink
{
    public enum ApplicationGesture
    {
        AllGestures = 0,
        NoGesture = 61440,
        ScratchOut = 61441,
        Triangle = 61442,
        Square = 61443,
        Star = 61444,
        Check = 61445,
        Curlicue = 61456,
        DoubleCurlicue = 61457,
        Circle = 61472,
        DoubleCircle = 61473,
        SemicircleLeft = 61480,
        SemicircleRight = 61481,
        ChevronUp = 61488,
        ChevronDown = 61489,
        ChevronLeft = 61490,
        ChevronRight = 61491,
        ArrowUp = 61496,
        ArrowDown = 61497,
        ArrowLeft = 61498,
        ArrowRight = 61499,
        Up = 61528,
        Down = 61529,
        Left = 61530,
        Right = 61531,
        UpDown = 61536,
        DownUp = 61537,
        LeftRight = 61538,
        RightLeft = 61539,
        UpLeftLong = 61540,
        UpRightLong = 61541,
        DownLeftLong = 61542,
        DownRightLong = 61543,
        UpLeft = 61544,
        UpRight = 61545,
        DownLeft = 61546,
        DownRight = 61547,
        LeftUp = 61548,
        LeftDown = 61549,
        RightUp = 61550,
        RightDown = 61551,
        Exclamation = 61604,
        Tap = 61680,
        DoubleTap = 61681,
    }
    public static partial class DrawingAttributeIds
    {
        public static readonly System.Guid Color;
        public static readonly System.Guid DrawingFlags;
        public static readonly System.Guid IsHighlighter;
        public static readonly System.Guid StylusHeight;
        public static readonly System.Guid StylusTip;
        public static readonly System.Guid StylusTipTransform;
        public static readonly System.Guid StylusWidth;
    }
    public partial class DrawingAttributes : System.ComponentModel.INotifyPropertyChanged
    {
        public static readonly double MaxHeight;
        public static readonly double MaxWidth;
        public static readonly double MinHeight;
        public static readonly double MinWidth;
        public DrawingAttributes() { }
        public System.Windows.Media.Color Color { get { throw null; } set { } }
        public bool FitToCurve { get { throw null; } set { } }
        public double Height { get { throw null; } set { } }
        public bool IgnorePressure { get { throw null; } set { } }
        public bool IsHighlighter { get { throw null; } set { } }
        public System.Windows.Ink.StylusTip StylusTip { get { throw null; } set { } }
        public System.Windows.Media.Matrix StylusTipTransform { get { throw null; } set { } }
        public double Width { get { throw null; } set { } }
        public event System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged { add { } remove { } }
        public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged { add { } remove { } }
        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
        public void AddPropertyData(System.Guid propertyDataId, object propertyData) { }
        public virtual System.Windows.Ink.DrawingAttributes Clone() { throw null; }
        public bool ContainsPropertyData(System.Guid propertyDataId) { throw null; }
        public override bool Equals(object o) { throw null; }
        public override int GetHashCode() { throw null; }
        public object GetPropertyData(System.Guid propertyDataId) { throw null; }
        public System.Guid[] GetPropertyDataIds() { throw null; }
        protected virtual void OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
        protected virtual void OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
        public static bool operator ==(System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second) { throw null; }
        public static bool operator !=(System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second) { throw null; }
        public void RemovePropertyData(System.Guid propertyDataId) { }
    }
    public partial class DrawingAttributesReplacedEventArgs : System.EventArgs
    {
        public DrawingAttributesReplacedEventArgs(System.Windows.Ink.DrawingAttributes newDrawingAttributes, System.Windows.Ink.DrawingAttributes previousDrawingAttributes) { }
        public System.Windows.Ink.DrawingAttributes NewDrawingAttributes { get { throw null; } }
        public System.Windows.Ink.DrawingAttributes PreviousDrawingAttributes { get { throw null; } }
    }
    public delegate void DrawingAttributesReplacedEventHandler(object sender, System.Windows.Ink.DrawingAttributesReplacedEventArgs e);
    public sealed partial class EllipseStylusShape : System.Windows.Ink.StylusShape
    {
        public EllipseStylusShape(double width, double height) { }
        public EllipseStylusShape(double width, double height, double rotation) { }
    }
    public partial class GestureRecognitionResult
    {
        internal GestureRecognitionResult() { }
        public System.Windows.Ink.ApplicationGesture ApplicationGesture { get { throw null; } }
        public System.Windows.Ink.RecognitionConfidence RecognitionConfidence { get { throw null; } }
    }
    public sealed partial class GestureRecognizer : System.Windows.DependencyObject, System.IDisposable
    {
        public GestureRecognizer() { }
        public GestureRecognizer(System.Collections.Generic.IEnumerable<System.Windows.Ink.ApplicationGesture> enabledApplicationGestures) { }
        public bool IsRecognizerAvailable { get { throw null; } }
        public void Dispose() { }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Ink.ApplicationGesture> GetEnabledGestures() { throw null; }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Ink.GestureRecognitionResult> Recognize(System.Windows.Ink.StrokeCollection strokes) { throw null; }
        public void SetEnabledGestures(System.Collections.Generic.IEnumerable<System.Windows.Ink.ApplicationGesture> applicationGestures) { }
    }
    public abstract partial class IncrementalHitTester
    {
        internal IncrementalHitTester() { }
        public bool IsValid { get { throw null; } }
        public void AddPoint(System.Windows.Point point) { }
        public void AddPoints(System.Collections.Generic.IEnumerable<System.Windows.Point> points) { }
        public void AddPoints(System.Windows.Input.StylusPointCollection stylusPoints) { }
        protected abstract void AddPointsCore(System.Collections.Generic.IEnumerable<System.Windows.Point> points);
        public void EndHitTesting() { }
    }
    public partial class IncrementalLassoHitTester : System.Windows.Ink.IncrementalHitTester
    {
        internal IncrementalLassoHitTester() { }
        public event System.Windows.Ink.LassoSelectionChangedEventHandler SelectionChanged { add { } remove { } }
        protected override void AddPointsCore(System.Collections.Generic.IEnumerable<System.Windows.Point> points) { }
        protected void OnSelectionChanged(System.Windows.Ink.LassoSelectionChangedEventArgs eventArgs) { }
    }
    public partial class IncrementalStrokeHitTester : System.Windows.Ink.IncrementalHitTester
    {
        internal IncrementalStrokeHitTester() { }
        public event System.Windows.Ink.StrokeHitEventHandler StrokeHit { add { } remove { } }
        protected override void AddPointsCore(System.Collections.Generic.IEnumerable<System.Windows.Point> points) { }
        protected void OnStrokeHit(System.Windows.Ink.StrokeHitEventArgs eventArgs) { }
    }
    public partial class LassoSelectionChangedEventArgs : System.EventArgs
    {
        internal LassoSelectionChangedEventArgs() { }
        public System.Windows.Ink.StrokeCollection DeselectedStrokes { get { throw null; } }
        public System.Windows.Ink.StrokeCollection SelectedStrokes { get { throw null; } }
    }
    public delegate void LassoSelectionChangedEventHandler(object sender, System.Windows.Ink.LassoSelectionChangedEventArgs e);
    public partial class PropertyDataChangedEventArgs : System.EventArgs
    {
        public PropertyDataChangedEventArgs(System.Guid propertyGuid, object newValue, object previousValue) { }
        public object NewValue { get { throw null; } }
        public object PreviousValue { get { throw null; } }
        public System.Guid PropertyGuid { get { throw null; } }
    }
    public delegate void PropertyDataChangedEventHandler(object sender, System.Windows.Ink.PropertyDataChangedEventArgs e);
    public enum RecognitionConfidence
    {
        Strong = 0,
        Intermediate = 1,
        Poor = 2,
    }
    public sealed partial class RectangleStylusShape : System.Windows.Ink.StylusShape
    {
        public RectangleStylusShape(double width, double height) { }
        public RectangleStylusShape(double width, double height, double rotation) { }
    }
    public partial class Stroke : System.ComponentModel.INotifyPropertyChanged
    {
        public Stroke(System.Windows.Input.StylusPointCollection stylusPoints) { }
        public Stroke(System.Windows.Input.StylusPointCollection stylusPoints, System.Windows.Ink.DrawingAttributes drawingAttributes) { }
        public System.Windows.Ink.DrawingAttributes DrawingAttributes { get { throw null; } set { } }
        public System.Windows.Input.StylusPointCollection StylusPoints { get { throw null; } set { } }
        public event System.Windows.Ink.PropertyDataChangedEventHandler DrawingAttributesChanged { add { } remove { } }
        public event System.Windows.Ink.DrawingAttributesReplacedEventHandler DrawingAttributesReplaced { add { } remove { } }
        public event System.EventHandler Invalidated { add { } remove { } }
        public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged { add { } remove { } }
        public event System.EventHandler StylusPointsChanged { add { } remove { } }
        public event System.Windows.Ink.StylusPointsReplacedEventHandler StylusPointsReplaced { add { } remove { } }
        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
        public void AddPropertyData(System.Guid propertyDataId, object propertyData) { }
        public virtual System.Windows.Ink.Stroke Clone() { throw null; }
        public bool ContainsPropertyData(System.Guid propertyDataId) { throw null; }
        public void Draw(System.Windows.Media.DrawingContext context) { }
        public void Draw(System.Windows.Media.DrawingContext drawingContext, System.Windows.Ink.DrawingAttributes drawingAttributes) { }
        protected virtual void DrawCore(System.Windows.Media.DrawingContext drawingContext, System.Windows.Ink.DrawingAttributes drawingAttributes) { }
        public System.Windows.Input.StylusPointCollection GetBezierStylusPoints() { throw null; }
        public virtual System.Windows.Rect GetBounds() { throw null; }
        public System.Windows.Ink.StrokeCollection GetClipResult(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints) { throw null; }
        public System.Windows.Ink.StrokeCollection GetClipResult(System.Windows.Rect bounds) { throw null; }
        public System.Windows.Ink.StrokeCollection GetEraseResult(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints) { throw null; }
        public System.Windows.Ink.StrokeCollection GetEraseResult(System.Collections.Generic.IEnumerable<System.Windows.Point> eraserPath, System.Windows.Ink.StylusShape eraserShape) { throw null; }
        public System.Windows.Ink.StrokeCollection GetEraseResult(System.Windows.Rect bounds) { throw null; }
        public System.Windows.Media.Geometry GetGeometry() { throw null; }
        public System.Windows.Media.Geometry GetGeometry(System.Windows.Ink.DrawingAttributes drawingAttributes) { throw null; }
        public object GetPropertyData(System.Guid propertyDataId) { throw null; }
        public System.Guid[] GetPropertyDataIds() { throw null; }
        public bool HitTest(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints, int percentageWithinLasso) { throw null; }
        public bool HitTest(System.Collections.Generic.IEnumerable<System.Windows.Point> path, System.Windows.Ink.StylusShape stylusShape) { throw null; }
        public bool HitTest(System.Windows.Point point) { throw null; }
        public bool HitTest(System.Windows.Point point, double diameter) { throw null; }
        public bool HitTest(System.Windows.Rect bounds, int percentageWithinBounds) { throw null; }
        protected virtual void OnDrawingAttributesChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
        protected virtual void OnDrawingAttributesReplaced(System.Windows.Ink.DrawingAttributesReplacedEventArgs e) { }
        protected virtual void OnInvalidated(System.EventArgs e) { }
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
        protected virtual void OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
        protected virtual void OnStylusPointsChanged(System.EventArgs e) { }
        protected virtual void OnStylusPointsReplaced(System.Windows.Ink.StylusPointsReplacedEventArgs e) { }
        public void RemovePropertyData(System.Guid propertyDataId) { }
        public virtual void Transform(System.Windows.Media.Matrix transformMatrix, bool applyToStylusTip) { }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.StrokeCollectionConverter))]
    public partial class StrokeCollection : System.Collections.ObjectModel.Collection<System.Windows.Ink.Stroke>, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged
    {
        public static readonly string InkSerializedFormat;
        public StrokeCollection() { }
        public StrokeCollection(System.Collections.Generic.IEnumerable<System.Windows.Ink.Stroke> strokes) { }
        public StrokeCollection(System.IO.Stream stream) { }
        public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged { add { } remove { } }
        public event System.Windows.Ink.StrokeCollectionChangedEventHandler StrokesChanged { add { } remove { } }
        event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged { add { } remove { } }
        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
        public void Add(System.Windows.Ink.StrokeCollection strokes) { }
        public void AddPropertyData(System.Guid propertyDataId, object propertyData) { }
        protected sealed override void ClearItems() { }
        public void Clip(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints) { }
        public void Clip(System.Windows.Rect bounds) { }
        public virtual System.Windows.Ink.StrokeCollection Clone() { throw null; }
        public bool ContainsPropertyData(System.Guid propertyDataId) { throw null; }
        public void Draw(System.Windows.Media.DrawingContext context) { }
        public void Erase(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints) { }
        public void Erase(System.Collections.Generic.IEnumerable<System.Windows.Point> eraserPath, System.Windows.Ink.StylusShape eraserShape) { }
        public void Erase(System.Windows.Rect bounds) { }
        public System.Windows.Rect GetBounds() { throw null; }
        public System.Windows.Ink.IncrementalLassoHitTester GetIncrementalLassoHitTester(int percentageWithinLasso) { throw null; }
        public System.Windows.Ink.IncrementalStrokeHitTester GetIncrementalStrokeHitTester(System.Windows.Ink.StylusShape eraserShape) { throw null; }
        public object GetPropertyData(System.Guid propertyDataId) { throw null; }
        public System.Guid[] GetPropertyDataIds() { throw null; }
        public System.Windows.Ink.StrokeCollection HitTest(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints, int percentageWithinLasso) { throw null; }
        public System.Windows.Ink.StrokeCollection HitTest(System.Collections.Generic.IEnumerable<System.Windows.Point> path, System.Windows.Ink.StylusShape stylusShape) { throw null; }
        public System.Windows.Ink.StrokeCollection HitTest(System.Windows.Point point) { throw null; }
        public System.Windows.Ink.StrokeCollection HitTest(System.Windows.Point point, double diameter) { throw null; }
        public System.Windows.Ink.StrokeCollection HitTest(System.Windows.Rect bounds, int percentageWithinBounds) { throw null; }
        public new int IndexOf(System.Windows.Ink.Stroke stroke) { throw null; }
        protected sealed override void InsertItem(int index, System.Windows.Ink.Stroke stroke) { }
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
        protected virtual void OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
        protected virtual void OnStrokesChanged(System.Windows.Ink.StrokeCollectionChangedEventArgs e) { }
        public void Remove(System.Windows.Ink.StrokeCollection strokes) { }
        protected sealed override void RemoveItem(int index) { }
        public void RemovePropertyData(System.Guid propertyDataId) { }
        public void Replace(System.Windows.Ink.Stroke strokeToReplace, System.Windows.Ink.StrokeCollection strokesToReplaceWith) { }
        public void Replace(System.Windows.Ink.StrokeCollection strokesToReplace, System.Windows.Ink.StrokeCollection strokesToReplaceWith) { }
        public void Save(System.IO.Stream stream) { }
        public virtual void Save(System.IO.Stream stream, bool compress) { }
        protected sealed override void SetItem(int index, System.Windows.Ink.Stroke stroke) { }
        public void Transform(System.Windows.Media.Matrix transformMatrix, bool applyToStylusTip) { }
    }
    public partial class StrokeCollectionChangedEventArgs : System.EventArgs
    {
        public StrokeCollectionChangedEventArgs(System.Windows.Ink.StrokeCollection added, System.Windows.Ink.StrokeCollection removed) { }
        public System.Windows.Ink.StrokeCollection Added { get { throw null; } }
        public System.Windows.Ink.StrokeCollection Removed { get { throw null; } }
    }
    public delegate void StrokeCollectionChangedEventHandler(object sender, System.Windows.Ink.StrokeCollectionChangedEventArgs e);
    public partial class StrokeHitEventArgs : System.EventArgs
    {
        internal StrokeHitEventArgs() { }
        public System.Windows.Ink.Stroke HitStroke { get { throw null; } }
        public System.Windows.Ink.StrokeCollection GetPointEraseResults() { throw null; }
    }
    public delegate void StrokeHitEventHandler(object sender, System.Windows.Ink.StrokeHitEventArgs e);
    public partial class StylusPointsReplacedEventArgs : System.EventArgs
    {
        public StylusPointsReplacedEventArgs(System.Windows.Input.StylusPointCollection newStylusPoints, System.Windows.Input.StylusPointCollection previousStylusPoints) { }
        public System.Windows.Input.StylusPointCollection NewStylusPoints { get { throw null; } }
        public System.Windows.Input.StylusPointCollection PreviousStylusPoints { get { throw null; } }
    }
    public delegate void StylusPointsReplacedEventHandler(object sender, System.Windows.Ink.StylusPointsReplacedEventArgs e);
    public abstract partial class StylusShape
    {
        internal StylusShape() { }
        public double Height { get { throw null; } }
        public double Rotation { get { throw null; } }
        public double Width { get { throw null; } }
    }
    public enum StylusTip
    {
        Rectangle = 0,
        Ellipse = 1,
    }
}
namespace System.Windows.Input
{
    public partial class AccessKeyEventArgs : System.EventArgs
    {
        internal AccessKeyEventArgs() { }
        public bool IsMultiple { get { throw null; } }
        public string Key { get { throw null; } }
    }
    public sealed partial class AccessKeyManager
    {
        internal AccessKeyManager() { }
        public static readonly System.Windows.RoutedEvent AccessKeyPressedEvent;
        public static void AddAccessKeyPressedHandler(System.Windows.DependencyObject element, System.Windows.Input.AccessKeyPressedEventHandler handler) { }
        public static bool IsKeyRegistered(object scope, string key) { throw null; }
        public static bool ProcessKey(object scope, string key, bool isMultiple) { throw null; }
        public static void Register(string key, System.Windows.IInputElement element) { }
        public static void RemoveAccessKeyPressedHandler(System.Windows.DependencyObject element, System.Windows.Input.AccessKeyPressedEventHandler handler) { }
        public static void Unregister(string key, System.Windows.IInputElement element) { }
    }
    public partial class AccessKeyPressedEventArgs : System.Windows.RoutedEventArgs
    {
        public AccessKeyPressedEventArgs() { }
        public AccessKeyPressedEventArgs(string key) { }
        public string Key { get { throw null; } }
        public object Scope { get { throw null; } set { } }
        public System.Windows.UIElement Target { get { throw null; } set { } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void AccessKeyPressedEventHandler(object sender, System.Windows.Input.AccessKeyPressedEventArgs e);
    public static partial class ApplicationCommands
    {
        public static System.Windows.Input.RoutedUICommand CancelPrint { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Close { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ContextMenu { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Copy { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand CorrectionList { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Cut { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Delete { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Find { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Help { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand New { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand NotACommand { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Open { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Paste { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Print { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand PrintPreview { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Properties { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Redo { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Replace { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Save { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand SaveAs { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand SelectAll { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Stop { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Undo { get { throw null; } }
    }
    public partial class CanExecuteChangedEventManager : System.Windows.WeakEventManager
    {
        internal CanExecuteChangedEventManager() { }
        public static void AddHandler(System.Windows.Input.ICommand source, System.EventHandler<System.EventArgs> handler) { }
        protected override bool Purge(object source, object data, bool purgeAll) { throw null; }
        public static void RemoveHandler(System.Windows.Input.ICommand source, System.EventHandler<System.EventArgs> handler) { }
        protected override void StartListening(object source) { }
        protected override void StopListening(object source) { }
    }
    public sealed partial class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs
    {
        internal CanExecuteRoutedEventArgs() { }
        public bool CanExecute { get { throw null; } set { } }
        public System.Windows.Input.ICommand Command { get { throw null; } }
        public bool ContinueRouting { get { throw null; } set { } }
        public object Parameter { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object target) { }
    }
    public delegate void CanExecuteRoutedEventHandler(object sender, System.Windows.Input.CanExecuteRoutedEventArgs e);
    public enum CaptureMode
    {
        None = 0,
        Element = 1,
        SubTree = 2,
    }
    public partial class CommandBinding
    {
        public CommandBinding() { }
        public CommandBinding(System.Windows.Input.ICommand command) { }
        public CommandBinding(System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed) { }
        public CommandBinding(System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute) { }
        [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.NeverLocalize)]
        public System.Windows.Input.ICommand Command { get { throw null; } set { } }
        public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute { add { } remove { } }
        public event System.Windows.Input.ExecutedRoutedEventHandler Executed { add { } remove { } }
        public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute { add { } remove { } }
        public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted { add { } remove { } }
    }
    public sealed partial class CommandBindingCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public CommandBindingCollection() { }
        public CommandBindingCollection(System.Collections.IList commandBindings) { }
        public int Count { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Input.CommandBinding this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Input.CommandBinding commandBinding) { throw null; }
        public void AddRange(System.Collections.ICollection collection) { }
        public void Clear() { }
        public bool Contains(System.Windows.Input.CommandBinding commandBinding) { throw null; }
        public void CopyTo(System.Windows.Input.CommandBinding[] commandBindings, int index) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Input.CommandBinding value) { throw null; }
        public void Insert(int index, System.Windows.Input.CommandBinding commandBinding) { }
        public void Remove(System.Windows.Input.CommandBinding commandBinding) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object commandBinding) { throw null; }
        bool System.Collections.IList.Contains(object key) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object commandBinding) { }
    }
    public sealed partial class CommandManager
    {
        internal CommandManager() { }
        public static readonly System.Windows.RoutedEvent CanExecuteEvent;
        public static readonly System.Windows.RoutedEvent ExecutedEvent;
        public static readonly System.Windows.RoutedEvent PreviewCanExecuteEvent;
        public static readonly System.Windows.RoutedEvent PreviewExecutedEvent;
        public static event System.EventHandler RequerySuggested { add { } remove { } }
        public static void AddCanExecuteHandler(System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler) { }
        public static void AddExecutedHandler(System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler) { }
        public static void AddPreviewCanExecuteHandler(System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler) { }
        public static void AddPreviewExecutedHandler(System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler) { }
        public static void InvalidateRequerySuggested() { }
        public static void RegisterClassCommandBinding(System.Type type, System.Windows.Input.CommandBinding commandBinding) { }
        public static void RegisterClassInputBinding(System.Type type, System.Windows.Input.InputBinding inputBinding) { }
        public static void RemoveCanExecuteHandler(System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler) { }
        public static void RemoveExecutedHandler(System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler) { }
        public static void RemovePreviewCanExecuteHandler(System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler) { }
        public static void RemovePreviewExecutedHandler(System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler) { }
    }
    public static partial class ComponentCommands
    {
        public static System.Windows.Input.RoutedUICommand ExtendSelectionDown { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ExtendSelectionLeft { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ExtendSelectionRight { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ExtendSelectionUp { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveDown { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveFocusBack { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveFocusDown { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveFocusForward { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveFocusPageDown { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveFocusPageUp { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveFocusUp { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveLeft { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveRight { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveToEnd { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveToHome { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveToPageDown { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveToPageUp { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MoveUp { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ScrollByLine { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ScrollPageDown { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ScrollPageLeft { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ScrollPageRight { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ScrollPageUp { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand SelectToEnd { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand SelectToHome { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand SelectToPageDown { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand SelectToPageUp { get { throw null; } }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.CursorConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public sealed partial class Cursor : System.IDisposable
    {
        public Cursor(System.IO.Stream cursorStream) { }
        public Cursor(System.IO.Stream cursorStream, bool scaleWithDpi) { }
        public Cursor(string cursorFile) { }
        public Cursor(string cursorFile, bool scaleWithDpi) { }
        public void Dispose() { }
        ~Cursor() { }
        public override string ToString() { throw null; }
    }
    public partial class CursorConverter : System.ComponentModel.TypeConverter
    {
        public CursorConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
        public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
        public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { throw null; }
    }
    public static partial class Cursors
    {
        public static System.Windows.Input.Cursor AppStarting { get { throw null; } }
        public static System.Windows.Input.Cursor Arrow { get { throw null; } }
        public static System.Windows.Input.Cursor ArrowCD { get { throw null; } }
        public static System.Windows.Input.Cursor Cross { get { throw null; } }
        public static System.Windows.Input.Cursor Hand { get { throw null; } }
        public static System.Windows.Input.Cursor Help { get { throw null; } }
        public static System.Windows.Input.Cursor IBeam { get { throw null; } }
        public static System.Windows.Input.Cursor No { get { throw null; } }
        public static System.Windows.Input.Cursor None { get { throw null; } }
        public static System.Windows.Input.Cursor Pen { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollAll { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollE { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollN { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollNE { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollNS { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollNW { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollS { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollSE { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollSW { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollW { get { throw null; } }
        public static System.Windows.Input.Cursor ScrollWE { get { throw null; } }
        public static System.Windows.Input.Cursor SizeAll { get { throw null; } }
        public static System.Windows.Input.Cursor SizeNESW { get { throw null; } }
        public static System.Windows.Input.Cursor SizeNS { get { throw null; } }
        public static System.Windows.Input.Cursor SizeNWSE { get { throw null; } }
        public static System.Windows.Input.Cursor SizeWE { get { throw null; } }
        public static System.Windows.Input.Cursor UpArrow { get { throw null; } }
        public static System.Windows.Input.Cursor Wait { get { throw null; } }
    }
    public enum CursorType
    {
        None = 0,
        No = 1,
        Arrow = 2,
        AppStarting = 3,
        Cross = 4,
        Help = 5,
        IBeam = 6,
        SizeAll = 7,
        SizeNESW = 8,
        SizeNS = 9,
        SizeNWSE = 10,
        SizeWE = 11,
        UpArrow = 12,
        Wait = 13,
        Hand = 14,
        Pen = 15,
        ScrollNS = 16,
        ScrollWE = 17,
        ScrollAll = 18,
        ScrollN = 19,
        ScrollS = 20,
        ScrollW = 21,
        ScrollE = 22,
        ScrollNW = 23,
        ScrollNE = 24,
        ScrollSW = 25,
        ScrollSE = 26,
        ArrowCD = 27,
    }
    public sealed partial class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs
    {
        internal ExecutedRoutedEventArgs() { }
        public System.Windows.Input.ICommand Command { get { throw null; } }
        public object Parameter { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object target) { }
    }
    public delegate void ExecutedRoutedEventHandler(object sender, System.Windows.Input.ExecutedRoutedEventArgs e);
    public static partial class FocusManager
    {
        public static readonly System.Windows.DependencyProperty FocusedElementProperty;
        public static readonly System.Windows.RoutedEvent GotFocusEvent;
        public static readonly System.Windows.DependencyProperty IsFocusScopeProperty;
        public static readonly System.Windows.RoutedEvent LostFocusEvent;
        public static void AddGotFocusHandler(System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler) { }
        public static void AddLostFocusHandler(System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler) { }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public static System.Windows.IInputElement GetFocusedElement(System.Windows.DependencyObject element) { throw null; }
        public static System.Windows.DependencyObject GetFocusScope(System.Windows.DependencyObject element) { throw null; }
        public static bool GetIsFocusScope(System.Windows.DependencyObject element) { throw null; }
        public static void RemoveGotFocusHandler(System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler) { }
        public static void RemoveLostFocusHandler(System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler) { }
        public static void SetFocusedElement(System.Windows.DependencyObject element, System.Windows.IInputElement value) { }
        public static void SetIsFocusScope(System.Windows.DependencyObject element, bool value) { }
    }
    public partial interface ICommandSource
    {
        System.Windows.Input.ICommand Command { get; }
        object CommandParameter { get; }
        System.Windows.IInputElement CommandTarget { get; }
    }
    public partial interface IInputLanguageSource
    {
        System.Globalization.CultureInfo CurrentInputLanguage { get; set; }
        System.Collections.IEnumerable InputLanguageList { get; }
        void Initialize();
        void Uninitialize();
    }
    public partial interface IManipulator
    {
        int Id { get; }
        event System.EventHandler Updated;
        System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo);
        void ManipulationEnded(bool cancel);
    }
    [System.FlagsAttribute]
    public enum ImeConversionModeValues
    {
        DoNotCare = -2147483648,
        Native = 1,
        Katakana = 2,
        FullShape = 4,
        Roman = 8,
        CharCode = 16,
        NoConversion = 32,
        Eudc = 64,
        Symbol = 128,
        Fixed = 256,
        Alphanumeric = 512,
    }
    [System.FlagsAttribute]
    public enum ImeSentenceModeValues
    {
        DoNotCare = -2147483648,
        None = 0,
        PluralClause = 1,
        SingleConversion = 2,
        Automatic = 4,
        PhrasePrediction = 8,
        Conversation = 16,
    }
    public partial class InertiaExpansionBehavior
    {
        public InertiaExpansionBehavior() { }
        public double DesiredDeceleration { get { throw null; } set { } }
        public System.Windows.Vector DesiredExpansion { get { throw null; } set { } }
        public double InitialRadius { get { throw null; } set { } }
        public System.Windows.Vector InitialVelocity { get { throw null; } set { } }
    }
    public partial class InertiaRotationBehavior
    {
        public InertiaRotationBehavior() { }
        public double DesiredDeceleration { get { throw null; } set { } }
        public double DesiredRotation { get { throw null; } set { } }
        public double InitialVelocity { get { throw null; } set { } }
    }
    public partial class InertiaTranslationBehavior
    {
        public InertiaTranslationBehavior() { }
        public double DesiredDeceleration { get { throw null; } set { } }
        public double DesiredDisplacement { get { throw null; } set { } }
        public System.Windows.Vector InitialVelocity { get { throw null; } set { } }
    }
    public partial class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource
    {
        public static readonly System.Windows.DependencyProperty CommandParameterProperty;
        public static readonly System.Windows.DependencyProperty CommandProperty;
        public static readonly System.Windows.DependencyProperty CommandTargetProperty;
        protected InputBinding() { }
        public InputBinding(System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture) { }
        [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
        [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.NeverLocalize)]
        public System.Windows.Input.ICommand Command { get { throw null; } set { } }
        public object CommandParameter { get { throw null; } set { } }
        public System.Windows.IInputElement CommandTarget { get { throw null; } set { } }
        public virtual System.Windows.Input.InputGesture Gesture { get { throw null; } set { } }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    }
    public sealed partial class InputBindingCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public InputBindingCollection() { }
        public InputBindingCollection(System.Collections.IList inputBindings) { }
        public int Count { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Input.InputBinding this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Input.InputBinding inputBinding) { throw null; }
        public void AddRange(System.Collections.ICollection collection) { }
        public void Clear() { }
        public bool Contains(System.Windows.Input.InputBinding key) { throw null; }
        public void CopyTo(System.Windows.Input.InputBinding[] inputBindings, int index) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Input.InputBinding value) { throw null; }
        public void Insert(int index, System.Windows.Input.InputBinding inputBinding) { }
        public void Remove(System.Windows.Input.InputBinding inputBinding) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object inputBinding) { throw null; }
        bool System.Collections.IList.Contains(object key) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object inputBinding) { }
    }
    public abstract partial class InputDevice : System.Windows.Threading.DispatcherObject
    {
        protected InputDevice() { }
        public abstract System.Windows.PresentationSource ActiveSource { get; }
        public abstract System.Windows.IInputElement Target { get; }
    }
    public partial class InputEventArgs : System.Windows.RoutedEventArgs
    {
        public InputEventArgs(System.Windows.Input.InputDevice inputDevice, int timestamp) { }
        public System.Windows.Input.InputDevice Device { get { throw null; } }
        public int Timestamp { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void InputEventHandler(object sender, System.Windows.Input.InputEventArgs e);
    public abstract partial class InputGesture
    {
        protected InputGesture() { }
        public abstract bool Matches(object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
    }
    public sealed partial class InputGestureCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public InputGestureCollection() { }
        public InputGestureCollection(System.Collections.IList inputGestures) { }
        public int Count { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Input.InputGesture this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Input.InputGesture inputGesture) { throw null; }
        public void AddRange(System.Collections.ICollection collection) { }
        public void Clear() { }
        public bool Contains(System.Windows.Input.InputGesture key) { throw null; }
        public void CopyTo(System.Windows.Input.InputGesture[] inputGestures, int index) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Input.InputGesture value) { throw null; }
        public void Insert(int index, System.Windows.Input.InputGesture inputGesture) { }
        public void Remove(System.Windows.Input.InputGesture inputGesture) { }
        public void RemoveAt(int index) { }
        public void Seal() { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object inputGesture) { throw null; }
        bool System.Collections.IList.Contains(object key) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object inputGesture) { }
    }
    public partial class InputLanguageChangedEventArgs : System.Windows.Input.InputLanguageEventArgs
    {
        public InputLanguageChangedEventArgs(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) : base(default(System.Globalization.CultureInfo), default(System.Globalization.CultureInfo)) { }
    }
    public partial class InputLanguageChangingEventArgs : System.Windows.Input.InputLanguageEventArgs
    {
        public InputLanguageChangingEventArgs(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) : base(default(System.Globalization.CultureInfo), default(System.Globalization.CultureInfo)) { }
        public bool Rejected { get { throw null; } set { } }
    }
    public abstract partial class InputLanguageEventArgs : System.EventArgs
    {
        protected InputLanguageEventArgs(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) { }
        public virtual System.Globalization.CultureInfo NewLanguage { get { throw null; } }
        public virtual System.Globalization.CultureInfo PreviousLanguage { get { throw null; } }
    }
    public delegate void InputLanguageEventHandler(object sender, System.Windows.Input.InputLanguageEventArgs e);
    public sealed partial class InputLanguageManager : System.Windows.Threading.DispatcherObject
    {
        internal InputLanguageManager() { }
        public static readonly System.Windows.DependencyProperty InputLanguageProperty;
        public static readonly System.Windows.DependencyProperty RestoreInputLanguageProperty;
        public System.Collections.IEnumerable AvailableInputLanguages { get { throw null; } }
        public static System.Windows.Input.InputLanguageManager Current { get { throw null; } }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]
        public System.Globalization.CultureInfo CurrentInputLanguage { get { throw null; } set { } }
        public event System.Windows.Input.InputLanguageEventHandler InputLanguageChanged { add { } remove { } }
        public event System.Windows.Input.InputLanguageEventHandler InputLanguageChanging { add { } remove { } }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Globalization.CultureInfo GetInputLanguage(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static bool GetRestoreInputLanguage(System.Windows.DependencyObject target) { throw null; }
        public void RegisterInputLanguageSource(System.Windows.Input.IInputLanguageSource inputLanguageSource) { }
        public void ReportInputLanguageChanged(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) { }
        public bool ReportInputLanguageChanging(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) { throw null; }
        public static void SetInputLanguage(System.Windows.DependencyObject target, System.Globalization.CultureInfo inputLanguage) { }
        public static void SetRestoreInputLanguage(System.Windows.DependencyObject target, bool restore) { }
    }
    public sealed partial class InputManager : System.Windows.Threading.DispatcherObject
    {
        internal InputManager() { }
        public static System.Windows.Input.InputManager Current { get { throw null; } }
        public System.Collections.ICollection InputProviders { get { throw null; } }
        public bool IsInMenuMode { get { throw null; } }
        public System.Windows.Input.InputDevice MostRecentInputDevice { get { throw null; } }
        public System.Windows.Input.KeyboardDevice PrimaryKeyboardDevice { get { throw null; } }
        public System.Windows.Input.MouseDevice PrimaryMouseDevice { get { throw null; } }
        public event System.EventHandler EnterMenuMode { add { } remove { } }
        public event System.EventHandler HitTestInvalidatedAsync { add { } remove { } }
        public event System.EventHandler LeaveMenuMode { add { } remove { } }
        public event System.Windows.Input.NotifyInputEventHandler PostNotifyInput { add { } remove { } }
        public event System.Windows.Input.ProcessInputEventHandler PostProcessInput { add { } remove { } }
        public event System.Windows.Input.NotifyInputEventHandler PreNotifyInput { add { } remove { } }
        public event System.Windows.Input.PreProcessInputEventHandler PreProcessInput { add { } remove { } }
        public void PopMenuMode(System.Windows.PresentationSource menuSite) { }
        public bool ProcessInput(System.Windows.Input.InputEventArgs input) { throw null; }
        public void PushMenuMode(System.Windows.PresentationSource menuSite) { }
    }
    public partial class InputMethod : System.Windows.Threading.DispatcherObject
    {
        internal InputMethod() { }
        public static readonly System.Windows.DependencyProperty InputScopeProperty;
        public static readonly System.Windows.DependencyProperty IsInputMethodEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsInputMethodSuspendedProperty;
        public static readonly System.Windows.DependencyProperty PreferredImeConversionModeProperty;
        public static readonly System.Windows.DependencyProperty PreferredImeSentenceModeProperty;
        public static readonly System.Windows.DependencyProperty PreferredImeStateProperty;
        public bool CanShowConfigurationUI { get { throw null; } }
        public bool CanShowRegisterWordUI { get { throw null; } }
        public static System.Windows.Input.InputMethod Current { get { throw null; } }
        public System.Windows.Input.InputMethodState HandwritingState { get { throw null; } set { } }
        public System.Windows.Input.ImeConversionModeValues ImeConversionMode { get { throw null; } set { } }
        public System.Windows.Input.ImeSentenceModeValues ImeSentenceMode { get { throw null; } set { } }
        public System.Windows.Input.InputMethodState ImeState { get { throw null; } set { } }
        public System.Windows.Input.InputMethodState MicrophoneState { get { throw null; } set { } }
        public System.Windows.Input.SpeechMode SpeechMode { get { throw null; } set { } }
        public event System.Windows.Input.InputMethodStateChangedEventHandler StateChanged { add { } remove { } }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Windows.Input.InputScope GetInputScope(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static bool GetIsInputMethodEnabled(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static bool GetIsInputMethodSuspended(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Windows.Input.ImeConversionModeValues GetPreferredImeConversionMode(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Windows.Input.ImeSentenceModeValues GetPreferredImeSentenceMode(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Windows.Input.InputMethodState GetPreferredImeState(System.Windows.DependencyObject target) { throw null; }
        public static void SetInputScope(System.Windows.DependencyObject target, System.Windows.Input.InputScope value) { }
        public static void SetIsInputMethodEnabled(System.Windows.DependencyObject target, bool value) { }
        public static void SetIsInputMethodSuspended(System.Windows.DependencyObject target, bool value) { }
        public static void SetPreferredImeConversionMode(System.Windows.DependencyObject target, System.Windows.Input.ImeConversionModeValues value) { }
        public static void SetPreferredImeSentenceMode(System.Windows.DependencyObject target, System.Windows.Input.ImeSentenceModeValues value) { }
        public static void SetPreferredImeState(System.Windows.DependencyObject target, System.Windows.Input.InputMethodState value) { }
        public void ShowConfigureUI() { }
        public void ShowConfigureUI(System.Windows.UIElement element) { }
        public void ShowRegisterWordUI() { }
        public void ShowRegisterWordUI(string registeredText) { }
        public void ShowRegisterWordUI(System.Windows.UIElement element, string registeredText) { }
    }
    public enum InputMethodState
    {
        Off = 0,
        On = 1,
        DoNotCare = 2,
    }
    public partial class InputMethodStateChangedEventArgs : System.EventArgs
    {
        internal InputMethodStateChangedEventArgs() { }
        public bool IsHandwritingStateChanged { get { throw null; } }
        public bool IsImeConversionModeChanged { get { throw null; } }
        public bool IsImeSentenceModeChanged { get { throw null; } }
        public bool IsImeStateChanged { get { throw null; } }
        public bool IsMicrophoneStateChanged { get { throw null; } }
        public bool IsSpeechModeChanged { get { throw null; } }
    }
    public delegate void InputMethodStateChangedEventHandler(object sender, System.Windows.Input.InputMethodStateChangedEventArgs e);
    public enum InputMode
    {
        Foreground = 0,
        Sink = 1,
    }
    [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.InputScopeConverter, PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
    public partial class InputScope
    {
        public InputScope() { }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Collections.IList Names { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Collections.IList PhraseList { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string RegularExpression { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public string SrgsMarkup { get { throw null; } set { } }
    }
    public partial class InputScopeConverter : System.ComponentModel.TypeConverter
    {
        public InputScopeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.InputScopeNameConverter, PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
    [System.Windows.Markup.ContentPropertyAttribute("NameValue")]
    public partial class InputScopeName : System.Windows.Markup.IAddChild
    {
        public InputScopeName() { }
        public InputScopeName(System.Windows.Input.InputScopeNameValue nameValue) { }
        public System.Windows.Input.InputScopeNameValue NameValue { get { throw null; } set { } }
        public void AddChild(object value) { }
        public void AddText(string name) { }
    }
    public partial class InputScopeNameConverter : System.ComponentModel.TypeConverter
    {
        public InputScopeNameConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public enum InputScopeNameValue
    {
        Xml = -4,
        Srgs = -3,
        RegularExpression = -2,
        PhraseList = -1,
        Default = 0,
        Url = 1,
        FullFilePath = 2,
        FileName = 3,
        EmailUserName = 4,
        EmailSmtpAddress = 5,
        LogOnName = 6,
        PersonalFullName = 7,
        PersonalNamePrefix = 8,
        PersonalGivenName = 9,
        PersonalMiddleName = 10,
        PersonalSurname = 11,
        PersonalNameSuffix = 12,
        PostalAddress = 13,
        PostalCode = 14,
        AddressStreet = 15,
        AddressStateOrProvince = 16,
        AddressCity = 17,
        AddressCountryName = 18,
        AddressCountryShortName = 19,
        CurrencyAmountAndSymbol = 20,
        CurrencyAmount = 21,
        Date = 22,
        DateMonth = 23,
        DateDay = 24,
        DateYear = 25,
        DateMonthName = 26,
        DateDayName = 27,
        Digits = 28,
        Number = 29,
        OneChar = 30,
        Password = 31,
        TelephoneNumber = 32,
        TelephoneCountryCode = 33,
        TelephoneAreaCode = 34,
        TelephoneLocalNumber = 35,
        Time = 36,
        TimeHour = 37,
        TimeMinorSec = 38,
        NumberFullWidth = 39,
        AlphanumericHalfWidth = 40,
        AlphanumericFullWidth = 41,
        CurrencyChinese = 42,
        Bopomofo = 43,
        Hiragana = 44,
        KatakanaHalfWidth = 45,
        KatakanaFullWidth = 46,
        Hanja = 47,
    }
    [System.Windows.Markup.ContentPropertyAttribute("Name")]
    public partial class InputScopePhrase : System.Windows.Markup.IAddChild
    {
        public InputScopePhrase() { }
        public InputScopePhrase(string name) { }
        public string Name { get { throw null; } set { } }
        public void AddChild(object value) { }
        public void AddText(string name) { }
    }
    public enum InputType
    {
        Keyboard = 0,
        Mouse = 1,
        Stylus = 2,
        Hid = 3,
        Text = 4,
        Command = 5,
    }
    public partial class KeyBinding : System.Windows.Input.InputBinding
    {
        public static readonly System.Windows.DependencyProperty KeyProperty;
        public static readonly System.Windows.DependencyProperty ModifiersProperty;
        public KeyBinding() { }
        public KeyBinding(System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers) { }
        public KeyBinding(System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture) { }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.KeyGestureConverter))]
        [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.KeyGestureValueSerializer))]
        public override System.Windows.Input.InputGesture Gesture { get { throw null; } set { } }
        public System.Windows.Input.Key Key { get { throw null; } set { } }
        public System.Windows.Input.ModifierKeys Modifiers { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public static partial class Keyboard
    {
        public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent KeyboardInputProviderAcquireFocusEvent;
        public static readonly System.Windows.RoutedEvent KeyDownEvent;
        public static readonly System.Windows.RoutedEvent KeyUpEvent;
        public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
        public static readonly System.Windows.RoutedEvent PreviewKeyboardInputProviderAcquireFocusEvent;
        public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
        public static System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode { get { throw null; } set { } }
        public static System.Windows.IInputElement FocusedElement { get { throw null; } }
        public static System.Windows.Input.ModifierKeys Modifiers { get { throw null; } }
        public static System.Windows.Input.KeyboardDevice PrimaryDevice { get { throw null; } }
        public static void AddGotKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
        public static void AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) { }
        public static void AddKeyDownHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
        public static void AddKeyUpHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
        public static void AddLostKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
        public static void AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
        public static void AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) { }
        public static void AddPreviewKeyDownHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
        public static void AddPreviewKeyUpHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
        public static void AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
        public static void ClearFocus() { }
        public static System.Windows.IInputElement Focus(System.Windows.IInputElement element) { throw null; }
        public static System.Windows.Input.KeyStates GetKeyStates(System.Windows.Input.Key key) { throw null; }
        public static bool IsKeyDown(System.Windows.Input.Key key) { throw null; }
        public static bool IsKeyToggled(System.Windows.Input.Key key) { throw null; }
        public static bool IsKeyUp(System.Windows.Input.Key key) { throw null; }
        public static void RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
        public static void RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) { }
        public static void RemoveKeyDownHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
        public static void RemoveKeyUpHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
        public static void RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
        public static void RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
        public static void RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) { }
        public static void RemovePreviewKeyDownHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
        public static void RemovePreviewKeyUpHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
        public static void RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
    }
    public abstract partial class KeyboardDevice : System.Windows.Input.InputDevice
    {
        protected KeyboardDevice(System.Windows.Input.InputManager inputManager) { }
        public override System.Windows.PresentationSource ActiveSource { get { throw null; } }
        public System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode { get { throw null; } set { } }
        public System.Windows.IInputElement FocusedElement { get { throw null; } }
        public System.Windows.Input.ModifierKeys Modifiers { get { throw null; } }
        public override System.Windows.IInputElement Target { get { throw null; } }
        public void ClearFocus() { }
        public System.Windows.IInputElement Focus(System.Windows.IInputElement element) { throw null; }
        public System.Windows.Input.KeyStates GetKeyStates(System.Windows.Input.Key key) { throw null; }
        protected abstract System.Windows.Input.KeyStates GetKeyStatesFromSystem(System.Windows.Input.Key key);
        public bool IsKeyDown(System.Windows.Input.Key key) { throw null; }
        public bool IsKeyToggled(System.Windows.Input.Key key) { throw null; }
        public bool IsKeyUp(System.Windows.Input.Key key) { throw null; }
    }
    public partial class KeyboardEventArgs : System.Windows.Input.InputEventArgs
    {
        public KeyboardEventArgs(System.Windows.Input.KeyboardDevice keyboard, int timestamp) : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public System.Windows.Input.KeyboardDevice KeyboardDevice { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void KeyboardEventHandler(object sender, System.Windows.Input.KeyboardEventArgs e);
    public partial class KeyboardFocusChangedEventArgs : System.Windows.Input.KeyboardEventArgs
    {
        public KeyboardFocusChangedEventArgs(System.Windows.Input.KeyboardDevice keyboard, int timestamp, System.Windows.IInputElement oldFocus, System.Windows.IInputElement newFocus) : base(default(System.Windows.Input.KeyboardDevice), default(int)) { }
        public System.Windows.IInputElement NewFocus { get { throw null; } }
        public System.Windows.IInputElement OldFocus { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void KeyboardFocusChangedEventHandler(object sender, System.Windows.Input.KeyboardFocusChangedEventArgs e);
    public partial class KeyboardInputProviderAcquireFocusEventArgs : System.Windows.Input.KeyboardEventArgs
    {
        public KeyboardInputProviderAcquireFocusEventArgs(System.Windows.Input.KeyboardDevice keyboard, int timestamp, bool focusAcquired) : base(default(System.Windows.Input.KeyboardDevice), default(int)) { }
        public bool FocusAcquired { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void KeyboardInputProviderAcquireFocusEventHandler(object sender, System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs e);
    public partial class KeyEventArgs : System.Windows.Input.KeyboardEventArgs
    {
        public KeyEventArgs(System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key) : base(default(System.Windows.Input.KeyboardDevice), default(int)) { }
        public System.Windows.Input.Key DeadCharProcessedKey { get { throw null; } }
        public System.Windows.Input.Key ImeProcessedKey { get { throw null; } }
        public System.Windows.PresentationSource InputSource { get { throw null; } }
        public bool IsDown { get { throw null; } }
        public bool IsRepeat { get { throw null; } }
        public bool IsToggled { get { throw null; } }
        public bool IsUp { get { throw null; } }
        public System.Windows.Input.Key Key { get { throw null; } }
        public System.Windows.Input.KeyStates KeyStates { get { throw null; } }
        public System.Windows.Input.Key SystemKey { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void KeyEventHandler(object sender, System.Windows.Input.KeyEventArgs e);
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.KeyGestureConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.KeyGestureValueSerializer))]
    public partial class KeyGesture : System.Windows.Input.InputGesture
    {
        public KeyGesture(System.Windows.Input.Key key) { }
        public KeyGesture(System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers) { }
        public KeyGesture(System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString) { }
        public string DisplayString { get { throw null; } }
        public System.Windows.Input.Key Key { get { throw null; } }
        public System.Windows.Input.ModifierKeys Modifiers { get { throw null; } }
        public string GetDisplayStringForCulture(System.Globalization.CultureInfo culture) { throw null; }
        public override bool Matches(object targetElement, System.Windows.Input.InputEventArgs inputEventArgs) { throw null; }
    }
    public partial class KeyGestureConverter : System.ComponentModel.TypeConverter
    {
        public KeyGestureConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public partial class KeyGestureValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public KeyGestureValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    [System.FlagsAttribute]
    public enum KeyStates : byte
    {
        None = (byte)0,
        Down = (byte)1,
        Toggled = (byte)2,
    }
    public static partial class Manipulation
    {
        public static void AddManipulator(System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator) { }
        public static void CompleteManipulation(System.Windows.UIElement element) { }
        public static System.Windows.IInputElement GetManipulationContainer(System.Windows.UIElement element) { throw null; }
        public static System.Windows.Input.ManipulationModes GetManipulationMode(System.Windows.UIElement element) { throw null; }
        public static System.Windows.Input.ManipulationPivot GetManipulationPivot(System.Windows.UIElement element) { throw null; }
        public static bool IsManipulationActive(System.Windows.UIElement element) { throw null; }
        public static void RemoveManipulator(System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator) { }
        public static void SetManipulationContainer(System.Windows.UIElement element, System.Windows.IInputElement container) { }
        public static void SetManipulationMode(System.Windows.UIElement element, System.Windows.Input.ManipulationModes mode) { }
        [System.ComponentModel.BrowsableAttribute(false)]
        public static void SetManipulationParameter(System.Windows.UIElement element, System.Windows.Input.Manipulations.ManipulationParameters2D parameter) { }
        public static void SetManipulationPivot(System.Windows.UIElement element, System.Windows.Input.ManipulationPivot pivot) { }
        public static void StartInertia(System.Windows.UIElement element) { }
    }
    public sealed partial class ManipulationBoundaryFeedbackEventArgs : System.Windows.Input.InputEventArgs
    {
        internal ManipulationBoundaryFeedbackEventArgs() : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public System.Windows.Input.ManipulationDelta BoundaryFeedback { get { throw null; } }
        public System.Windows.IInputElement ManipulationContainer { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public sealed partial class ManipulationCompletedEventArgs : System.Windows.Input.InputEventArgs
    {
        internal ManipulationCompletedEventArgs() : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public System.Windows.Input.ManipulationVelocities FinalVelocities { get { throw null; } }
        public bool IsInertial { get { throw null; } }
        public System.Windows.IInputElement ManipulationContainer { get { throw null; } }
        public System.Windows.Point ManipulationOrigin { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { throw null; } }
        public System.Windows.Input.ManipulationDelta TotalManipulation { get { throw null; } }
        public bool Cancel() { throw null; }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public partial class ManipulationDelta
    {
        public ManipulationDelta(System.Windows.Vector translation, double rotation, System.Windows.Vector scale, System.Windows.Vector expansion) { }
        public System.Windows.Vector Expansion { get { throw null; } }
        public double Rotation { get { throw null; } }
        public System.Windows.Vector Scale { get { throw null; } }
        public System.Windows.Vector Translation { get { throw null; } }
    }
    public sealed partial class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs
    {
        internal ManipulationDeltaEventArgs() : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public System.Windows.Input.ManipulationDelta CumulativeManipulation { get { throw null; } }
        public System.Windows.Input.ManipulationDelta DeltaManipulation { get { throw null; } }
        public bool IsInertial { get { throw null; } }
        public System.Windows.IInputElement ManipulationContainer { get { throw null; } }
        public System.Windows.Point ManipulationOrigin { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { throw null; } }
        public System.Windows.Input.ManipulationVelocities Velocities { get { throw null; } }
        public bool Cancel() { throw null; }
        public void Complete() { }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
        public void ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta unusedManipulation) { }
        public void StartInertia() { }
    }
    public sealed partial class ManipulationInertiaStartingEventArgs : System.Windows.Input.InputEventArgs
    {
        internal ManipulationInertiaStartingEventArgs() : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public System.Windows.Input.InertiaExpansionBehavior ExpansionBehavior { get { throw null; } set { } }
        public System.Windows.Input.ManipulationVelocities InitialVelocities { get { throw null; } }
        public System.Windows.IInputElement ManipulationContainer { get { throw null; } }
        public System.Windows.Point ManipulationOrigin { get { throw null; } set { } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { throw null; } }
        public System.Windows.Input.InertiaRotationBehavior RotationBehavior { get { throw null; } set { } }
        public System.Windows.Input.InertiaTranslationBehavior TranslationBehavior { get { throw null; } set { } }
        public bool Cancel() { throw null; }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
        [System.ComponentModel.BrowsableAttribute(false)]
        public void SetInertiaParameter(System.Windows.Input.Manipulations.InertiaParameters2D parameter) { }
    }
    [System.FlagsAttribute]
    public enum ManipulationModes
    {
        None = 0,
        TranslateX = 1,
        TranslateY = 2,
        Translate = 3,
        Rotate = 4,
        Scale = 8,
        All = 15,
    }
    public partial class ManipulationPivot
    {
        public ManipulationPivot() { }
        public ManipulationPivot(System.Windows.Point center, double radius) { }
        public System.Windows.Point Center { get { throw null; } set { } }
        public double Radius { get { throw null; } set { } }
    }
    public sealed partial class ManipulationStartedEventArgs : System.Windows.Input.InputEventArgs
    {
        internal ManipulationStartedEventArgs() : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public System.Windows.IInputElement ManipulationContainer { get { throw null; } }
        public System.Windows.Point ManipulationOrigin { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { throw null; } }
        public bool Cancel() { throw null; }
        public void Complete() { }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public sealed partial class ManipulationStartingEventArgs : System.Windows.Input.InputEventArgs
    {
        internal ManipulationStartingEventArgs() : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public bool IsSingleTouchEnabled { get { throw null; } set { } }
        public System.Windows.IInputElement ManipulationContainer { get { throw null; } set { } }
        public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { throw null; } }
        public System.Windows.Input.ManipulationModes Mode { get { throw null; } set { } }
        public System.Windows.Input.ManipulationPivot Pivot { get { throw null; } set { } }
        public bool Cancel() { throw null; }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
        [System.ComponentModel.BrowsableAttribute(false)]
        public void SetManipulationParameter(System.Windows.Input.Manipulations.ManipulationParameters2D parameter) { }
    }
    public partial class ManipulationVelocities
    {
        public ManipulationVelocities(System.Windows.Vector linearVelocity, double angularVelocity, System.Windows.Vector expansionVelocity) { }
        public double AngularVelocity { get { throw null; } }
        public System.Windows.Vector ExpansionVelocity { get { throw null; } }
        public System.Windows.Vector LinearVelocity { get { throw null; } }
    }
    public static partial class MediaCommands
    {
        public static System.Windows.Input.RoutedUICommand BoostBass { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ChannelDown { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ChannelUp { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand DecreaseBass { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand DecreaseMicrophoneVolume { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand DecreaseTreble { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand DecreaseVolume { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand FastForward { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand IncreaseBass { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand IncreaseMicrophoneVolume { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand IncreaseTreble { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand IncreaseVolume { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MuteMicrophoneVolume { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand MuteVolume { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand NextTrack { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Pause { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Play { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand PreviousTrack { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Record { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Rewind { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Select { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Stop { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand ToggleMicrophoneOnOff { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand TogglePlayPause { get { throw null; } }
    }
    public static partial class Mouse
    {
        public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
        public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
        public static readonly System.Windows.RoutedEvent MouseDownEvent;
        public static readonly System.Windows.RoutedEvent MouseEnterEvent;
        public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
        public static readonly System.Windows.RoutedEvent MouseMoveEvent;
        public static readonly System.Windows.RoutedEvent MouseUpEvent;
        public const int MouseWheelDeltaForOneLine = 120;
        public static readonly System.Windows.RoutedEvent MouseWheelEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseDownOutsideCapturedElementEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseUpOutsideCapturedElementEvent;
        public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
        public static readonly System.Windows.RoutedEvent QueryCursorEvent;
        public static System.Windows.IInputElement Captured { get { throw null; } }
        public static System.Windows.IInputElement DirectlyOver { get { throw null; } }
        public static System.Windows.Input.MouseButtonState LeftButton { get { throw null; } }
        public static System.Windows.Input.MouseButtonState MiddleButton { get { throw null; } }
        public static System.Windows.Input.Cursor OverrideCursor { get { throw null; } set { } }
        public static System.Windows.Input.MouseDevice PrimaryDevice { get { throw null; } }
        public static System.Windows.Input.MouseButtonState RightButton { get { throw null; } }
        public static System.Windows.Input.MouseButtonState XButton1 { get { throw null; } }
        public static System.Windows.Input.MouseButtonState XButton2 { get { throw null; } }
        public static void AddGotMouseCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void AddLostMouseCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void AddMouseDownHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void AddMouseEnterHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void AddMouseLeaveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void AddMouseMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void AddMouseUpHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void AddMouseWheelHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler) { }
        public static void AddPreviewMouseDownHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void AddPreviewMouseMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void AddPreviewMouseUpHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void AddPreviewMouseWheelHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler) { }
        public static void AddQueryCursorHandler(System.Windows.DependencyObject element, System.Windows.Input.QueryCursorEventHandler handler) { }
        public static bool Capture(System.Windows.IInputElement element) { throw null; }
        public static bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { throw null; }
        public static int GetIntermediatePoints(System.Windows.IInputElement relativeTo, System.Windows.Point[] points) { throw null; }
        public static System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { throw null; }
        public static void RemoveGotMouseCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void RemoveLostMouseCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void RemoveMouseDownHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void RemoveMouseEnterHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void RemoveMouseLeaveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void RemoveMouseMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void RemoveMouseUpHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void RemoveMouseWheelHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler) { }
        public static void RemovePreviewMouseDownHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void RemovePreviewMouseMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
        public static void RemovePreviewMouseUpHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
        public static void RemovePreviewMouseWheelHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler) { }
        public static void RemoveQueryCursorHandler(System.Windows.DependencyObject element, System.Windows.Input.QueryCursorEventHandler handler) { }
        public static bool SetCursor(System.Windows.Input.Cursor cursor) { throw null; }
        public static void Synchronize() { }
        public static void UpdateCursor() { }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.MouseActionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.MouseActionValueSerializer))]
    public enum MouseAction : byte
    {
        None = (byte)0,
        LeftClick = (byte)1,
        RightClick = (byte)2,
        MiddleClick = (byte)3,
        WheelClick = (byte)4,
        LeftDoubleClick = (byte)5,
        RightDoubleClick = (byte)6,
        MiddleDoubleClick = (byte)7,
    }
    public partial class MouseActionConverter : System.ComponentModel.TypeConverter
    {
        public MouseActionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public partial class MouseActionValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public MouseActionValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class MouseBinding : System.Windows.Input.InputBinding
    {
        public static readonly System.Windows.DependencyProperty MouseActionProperty;
        public MouseBinding() { }
        public MouseBinding(System.Windows.Input.ICommand command, System.Windows.Input.MouseGesture gesture) { }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.MouseGestureConverter))]
        [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.MouseGestureValueSerializer))]
        public override System.Windows.Input.InputGesture Gesture { get { throw null; } set { } }
        public System.Windows.Input.MouseAction MouseAction { get { throw null; } set { } }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    }
    public enum MouseButton
    {
        Left = 0,
        Middle = 1,
        Right = 2,
        XButton1 = 3,
        XButton2 = 4,
    }
    public partial class MouseButtonEventArgs : System.Windows.Input.MouseEventArgs
    {
        public MouseButtonEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, System.Windows.Input.MouseButton button) : base(default(System.Windows.Input.MouseDevice), default(int)) { }
        public MouseButtonEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, System.Windows.Input.MouseButton button, System.Windows.Input.StylusDevice stylusDevice) : base(default(System.Windows.Input.MouseDevice), default(int)) { }
        public System.Windows.Input.MouseButtonState ButtonState { get { throw null; } }
        public System.Windows.Input.MouseButton ChangedButton { get { throw null; } }
        public int ClickCount { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void MouseButtonEventHandler(object sender, System.Windows.Input.MouseButtonEventArgs e);
    public enum MouseButtonState
    {
        Released = 0,
        Pressed = 1,
    }
    public abstract partial class MouseDevice : System.Windows.Input.InputDevice
    {
        internal MouseDevice() { }
        public override System.Windows.PresentationSource ActiveSource { get { throw null; } }
        public System.Windows.IInputElement Captured { get { throw null; } }
        public System.Windows.IInputElement DirectlyOver { get { throw null; } }
        public System.Windows.Input.MouseButtonState LeftButton { get { throw null; } }
        public System.Windows.Input.MouseButtonState MiddleButton { get { throw null; } }
        public System.Windows.Input.Cursor OverrideCursor { get { throw null; } set { } }
        public System.Windows.Input.MouseButtonState RightButton { get { throw null; } }
        public override System.Windows.IInputElement Target { get { throw null; } }
        public System.Windows.Input.MouseButtonState XButton1 { get { throw null; } }
        public System.Windows.Input.MouseButtonState XButton2 { get { throw null; } }
        public bool Capture(System.Windows.IInputElement element) { throw null; }
        public bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { throw null; }
        protected System.Windows.Input.MouseButtonState GetButtonState(System.Windows.Input.MouseButton mouseButton) { throw null; }
        protected System.Windows.Point GetClientPosition() { throw null; }
        protected System.Windows.Point GetClientPosition(System.Windows.PresentationSource presentationSource) { throw null; }
        public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { throw null; }
        protected System.Windows.Point GetScreenPosition() { throw null; }
        public bool SetCursor(System.Windows.Input.Cursor cursor) { throw null; }
        public void Synchronize() { }
        public void UpdateCursor() { }
    }
    public partial class MouseEventArgs : System.Windows.Input.InputEventArgs
    {
        public MouseEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp) : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public MouseEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, System.Windows.Input.StylusDevice stylusDevice) : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public System.Windows.Input.MouseButtonState LeftButton { get { throw null; } }
        public System.Windows.Input.MouseButtonState MiddleButton { get { throw null; } }
        public System.Windows.Input.MouseDevice MouseDevice { get { throw null; } }
        public System.Windows.Input.MouseButtonState RightButton { get { throw null; } }
        public System.Windows.Input.StylusDevice StylusDevice { get { throw null; } }
        public System.Windows.Input.MouseButtonState XButton1 { get { throw null; } }
        public System.Windows.Input.MouseButtonState XButton2 { get { throw null; } }
        public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { throw null; }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void MouseEventHandler(object sender, System.Windows.Input.MouseEventArgs e);
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.MouseGestureConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.MouseGestureValueSerializer))]
    public partial class MouseGesture : System.Windows.Input.InputGesture
    {
        public MouseGesture() { }
        public MouseGesture(System.Windows.Input.MouseAction mouseAction) { }
        public MouseGesture(System.Windows.Input.MouseAction mouseAction, System.Windows.Input.ModifierKeys modifiers) { }
        public System.Windows.Input.ModifierKeys Modifiers { get { throw null; } set { } }
        public System.Windows.Input.MouseAction MouseAction { get { throw null; } set { } }
        public override bool Matches(object targetElement, System.Windows.Input.InputEventArgs inputEventArgs) { throw null; }
    }
    public partial class MouseGestureConverter : System.ComponentModel.TypeConverter
    {
        public MouseGestureConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public partial class MouseGestureValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public MouseGestureValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class MouseWheelEventArgs : System.Windows.Input.MouseEventArgs
    {
        public MouseWheelEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, int delta) : base(default(System.Windows.Input.MouseDevice), default(int)) { }
        public int Delta { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void MouseWheelEventHandler(object sender, System.Windows.Input.MouseWheelEventArgs e);
    public static partial class NavigationCommands
    {
        public static System.Windows.Input.RoutedUICommand BrowseBack { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand BrowseForward { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand BrowseHome { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand BrowseStop { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand DecreaseZoom { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Favorites { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand FirstPage { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand GoToPage { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand IncreaseZoom { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand LastPage { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand NavigateJournal { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand NextPage { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand PreviousPage { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Refresh { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Search { get { throw null; } }
        public static System.Windows.Input.RoutedUICommand Zoom { get { throw null; } }
    }
    public partial class NotifyInputEventArgs : System.EventArgs
    {
        internal NotifyInputEventArgs() { }
        public System.Windows.Input.InputManager InputManager { get { throw null; } }
        public System.Windows.Input.StagingAreaInputItem StagingItem { get { throw null; } }
    }
    public delegate void NotifyInputEventHandler(object sender, System.Windows.Input.NotifyInputEventArgs e);
    public sealed partial class PreProcessInputEventArgs : System.Windows.Input.ProcessInputEventArgs
    {
        internal PreProcessInputEventArgs() { }
        public bool Canceled { get { throw null; } }
        public void Cancel() { }
    }
    public delegate void PreProcessInputEventHandler(object sender, System.Windows.Input.PreProcessInputEventArgs e);
    public partial class ProcessInputEventArgs : System.Windows.Input.NotifyInputEventArgs
    {
        internal ProcessInputEventArgs() { }
        public System.Windows.Input.StagingAreaInputItem PeekInput() { throw null; }
        public System.Windows.Input.StagingAreaInputItem PopInput() { throw null; }
        public System.Windows.Input.StagingAreaInputItem PushInput(System.Windows.Input.InputEventArgs input, System.Windows.Input.StagingAreaInputItem promote) { throw null; }
        public System.Windows.Input.StagingAreaInputItem PushInput(System.Windows.Input.StagingAreaInputItem input) { throw null; }
    }
    public delegate void ProcessInputEventHandler(object sender, System.Windows.Input.ProcessInputEventArgs e);
    public partial class QueryCursorEventArgs : System.Windows.Input.MouseEventArgs
    {
        public QueryCursorEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp) : base(default(System.Windows.Input.MouseDevice), default(int)) { }
        public QueryCursorEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, System.Windows.Input.StylusDevice stylusDevice) : base(default(System.Windows.Input.MouseDevice), default(int)) { }
        public System.Windows.Input.Cursor Cursor { get { throw null; } set { } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void QueryCursorEventHandler(object sender, System.Windows.Input.QueryCursorEventArgs e);
    public enum RestoreFocusMode
    {
        Auto = 0,
        None = 1,
    }
    [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
    [System.Windows.Markup.ValueSerializerAttribute("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
    public partial class RoutedCommand : System.Windows.Input.ICommand
    {
        public RoutedCommand() { }
        public RoutedCommand(string name, System.Type ownerType) { }
        public RoutedCommand(string name, System.Type ownerType, System.Windows.Input.InputGestureCollection inputGestures) { }
        public System.Windows.Input.InputGestureCollection InputGestures { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Type OwnerType { get { throw null; } }
        public event System.EventHandler CanExecuteChanged { add { } remove { } }
        public bool CanExecute(object parameter, System.Windows.IInputElement target) { throw null; }
        public void Execute(object parameter, System.Windows.IInputElement target) { }
        bool System.Windows.Input.ICommand.CanExecute(object parameter) { throw null; }
        void System.Windows.Input.ICommand.Execute(object parameter) { }
    }
    [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
    public partial class RoutedUICommand : System.Windows.Input.RoutedCommand
    {
        public RoutedUICommand() { }
        public RoutedUICommand(string text, string name, System.Type ownerType) { }
        public RoutedUICommand(string text, string name, System.Type ownerType, System.Windows.Input.InputGestureCollection inputGestures) { }
        public string Text { get { throw null; } set { } }
    }
    public enum SpeechMode
    {
        Dictation = 0,
        Command = 1,
        Indeterminate = 2,
    }
    public partial class StagingAreaInputItem
    {
        internal StagingAreaInputItem() { }
        public System.Windows.Input.InputEventArgs Input { get { throw null; } }
        public object GetData(object key) { throw null; }
        public void SetData(object key, object value) { }
    }
    public static partial class Stylus
    {
        public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
        public static readonly System.Windows.DependencyProperty IsFlicksEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsPressAndHoldEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsTapFeedbackEnabledProperty;
        public static readonly System.Windows.DependencyProperty IsTouchFeedbackEnabledProperty;
        public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
        public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
        public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
        public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
        public static readonly System.Windows.RoutedEvent StylusDownEvent;
        public static readonly System.Windows.RoutedEvent StylusEnterEvent;
        public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
        public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
        public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
        public static readonly System.Windows.RoutedEvent StylusMoveEvent;
        public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
        public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
        public static readonly System.Windows.RoutedEvent StylusUpEvent;
        public static System.Windows.IInputElement Captured { get { throw null; } }
        public static System.Windows.Input.StylusDevice CurrentStylusDevice { get { throw null; } }
        public static System.Windows.IInputElement DirectlyOver { get { throw null; } }
        public static void AddGotStylusCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddLostStylusCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddPreviewStylusButtonDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
        public static void AddPreviewStylusButtonUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
        public static void AddPreviewStylusDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusDownEventHandler handler) { }
        public static void AddPreviewStylusInAirMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddPreviewStylusInRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddPreviewStylusMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddPreviewStylusOutOfRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddPreviewStylusSystemGestureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusSystemGestureEventHandler handler) { }
        public static void AddPreviewStylusUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddStylusButtonDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
        public static void AddStylusButtonUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
        public static void AddStylusDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusDownEventHandler handler) { }
        public static void AddStylusEnterHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddStylusInAirMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddStylusInRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddStylusLeaveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddStylusMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddStylusOutOfRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void AddStylusSystemGestureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusSystemGestureEventHandler handler) { }
        public static void AddStylusUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static bool Capture(System.Windows.IInputElement element) { throw null; }
        public static bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static bool GetIsFlicksEnabled(System.Windows.DependencyObject element) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static bool GetIsPressAndHoldEnabled(System.Windows.DependencyObject element) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static bool GetIsTapFeedbackEnabled(System.Windows.DependencyObject element) { throw null; }
        public static bool GetIsTouchFeedbackEnabled(System.Windows.DependencyObject element) { throw null; }
        public static void RemoveGotStylusCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemoveLostStylusCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemovePreviewStylusButtonDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
        public static void RemovePreviewStylusButtonUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
        public static void RemovePreviewStylusDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusDownEventHandler handler) { }
        public static void RemovePreviewStylusInAirMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemovePreviewStylusInRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemovePreviewStylusMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemovePreviewStylusOutOfRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemovePreviewStylusSystemGestureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusSystemGestureEventHandler handler) { }
        public static void RemovePreviewStylusUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemoveStylusButtonDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
        public static void RemoveStylusButtonUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
        public static void RemoveStylusDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusDownEventHandler handler) { }
        public static void RemoveStylusEnterHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemoveStylusInAirMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemoveStylusInRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemoveStylusLeaveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemoveStylusMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemoveStylusOutOfRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void RemoveStylusSystemGestureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusSystemGestureEventHandler handler) { }
        public static void RemoveStylusUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
        public static void SetIsFlicksEnabled(System.Windows.DependencyObject element, bool enabled) { }
        public static void SetIsPressAndHoldEnabled(System.Windows.DependencyObject element, bool enabled) { }
        public static void SetIsTapFeedbackEnabled(System.Windows.DependencyObject element, bool enabled) { }
        public static void SetIsTouchFeedbackEnabled(System.Windows.DependencyObject element, bool enabled) { }
        public static void Synchronize() { }
    }
    public partial class StylusButton
    {
        internal StylusButton() { }
        public System.Guid Guid { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Windows.Input.StylusButtonState StylusButtonState { get { throw null; } }
        public System.Windows.Input.StylusDevice StylusDevice { get { throw null; } }
        public override string ToString() { throw null; }
    }
    public partial class StylusButtonCollection : System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusButton>
    {
        internal StylusButtonCollection() : base(default(System.Collections.Generic.IList<System.Windows.Input.StylusButton>)) { }
        public System.Windows.Input.StylusButton GetStylusButtonByGuid(System.Guid guid) { throw null; }
    }
    public partial class StylusButtonEventArgs : System.Windows.Input.StylusEventArgs
    {
        public StylusButtonEventArgs(System.Windows.Input.StylusDevice stylusDevice, int timestamp, System.Windows.Input.StylusButton button) : base(default(System.Windows.Input.StylusDevice), default(int)) { }
        public System.Windows.Input.StylusButton StylusButton { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void StylusButtonEventHandler(object sender, System.Windows.Input.StylusButtonEventArgs e);
    public enum StylusButtonState
    {
        Up = 0,
        Down = 1,
    }
    public sealed partial class StylusDevice : System.Windows.Input.InputDevice
    {
        internal StylusDevice() { }
        public override System.Windows.PresentationSource ActiveSource { get { throw null; } }
        public System.Windows.IInputElement Captured { get { throw null; } }
        public System.Windows.IInputElement DirectlyOver { get { throw null; } }
        public int Id { get { throw null; } }
        public bool InAir { get { throw null; } }
        public bool InRange { get { throw null; } }
        public bool Inverted { get { throw null; } }
        public bool IsValid { get { throw null; } }
        public string Name { get { throw null; } }
        public System.Windows.Input.StylusButtonCollection StylusButtons { get { throw null; } }
        public System.Windows.Input.TabletDevice TabletDevice { get { throw null; } }
        public override System.Windows.IInputElement Target { get { throw null; } }
        public bool Capture(System.Windows.IInputElement element) { throw null; }
        public bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { throw null; }
        public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { throw null; }
        public System.Windows.Input.StylusPointCollection GetStylusPoints(System.Windows.IInputElement relativeTo) { throw null; }
        public System.Windows.Input.StylusPointCollection GetStylusPoints(System.Windows.IInputElement relativeTo, System.Windows.Input.StylusPointDescription subsetToReformatTo) { throw null; }
        public void Synchronize() { }
        public override string ToString() { throw null; }
    }
    public partial class StylusDeviceCollection : System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusDevice>
    {
        internal StylusDeviceCollection() : base(default(System.Collections.Generic.IList<System.Windows.Input.StylusDevice>)) { }
    }
    public partial class StylusDownEventArgs : System.Windows.Input.StylusEventArgs
    {
        public StylusDownEventArgs(System.Windows.Input.StylusDevice stylusDevice, int timestamp) : base(default(System.Windows.Input.StylusDevice), default(int)) { }
        public int TapCount { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void StylusDownEventHandler(object sender, System.Windows.Input.StylusDownEventArgs e);
    public partial class StylusEventArgs : System.Windows.Input.InputEventArgs
    {
        public StylusEventArgs(System.Windows.Input.StylusDevice stylus, int timestamp) : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public bool InAir { get { throw null; } }
        public bool Inverted { get { throw null; } }
        public System.Windows.Input.StylusDevice StylusDevice { get { throw null; } }
        public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { throw null; }
        public System.Windows.Input.StylusPointCollection GetStylusPoints(System.Windows.IInputElement relativeTo) { throw null; }
        public System.Windows.Input.StylusPointCollection GetStylusPoints(System.Windows.IInputElement relativeTo, System.Windows.Input.StylusPointDescription subsetToReformatTo) { throw null; }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void StylusEventHandler(object sender, System.Windows.Input.StylusEventArgs e);
    public partial struct StylusPoint : System.IEquatable<System.Windows.Input.StylusPoint>
    {
        public static readonly double MaxXY;
        public static readonly double MinXY;
        public StylusPoint(double x, double y) { throw null; }
        public StylusPoint(double x, double y, float pressureFactor) { throw null; }
        public StylusPoint(double x, double y, float pressureFactor, System.Windows.Input.StylusPointDescription stylusPointDescription, int[] additionalValues) { throw null; }
        public System.Windows.Input.StylusPointDescription Description { get { throw null; } }
        public float PressureFactor { get { throw null; } set { } }
        public double X { get { throw null; } set { } }
        public double Y { get { throw null; } set { } }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Input.StylusPoint value) { throw null; }
        public static bool Equals(System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2) { throw null; }
        public override int GetHashCode() { throw null; }
        public int GetPropertyValue(System.Windows.Input.StylusPointProperty stylusPointProperty) { throw null; }
        public bool HasProperty(System.Windows.Input.StylusPointProperty stylusPointProperty) { throw null; }
        public static bool operator ==(System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2) { throw null; }
        public static explicit operator System.Windows.Point(System.Windows.Input.StylusPoint stylusPoint) { throw null; }
        public static bool operator !=(System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2) { throw null; }
        public void SetPropertyValue(System.Windows.Input.StylusPointProperty stylusPointProperty, int value) { }
        public System.Windows.Point ToPoint() { throw null; }
    }
    public partial class StylusPointCollection : System.Collections.ObjectModel.Collection<System.Windows.Input.StylusPoint>
    {
        public StylusPointCollection() { }
        public StylusPointCollection(System.Collections.Generic.IEnumerable<System.Windows.Input.StylusPoint> stylusPoints) { }
        public StylusPointCollection(System.Collections.Generic.IEnumerable<System.Windows.Point> points) { }
        public StylusPointCollection(int initialCapacity) { }
        public StylusPointCollection(System.Windows.Input.StylusPointDescription stylusPointDescription) { }
        public StylusPointCollection(System.Windows.Input.StylusPointDescription stylusPointDescription, int initialCapacity) { }
        public System.Windows.Input.StylusPointDescription Description { get { throw null; } }
        public event System.EventHandler Changed { add { } remove { } }
        public void Add(System.Windows.Input.StylusPointCollection stylusPoints) { }
        protected sealed override void ClearItems() { }
        public System.Windows.Input.StylusPointCollection Clone() { throw null; }
        protected sealed override void InsertItem(int index, System.Windows.Input.StylusPoint stylusPoint) { }
        protected virtual void OnChanged(System.EventArgs e) { }
        public static explicit operator System.Windows.Point[](System.Windows.Input.StylusPointCollection stylusPoints) { throw null; }
        public System.Windows.Input.StylusPointCollection Reformat(System.Windows.Input.StylusPointDescription subsetToReformatTo) { throw null; }
        protected sealed override void RemoveItem(int index) { }
        protected sealed override void SetItem(int index, System.Windows.Input.StylusPoint stylusPoint) { }
        public int[] ToHiMetricArray() { throw null; }
    }
    public partial class StylusPointDescription
    {
        public StylusPointDescription() { }
        public StylusPointDescription(System.Collections.Generic.IEnumerable<System.Windows.Input.StylusPointPropertyInfo> stylusPointPropertyInfos) { }
        public int PropertyCount { get { throw null; } }
        public static bool AreCompatible(System.Windows.Input.StylusPointDescription stylusPointDescription1, System.Windows.Input.StylusPointDescription stylusPointDescription2) { throw null; }
        public static System.Windows.Input.StylusPointDescription GetCommonDescription(System.Windows.Input.StylusPointDescription stylusPointDescription, System.Windows.Input.StylusPointDescription stylusPointDescriptionPreserveInfo) { throw null; }
        public System.Windows.Input.StylusPointPropertyInfo GetPropertyInfo(System.Windows.Input.StylusPointProperty stylusPointProperty) { throw null; }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusPointPropertyInfo> GetStylusPointProperties() { throw null; }
        public bool HasProperty(System.Windows.Input.StylusPointProperty stylusPointProperty) { throw null; }
        public bool IsSubsetOf(System.Windows.Input.StylusPointDescription stylusPointDescriptionSuperset) { throw null; }
    }
    public static partial class StylusPointProperties
    {
        public static readonly System.Windows.Input.StylusPointProperty AltitudeOrientation;
        public static readonly System.Windows.Input.StylusPointProperty AzimuthOrientation;
        public static readonly System.Windows.Input.StylusPointProperty BarrelButton;
        public static readonly System.Windows.Input.StylusPointProperty ButtonPressure;
        public static readonly System.Windows.Input.StylusPointProperty Height;
        public static readonly System.Windows.Input.StylusPointProperty NormalPressure;
        public static readonly System.Windows.Input.StylusPointProperty PacketStatus;
        public static readonly System.Windows.Input.StylusPointProperty PitchRotation;
        public static readonly System.Windows.Input.StylusPointProperty RollRotation;
        public static readonly System.Windows.Input.StylusPointProperty SecondaryTipButton;
        public static readonly System.Windows.Input.StylusPointProperty SerialNumber;
        public static readonly System.Windows.Input.StylusPointProperty SystemTouch;
        public static readonly System.Windows.Input.StylusPointProperty TangentPressure;
        public static readonly System.Windows.Input.StylusPointProperty TipButton;
        public static readonly System.Windows.Input.StylusPointProperty TwistOrientation;
        public static readonly System.Windows.Input.StylusPointProperty Width;
        public static readonly System.Windows.Input.StylusPointProperty X;
        public static readonly System.Windows.Input.StylusPointProperty XTiltOrientation;
        public static readonly System.Windows.Input.StylusPointProperty Y;
        public static readonly System.Windows.Input.StylusPointProperty YawRotation;
        public static readonly System.Windows.Input.StylusPointProperty YTiltOrientation;
        public static readonly System.Windows.Input.StylusPointProperty Z;
    }
    public partial class StylusPointProperty
    {
        public StylusPointProperty(System.Guid identifier, bool isButton) { }
        protected StylusPointProperty(System.Windows.Input.StylusPointProperty stylusPointProperty) { }
        public System.Guid Id { get { throw null; } }
        public bool IsButton { get { throw null; } }
        public override string ToString() { throw null; }
    }
    public partial class StylusPointPropertyInfo : System.Windows.Input.StylusPointProperty
    {
        public StylusPointPropertyInfo(System.Windows.Input.StylusPointProperty stylusPointProperty) : base(default(System.Guid), default(bool)) { }
        public StylusPointPropertyInfo(System.Windows.Input.StylusPointProperty stylusPointProperty, int minimum, int maximum, System.Windows.Input.StylusPointPropertyUnit unit, float resolution) : base(default(System.Guid), default(bool)) { }
        public int Maximum { get { throw null; } }
        public int Minimum { get { throw null; } }
        public float Resolution { get { throw null; } }
        public System.Windows.Input.StylusPointPropertyUnit Unit { get { throw null; } }
    }
    public enum StylusPointPropertyUnit
    {
        None = 0,
        Inches = 1,
        Centimeters = 2,
        Degrees = 3,
        Radians = 4,
        Seconds = 5,
        Pounds = 6,
        Grams = 7,
    }
    public partial class StylusSystemGestureEventArgs : System.Windows.Input.StylusEventArgs
    {
        public StylusSystemGestureEventArgs(System.Windows.Input.StylusDevice stylusDevice, int timestamp, System.Windows.Input.SystemGesture systemGesture) : base(default(System.Windows.Input.StylusDevice), default(int)) { }
        public System.Windows.Input.SystemGesture SystemGesture { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void StylusSystemGestureEventHandler(object sender, System.Windows.Input.StylusSystemGestureEventArgs e);
    public enum SystemGesture
    {
        None = 0,
        Tap = 16,
        RightTap = 18,
        Drag = 19,
        RightDrag = 20,
        HoldEnter = 21,
        HoldLeave = 22,
        HoverEnter = 23,
        HoverLeave = 24,
        Flick = 31,
        TwoFingerTap = 4352,
    }
    public static partial class Tablet
    {
        public static System.Windows.Input.TabletDevice CurrentTabletDevice { get { throw null; } }
        public static System.Windows.Input.TabletDeviceCollection TabletDevices { get { throw null; } }
    }
    public sealed partial class TabletDevice : System.Windows.Input.InputDevice
    {
        internal TabletDevice() { }
        public override System.Windows.PresentationSource ActiveSource { get { throw null; } }
        public int Id { get { throw null; } }
        public string Name { get { throw null; } }
        public string ProductId { get { throw null; } }
        public System.Windows.Input.StylusDeviceCollection StylusDevices { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusPointProperty> SupportedStylusPointProperties { get { throw null; } }
        public System.Windows.Input.TabletHardwareCapabilities TabletHardwareCapabilities { get { throw null; } }
        public override System.Windows.IInputElement Target { get { throw null; } }
        public System.Windows.Input.TabletDeviceType Type { get { throw null; } }
        public override string ToString() { throw null; }
    }
    public partial class TabletDeviceCollection : System.Collections.ICollection, System.Collections.IEnumerable
    {
        public TabletDeviceCollection() { }
        public int Count { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Input.TabletDevice this[int index] { get { throw null; } }
        public object SyncRoot { get { throw null; } }
        public void CopyTo(System.Windows.Input.TabletDevice[] array, int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    }
    public enum TabletDeviceType
    {
        Stylus = 0,
        Touch = 1,
    }
    [System.FlagsAttribute]
    public enum TabletHardwareCapabilities
    {
        None = 0,
        Integrated = 1,
        StylusMustTouch = 2,
        HardProximity = 4,
        StylusHasPhysicalIds = 8,
        SupportsPressure = 1073741824,
    }
    public partial class TextComposition : System.Windows.Threading.DispatcherObject
    {
        public TextComposition(System.Windows.Input.InputManager inputManager, System.Windows.IInputElement source, string resultText) { }
        public TextComposition(System.Windows.Input.InputManager inputManager, System.Windows.IInputElement source, string resultText, System.Windows.Input.TextCompositionAutoComplete autoComplete) { }
        public System.Windows.Input.TextCompositionAutoComplete AutoComplete { get { throw null; } }
        [System.CLSCompliantAttribute(false)]
        public string CompositionText { get { throw null; } protected set { } }
        [System.CLSCompliantAttribute(false)]
        public string ControlText { get { throw null; } protected set { } }
        [System.CLSCompliantAttribute(false)]
        public string SystemCompositionText { get { throw null; } protected set { } }
        [System.CLSCompliantAttribute(false)]
        public string SystemText { get { throw null; } protected set { } }
        [System.CLSCompliantAttribute(false)]
        public string Text { get { throw null; } protected set { } }
        public virtual void Complete() { }
    }
    public enum TextCompositionAutoComplete
    {
        Off = 0,
        On = 1,
    }
    public partial class TextCompositionEventArgs : System.Windows.Input.InputEventArgs
    {
        public TextCompositionEventArgs(System.Windows.Input.InputDevice inputDevice, System.Windows.Input.TextComposition composition) : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public string ControlText { get { throw null; } }
        public string SystemText { get { throw null; } }
        public string Text { get { throw null; } }
        public System.Windows.Input.TextComposition TextComposition { get { throw null; } }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public delegate void TextCompositionEventHandler(object sender, System.Windows.Input.TextCompositionEventArgs e);
    public sealed partial class TextCompositionManager : System.Windows.Threading.DispatcherObject
    {
        internal TextCompositionManager() { }
        public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
        public static readonly System.Windows.RoutedEvent PreviewTextInputStartEvent;
        public static readonly System.Windows.RoutedEvent PreviewTextInputUpdateEvent;
        public static readonly System.Windows.RoutedEvent TextInputEvent;
        public static readonly System.Windows.RoutedEvent TextInputStartEvent;
        public static readonly System.Windows.RoutedEvent TextInputUpdateEvent;
        public static void AddPreviewTextInputHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void AddPreviewTextInputStartHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void AddPreviewTextInputUpdateHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void AddTextInputHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void AddTextInputStartHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void AddTextInputUpdateHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static bool CompleteComposition(System.Windows.Input.TextComposition composition) { throw null; }
        public static void RemovePreviewTextInputHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void RemovePreviewTextInputStartHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void RemovePreviewTextInputUpdateHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void RemoveTextInputHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void RemoveTextInputStartHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static void RemoveTextInputUpdateHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
        public static bool StartComposition(System.Windows.Input.TextComposition composition) { throw null; }
        public static bool UpdateComposition(System.Windows.Input.TextComposition composition) { throw null; }
    }
    public static partial class Touch
    {
        public static event System.Windows.Input.TouchFrameEventHandler FrameReported { add { } remove { } }
    }
    public enum TouchAction
    {
        Down = 0,
        Move = 1,
        Up = 2,
    }
    public abstract partial class TouchDevice : System.Windows.Input.InputDevice, System.Windows.Input.IManipulator
    {
        protected TouchDevice(int deviceId) { }
        public sealed override System.Windows.PresentationSource ActiveSource { get { throw null; } }
        public System.Windows.IInputElement Captured { get { throw null; } }
        public System.Windows.Input.CaptureMode CaptureMode { get { throw null; } }
        public System.Windows.IInputElement DirectlyOver { get { throw null; } }
        public int Id { get { throw null; } }
        public bool IsActive { get { throw null; } }
        int System.Windows.Input.IManipulator.Id { get { throw null; } }
        public sealed override System.Windows.IInputElement Target { get { throw null; } }
        public event System.EventHandler Activated { add { } remove { } }
        public event System.EventHandler Deactivated { add { } remove { } }
        public event System.EventHandler Updated { add { } remove { } }
        protected void Activate() { }
        public bool Capture(System.Windows.IInputElement element) { throw null; }
        public bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { throw null; }
        protected void Deactivate() { }
        public abstract System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints(System.Windows.IInputElement relativeTo);
        public abstract System.Windows.Input.TouchPoint GetTouchPoint(System.Windows.IInputElement relativeTo);
        protected virtual void OnCapture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { }
        protected virtual void OnManipulationEnded(bool cancel) { }
        protected virtual void OnManipulationStarted() { }
        protected bool ReportDown() { throw null; }
        protected bool ReportMove() { throw null; }
        protected bool ReportUp() { throw null; }
        protected void SetActiveSource(System.Windows.PresentationSource activeSource) { }
        public void Synchronize() { }
        System.Windows.Point System.Windows.Input.IManipulator.GetPosition(System.Windows.IInputElement relativeTo) { throw null; }
        void System.Windows.Input.IManipulator.ManipulationEnded(bool cancel) { }
    }
    public partial class TouchEventArgs : System.Windows.Input.InputEventArgs
    {
        public TouchEventArgs(System.Windows.Input.TouchDevice touchDevice, int timestamp) : base(default(System.Windows.Input.InputDevice), default(int)) { }
        public System.Windows.Input.TouchDevice TouchDevice { get { throw null; } }
        public System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints(System.Windows.IInputElement relativeTo) { throw null; }
        public System.Windows.Input.TouchPoint GetTouchPoint(System.Windows.IInputElement relativeTo) { throw null; }
        protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    }
    public sealed partial class TouchFrameEventArgs : System.EventArgs
    {
        internal TouchFrameEventArgs() { }
        public int Timestamp { get { throw null; } }
        public System.Windows.Input.TouchPoint GetPrimaryTouchPoint(System.Windows.IInputElement relativeTo) { throw null; }
        public System.Windows.Input.TouchPointCollection GetTouchPoints(System.Windows.IInputElement relativeTo) { throw null; }
        public void SuspendMousePromotionUntilTouchUp() { }
    }
    public delegate void TouchFrameEventHandler(object sender, System.Windows.Input.TouchFrameEventArgs e);
    public partial class TouchPoint : System.IEquatable<System.Windows.Input.TouchPoint>
    {
        public TouchPoint(System.Windows.Input.TouchDevice device, System.Windows.Point position, System.Windows.Rect bounds, System.Windows.Input.TouchAction action) { }
        public System.Windows.Input.TouchAction Action { get { throw null; } }
        public System.Windows.Rect Bounds { get { throw null; } }
        public System.Windows.Point Position { get { throw null; } }
        public System.Windows.Size Size { get { throw null; } }
        public System.Windows.Input.TouchDevice TouchDevice { get { throw null; } }
        bool System.IEquatable<System.Windows.Input.TouchPoint>.Equals(System.Windows.Input.TouchPoint other) { throw null; }
    }
    public partial class TouchPointCollection : System.Collections.ObjectModel.Collection<System.Windows.Input.TouchPoint>
    {
        public TouchPointCollection() { }
    }
}
namespace System.Windows.Input.StylusPlugIns
{
    public partial class DynamicRenderer : System.Windows.Input.StylusPlugIns.StylusPlugIn
    {
        public DynamicRenderer() { }
        public System.Windows.Ink.DrawingAttributes DrawingAttributes { get { throw null; } set { } }
        public System.Windows.Media.Visual RootVisual { get { throw null; } }
        protected System.Windows.Threading.Dispatcher GetDispatcher() { throw null; }
        protected override void OnAdded() { }
        protected virtual void OnDraw(System.Windows.Media.DrawingContext drawingContext, System.Windows.Input.StylusPointCollection stylusPoints, System.Windows.Media.Geometry geometry, System.Windows.Media.Brush fillBrush) { }
        protected virtual void OnDrawingAttributesReplaced() { }
        protected override void OnEnabledChanged() { }
        protected override void OnIsActiveForInputChanged() { }
        protected override void OnRemoved() { }
        protected override void OnStylusDown(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
        protected override void OnStylusDownProcessed(object callbackData, bool targetVerified) { }
        protected override void OnStylusEnter(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput, bool confirmed) { }
        protected override void OnStylusLeave(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput, bool confirmed) { }
        protected override void OnStylusMove(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
        protected override void OnStylusUp(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
        protected override void OnStylusUpProcessed(object callbackData, bool targetVerified) { }
        public virtual void Reset(System.Windows.Input.StylusDevice stylusDevice, System.Windows.Input.StylusPointCollection stylusPoints) { }
    }
    public partial class RawStylusInput
    {
        internal RawStylusInput() { }
        public int StylusDeviceId { get { throw null; } }
        public int TabletDeviceId { get { throw null; } }
        public int Timestamp { get { throw null; } }
        public System.Windows.Input.StylusPointCollection GetStylusPoints() { throw null; }
        public void NotifyWhenProcessed(object callbackData) { }
        public void SetStylusPoints(System.Windows.Input.StylusPointCollection stylusPoints) { }
    }
    public abstract partial class StylusPlugIn
    {
        protected StylusPlugIn() { }
        public System.Windows.UIElement Element { get { throw null; } }
        public System.Windows.Rect ElementBounds { get { throw null; } }
        public bool Enabled { get { throw null; } set { } }
        public bool IsActiveForInput { get { throw null; } }
        protected virtual void OnAdded() { }
        protected virtual void OnEnabledChanged() { }
        protected virtual void OnIsActiveForInputChanged() { }
        protected virtual void OnRemoved() { }
        protected virtual void OnStylusDown(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
        protected virtual void OnStylusDownProcessed(object callbackData, bool targetVerified) { }
        protected virtual void OnStylusEnter(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput, bool confirmed) { }
        protected virtual void OnStylusLeave(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput, bool confirmed) { }
        protected virtual void OnStylusMove(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
        protected virtual void OnStylusMoveProcessed(object callbackData, bool targetVerified) { }
        protected virtual void OnStylusUp(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
        protected virtual void OnStylusUpProcessed(object callbackData, bool targetVerified) { }
    }
    public sealed partial class StylusPlugInCollection : System.Collections.ObjectModel.Collection<System.Windows.Input.StylusPlugIns.StylusPlugIn>
    {
        internal StylusPlugInCollection() { }
        protected override void ClearItems() { }
        protected override void InsertItem(int index, System.Windows.Input.StylusPlugIns.StylusPlugIn plugIn) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, System.Windows.Input.StylusPlugIns.StylusPlugIn plugIn) { }
    }
}
namespace System.Windows.Input.StylusWisp
{
    public partial class WispTabletDeviceCollection : System.Windows.Input.TabletDeviceCollection
    {
        internal WispTabletDeviceCollection() { }
    }
}
namespace System.Windows.Interop
{
    public static partial class CursorInteropHelper
    {
        public static System.Windows.Input.Cursor Create(System.Runtime.InteropServices.SafeHandle cursorHandle) { throw null; }
    }
    public partial class D3DImage : System.Windows.Media.ImageSource
    {
        public static readonly System.Windows.DependencyProperty IsFrontBufferAvailableProperty;
        public D3DImage() { }
        public D3DImage(double dpiX, double dpiY) { }
        public sealed override double Height { get { throw null; } }
        public bool IsFrontBufferAvailable { get { throw null; } }
        public sealed override System.Windows.Media.ImageMetadata Metadata { get { throw null; } }
        public int PixelHeight { get { throw null; } }
        public int PixelWidth { get { throw null; } }
        public sealed override double Width { get { throw null; } }
        public event System.Windows.DependencyPropertyChangedEventHandler IsFrontBufferAvailableChanged { add { } remove { } }
        public void AddDirtyRect(System.Windows.Int32Rect dirtyRect) { }
        public new System.Windows.Interop.D3DImage Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Interop.D3DImage CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected internal virtual System.Windows.Media.Imaging.BitmapSource CopyBackBuffer() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        ~D3DImage() { }
        protected sealed override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public void Lock() { }
        public void SetBackBuffer(System.Windows.Interop.D3DResourceType backBufferType, System.IntPtr backBuffer) { }
        public void SetBackBuffer(System.Windows.Interop.D3DResourceType backBufferType, System.IntPtr backBuffer, bool enableSoftwareFallback) { }
        public bool TryLock(System.Windows.Duration timeout) { throw null; }
        public void Unlock() { }
    }
    public enum D3DResourceType
    {
        IDirect3DSurface9 = 0,
    }
    public partial class HwndSource : System.Windows.PresentationSource, System.IDisposable, System.Windows.Interop.IKeyboardInputSink, System.Windows.Interop.IWin32Window
    {
        public HwndSource(int classStyle, int style, int exStyle, int x, int y, int width, int height, string name, System.IntPtr parent) { }
        public HwndSource(int classStyle, int style, int exStyle, int x, int y, int width, int height, string name, System.IntPtr parent, bool adjustSizingForNonClientArea) { }
        public HwndSource(int classStyle, int style, int exStyle, int x, int y, string name, System.IntPtr parent) { }
        public HwndSource(System.Windows.Interop.HwndSourceParameters parameters) { }
        public bool AcquireHwndFocusInMenuMode { get { throw null; } }
        public System.Collections.Generic.IEnumerable<System.Windows.Interop.IKeyboardInputSink> ChildKeyboardInputSinks { get { throw null; } }
        public new System.Windows.Interop.HwndTarget CompositionTarget { get { throw null; } }
        public static bool DefaultAcquireHwndFocusInMenuMode { get { throw null; } set { } }
        public System.IntPtr Handle { get { throw null; } }
        public override bool IsDisposed { get { throw null; } }
        protected System.Windows.Interop.IKeyboardInputSite KeyboardInputSiteCore { get { throw null; } set { } }
        public System.Windows.Input.RestoreFocusMode RestoreFocusMode { get { throw null; } }
        public override System.Windows.Media.Visual RootVisual { get { throw null; } set { } }
        public System.Windows.SizeToContent SizeToContent { get { throw null; } set { } }
        System.Windows.Interop.IKeyboardInputSite System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite { get { throw null; } set { } }
        public bool UsesPerPixelOpacity { get { throw null; } }
        public event System.Windows.AutoResizedEventHandler AutoResized { add { } remove { } }
        public event System.EventHandler Disposed { add { } remove { } }
        public event System.Windows.HwndDpiChangedEventHandler DpiChanged { add { } remove { } }
        public event System.EventHandler SizeToContentChanged { add { } remove { } }
        public void AddHook(System.Windows.Interop.HwndSourceHook hook) { }
        public System.Runtime.InteropServices.HandleRef CreateHandleRef() { throw null; }
        public void Dispose() { }
        public static System.Windows.Interop.HwndSource FromHwnd(System.IntPtr hwnd) { throw null; }
        protected override System.Windows.Media.CompositionTarget GetCompositionTargetCore() { throw null; }
        protected virtual bool HasFocusWithinCore() { throw null; }
        protected virtual void OnDpiChanged(System.Windows.HwndDpiChangedEventArgs e) { }
        protected virtual bool OnMnemonicCore(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { throw null; }
        protected System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSinkCore(System.Windows.Interop.IKeyboardInputSink sink) { throw null; }
        public void RemoveHook(System.Windows.Interop.HwndSourceHook hook) { }
        bool System.Windows.Interop.IKeyboardInputSink.HasFocusWithin() { throw null; }
        bool System.Windows.Interop.IKeyboardInputSink.OnMnemonic(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { throw null; }
        System.Windows.Interop.IKeyboardInputSite System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink sink) { throw null; }
        bool System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest request) { throw null; }
        bool System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { throw null; }
        bool System.Windows.Interop.IKeyboardInputSink.TranslateChar(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { throw null; }
        protected virtual bool TabIntoCore(System.Windows.Input.TraversalRequest request) { throw null; }
        protected virtual bool TranslateAcceleratorCore(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { throw null; }
        protected virtual bool TranslateCharCore(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { throw null; }
    }
    public delegate System.IntPtr HwndSourceHook(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled);
    public partial struct HwndSourceParameters
    {
        public HwndSourceParameters(string name) { throw null; }
        public HwndSourceParameters(string name, int width, int height) { throw null; }
        public bool AcquireHwndFocusInMenuMode { get { throw null; } set { } }
        public bool AdjustSizingForNonClientArea { get { throw null; } set { } }
        public int ExtendedWindowStyle { get { throw null; } set { } }
        public bool HasAssignedSize { get { throw null; } }
        public int Height { get { throw null; } set { } }
        public System.Windows.Interop.HwndSourceHook HwndSourceHook { get { throw null; } set { } }
        public System.IntPtr ParentWindow { get { throw null; } set { } }
        public int PositionX { get { throw null; } set { } }
        public int PositionY { get { throw null; } set { } }
        public System.Windows.Input.RestoreFocusMode RestoreFocusMode { get { throw null; } set { } }
        public bool TreatAncestorsAsNonClientArea { get { throw null; } set { } }
        public bool TreatAsInputRoot { get { throw null; } set { } }
        public bool UsesPerPixelOpacity { get { throw null; } set { } }
        public bool UsesPerPixelTransparency { get { throw null; } set { } }
        public int Width { get { throw null; } set { } }
        public int WindowClassStyle { get { throw null; } set { } }
        public string WindowName { get { throw null; } set { } }
        public int WindowStyle { get { throw null; } set { } }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.Interop.HwndSourceParameters obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Interop.HwndSourceParameters a, System.Windows.Interop.HwndSourceParameters b) { throw null; }
        public static bool operator !=(System.Windows.Interop.HwndSourceParameters a, System.Windows.Interop.HwndSourceParameters b) { throw null; }
        public void SetPosition(int x, int y) { }
        public void SetSize(int width, int height) { }
    }
    public partial class HwndTarget : System.Windows.Media.CompositionTarget
    {
        public HwndTarget(System.IntPtr hwnd) { }
        public System.Windows.Media.Color BackgroundColor { get { throw null; } set { } }
        public System.Windows.Interop.RenderMode RenderMode { get { throw null; } set { } }
        public override System.Windows.Media.Visual RootVisual { set { } }
        public override System.Windows.Media.Matrix TransformFromDevice { get { throw null; } }
        public override System.Windows.Media.Matrix TransformToDevice { get { throw null; } }
        public bool UsesPerPixelOpacity { get { throw null; } }
        public override void Dispose() { }
    }
    public static partial class Imaging
    {
        public static System.Windows.Media.Imaging.BitmapSource CreateBitmapSourceFromHBitmap(System.IntPtr bitmap, System.IntPtr palette, System.Windows.Int32Rect sourceRect, System.Windows.Media.Imaging.BitmapSizeOptions sizeOptions) { throw null; }
        public static System.Windows.Media.Imaging.BitmapSource CreateBitmapSourceFromHIcon(System.IntPtr icon, System.Windows.Int32Rect sourceRect, System.Windows.Media.Imaging.BitmapSizeOptions sizeOptions) { throw null; }
        public static System.Windows.Media.Imaging.BitmapSource CreateBitmapSourceFromMemorySection(System.IntPtr section, int pixelWidth, int pixelHeight, System.Windows.Media.PixelFormat format, int stride, int offset) { throw null; }
    }
    public sealed partial class InteropBitmap : System.Windows.Media.Imaging.BitmapSource
    {
        internal InteropBitmap() { }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public void Invalidate() { }
        public void Invalidate(System.Windows.Int32Rect? dirtyRect) { }
    }
    public partial interface IWin32Window
    {
        System.IntPtr Handle { get; }
    }
    public enum RenderMode
    {
        Default = 0,
        SoftwareOnly = 1,
    }
}
namespace System.Windows.Markup
{
    public partial interface IAddChild
    {
        void AddChild(object value);
        void AddText(string text);
    }
    internal interface IAddChildInternal : IAddChild
    {
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Markup.XmlLanguageConverter))]
    public partial class XmlLanguage
    {
        internal XmlLanguage() { }
        public static System.Windows.Markup.XmlLanguage Empty { get { throw null; } }
        public string IetfLanguageTag { get { throw null; } }
        public System.Globalization.CultureInfo GetEquivalentCulture() { throw null; }
        public static System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) { throw null; }
        public System.Globalization.CultureInfo GetSpecificCulture() { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class XmlLanguageConverter : System.ComponentModel.TypeConverter
    {
        public XmlLanguageConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object source) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { throw null; }
    }
}
namespace System.Windows.Media
{
    public enum AlignmentX
    {
        Left = 0,
        Center = 1,
        Right = 2,
    }
    public enum AlignmentY
    {
        Top = 0,
        Center = 1,
        Bottom = 2,
    }
    public sealed partial class ArcSegment : System.Windows.Media.PathSegment
    {
        public static readonly System.Windows.DependencyProperty IsLargeArcProperty;
        public static readonly System.Windows.DependencyProperty PointProperty;
        public static readonly System.Windows.DependencyProperty RotationAngleProperty;
        public static readonly System.Windows.DependencyProperty SizeProperty;
        public static readonly System.Windows.DependencyProperty SweepDirectionProperty;
        public ArcSegment() { }
        public ArcSegment(System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked) { }
        public bool IsLargeArc { get { throw null; } set { } }
        public System.Windows.Point Point { get { throw null; } set { } }
        public double RotationAngle { get { throw null; } set { } }
        public System.Windows.Size Size { get { throw null; } set { } }
        public System.Windows.Media.SweepDirection SweepDirection { get { throw null; } set { } }
        public new System.Windows.Media.ArcSegment Clone() { throw null; }
        public new System.Windows.Media.ArcSegment CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class BezierSegment : System.Windows.Media.PathSegment
    {
        public static readonly System.Windows.DependencyProperty Point1Property;
        public static readonly System.Windows.DependencyProperty Point2Property;
        public static readonly System.Windows.DependencyProperty Point3Property;
        public BezierSegment() { }
        public BezierSegment(System.Windows.Point point1, System.Windows.Point point2, System.Windows.Point point3, bool isStroked) { }
        public System.Windows.Point Point1 { get { throw null; } set { } }
        public System.Windows.Point Point2 { get { throw null; } set { } }
        public System.Windows.Point Point3 { get { throw null; } set { } }
        public new System.Windows.Media.BezierSegment Clone() { throw null; }
        public new System.Windows.Media.BezierSegment CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class BitmapCache : System.Windows.Media.CacheMode
    {
        public static readonly System.Windows.DependencyProperty EnableClearTypeProperty;
        public static readonly System.Windows.DependencyProperty RenderAtScaleProperty;
        public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;
        public BitmapCache() { }
        public BitmapCache(double renderAtScale) { }
        public bool EnableClearType { get { throw null; } set { } }
        public double RenderAtScale { get { throw null; } set { } }
        public bool SnapsToDevicePixels { get { throw null; } set { } }
        public new System.Windows.Media.BitmapCache Clone() { throw null; }
        public new System.Windows.Media.BitmapCache CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class BitmapCacheBrush : System.Windows.Media.Brush
    {
        public static readonly System.Windows.DependencyProperty AutoLayoutContentProperty;
        public static readonly System.Windows.DependencyProperty BitmapCacheProperty;
        public static readonly System.Windows.DependencyProperty TargetProperty;
        public BitmapCacheBrush() { }
        public BitmapCacheBrush(System.Windows.Media.Visual visual) { }
        public bool AutoLayoutContent { get { throw null; } set { } }
        public System.Windows.Media.BitmapCache BitmapCache { get { throw null; } set { } }
        public System.Windows.Media.Visual Target { get { throw null; } set { } }
        public new System.Windows.Media.BitmapCacheBrush Clone() { throw null; }
        public new System.Windows.Media.BitmapCacheBrush CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    }
    public enum BitmapScalingMode
    {
        Unspecified = 0,
        Linear = 1,
        LowQuality = 1,
        Fant = 2,
        HighQuality = 2,
        NearestNeighbor = 3,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.BrushConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.BrushValueSerializer))]
    public abstract partial class Brush : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        public static readonly System.Windows.DependencyProperty OpacityProperty;
        public static readonly System.Windows.DependencyProperty RelativeTransformProperty;
        public static readonly System.Windows.DependencyProperty TransformProperty;
        protected Brush() { }
        public double Opacity { get { throw null; } set { } }
        public System.Windows.Media.Transform RelativeTransform { get { throw null; } set { } }
        public System.Windows.Media.Transform Transform { get { throw null; } set { } }
        public new System.Windows.Media.Brush Clone() { throw null; }
        public new System.Windows.Media.Brush CloneCurrentValue() { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public sealed partial class BrushConverter : System.ComponentModel.TypeConverter
    {
        public BrushConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class Brushes
    {
        internal Brushes() { }
        public static System.Windows.Media.SolidColorBrush AliceBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush AntiqueWhite { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Aqua { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Aquamarine { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Azure { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Beige { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Bisque { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Black { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush BlanchedAlmond { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Blue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush BlueViolet { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Brown { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush BurlyWood { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush CadetBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Chartreuse { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Chocolate { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Coral { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush CornflowerBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Cornsilk { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Crimson { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Cyan { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkCyan { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkGoldenrod { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkGray { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkKhaki { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkMagenta { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkOliveGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkOrange { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkOrchid { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkRed { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkSalmon { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkSeaGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkSlateBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkSlateGray { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkTurquoise { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DarkViolet { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DeepPink { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DeepSkyBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DimGray { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush DodgerBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Firebrick { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush FloralWhite { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush ForestGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Fuchsia { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Gainsboro { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush GhostWhite { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Gold { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Goldenrod { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Gray { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Green { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush GreenYellow { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Honeydew { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush HotPink { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush IndianRed { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Indigo { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Ivory { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Khaki { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Lavender { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LavenderBlush { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LawnGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LemonChiffon { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightCoral { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightCyan { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightGoldenrodYellow { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightGray { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightPink { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightSalmon { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightSeaGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightSkyBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightSlateGray { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightSteelBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LightYellow { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Lime { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush LimeGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Linen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Magenta { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Maroon { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MediumAquamarine { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MediumBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MediumOrchid { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MediumPurple { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MediumSeaGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MediumSlateBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MediumSpringGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MediumTurquoise { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MediumVioletRed { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MidnightBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MintCream { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush MistyRose { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Moccasin { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush NavajoWhite { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Navy { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush OldLace { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Olive { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush OliveDrab { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Orange { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush OrangeRed { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Orchid { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush PaleGoldenrod { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush PaleGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush PaleTurquoise { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush PaleVioletRed { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush PapayaWhip { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush PeachPuff { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Peru { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Pink { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Plum { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush PowderBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Purple { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Red { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush RosyBrown { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush RoyalBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush SaddleBrown { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Salmon { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush SandyBrown { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush SeaGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush SeaShell { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Sienna { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Silver { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush SkyBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush SlateBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush SlateGray { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Snow { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush SpringGreen { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush SteelBlue { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Tan { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Teal { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Thistle { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Tomato { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Transparent { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Turquoise { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Violet { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Wheat { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush White { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush WhiteSmoke { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush Yellow { get { throw null; } }
        public static System.Windows.Media.SolidColorBrush YellowGreen { get { throw null; } }
    }
    public enum BrushMappingMode
    {
        Absolute = 0,
        RelativeToBoundingBox = 1,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.CacheModeConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.CacheModeValueSerializer))]
    public abstract partial class CacheMode : System.Windows.Media.Animation.Animatable
    {
        internal CacheMode() { }
        public new System.Windows.Media.CacheMode Clone() { throw null; }
        public new System.Windows.Media.CacheMode CloneCurrentValue() { throw null; }
    }
    public sealed partial class CacheModeConverter : System.ComponentModel.TypeConverter
    {
        public CacheModeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public enum CachingHint
    {
        Unspecified = 0,
        Cache = 1,
    }
    public partial class CharacterMetrics
    {
        public CharacterMetrics() { }
        public CharacterMetrics(string metrics) { }
        public double Baseline { get { throw null; } }
        public double BlackBoxHeight { get { throw null; } }
        public double BlackBoxWidth { get { throw null; } }
        public double BottomSideBearing { get { throw null; } }
        public double LeftSideBearing { get { throw null; } }
        public string Metrics { get { throw null; } set { } }
        public double RightSideBearing { get { throw null; } }
        public double TopSideBearing { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
    }
    public sealed partial class CharacterMetricsDictionary : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<int, System.Windows.Media.CharacterMetrics>>, System.Collections.Generic.IDictionary<int, System.Windows.Media.CharacterMetrics>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<int, System.Windows.Media.CharacterMetrics>>, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable
    {
        internal CharacterMetricsDictionary() { }
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public System.Windows.Media.CharacterMetrics this[int key] { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        public System.Collections.Generic.ICollection<int> Keys { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IDictionary.IsFixedSize { get { throw null; } }
        object System.Collections.IDictionary.this[object key] { get { throw null; } set { } }
        System.Collections.ICollection System.Collections.IDictionary.Keys { get { throw null; } }
        System.Collections.ICollection System.Collections.IDictionary.Values { get { throw null; } }
        [System.CLSCompliantAttribute(false)]
        public System.Collections.Generic.ICollection<System.Windows.Media.CharacterMetrics> Values { get { throw null; } }
        [System.CLSCompliantAttribute(false)]
        public void Add(System.Collections.Generic.KeyValuePair<int, System.Windows.Media.CharacterMetrics> item) { }
        public void Add(int key, System.Windows.Media.CharacterMetrics value) { }
        public void Clear() { }
        [System.CLSCompliantAttribute(false)]
        public bool Contains(System.Collections.Generic.KeyValuePair<int, System.Windows.Media.CharacterMetrics> item) { throw null; }
        public bool ContainsKey(int key) { throw null; }
        [System.CLSCompliantAttribute(false)]
        public void CopyTo(System.Collections.Generic.KeyValuePair<int, System.Windows.Media.CharacterMetrics>[] array, int index) { }
        [System.CLSCompliantAttribute(false)]
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<int, System.Windows.Media.CharacterMetrics>> GetEnumerator() { throw null; }
        [System.CLSCompliantAttribute(false)]
        public bool Remove(System.Collections.Generic.KeyValuePair<int, System.Windows.Media.CharacterMetrics> item) { throw null; }
        public bool Remove(int key) { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        void System.Collections.IDictionary.Add(object key, object value) { }
        bool System.Collections.IDictionary.Contains(object key) { throw null; }
        System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { throw null; }
        void System.Collections.IDictionary.Remove(object key) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        public bool TryGetValue(int key, out System.Windows.Media.CharacterMetrics value) { throw null; }
    }
    public enum ClearTypeHint
    {
        Auto = 0,
        Enabled = 1,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.ColorConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public partial struct Color : System.IEquatable<System.Windows.Media.Color>, System.IFormattable
    {
        public byte A { get { throw null; } set { } }
        public byte B { get { throw null; } set { } }
        public System.Windows.Media.ColorContext ColorContext { get { throw null; } }
        public byte G { get { throw null; } set { } }
        public byte R { get { throw null; } set { } }
        public float ScA { get { throw null; } set { } }
        public float ScB { get { throw null; } set { } }
        public float ScG { get { throw null; } set { } }
        public float ScR { get { throw null; } set { } }
        public static System.Windows.Media.Color Add(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { throw null; }
        public static bool AreClose(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { throw null; }
        public void Clamp() { }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Media.Color color) { throw null; }
        public static bool Equals(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { throw null; }
        public static System.Windows.Media.Color FromArgb(byte a, byte r, byte g, byte b) { throw null; }
        public static System.Windows.Media.Color FromAValues(float a, float[] values, System.Uri profileUri) { throw null; }
        public static System.Windows.Media.Color FromRgb(byte r, byte g, byte b) { throw null; }
        public static System.Windows.Media.Color FromScRgb(float a, float r, float g, float b) { throw null; }
        public static System.Windows.Media.Color FromValues(float[] values, System.Uri profileUri) { throw null; }
        public override int GetHashCode() { throw null; }
        public float[] GetNativeColorValues() { throw null; }
        public static System.Windows.Media.Color Multiply(System.Windows.Media.Color color, float coefficient) { throw null; }
        public static System.Windows.Media.Color operator +(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { throw null; }
        public static bool operator ==(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { throw null; }
        public static bool operator !=(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { throw null; }
        public static System.Windows.Media.Color operator *(System.Windows.Media.Color color, float coefficient) { throw null; }
        public static System.Windows.Media.Color operator -(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { throw null; }
        public static System.Windows.Media.Color Subtract(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public partial class ColorContext
    {
        public ColorContext(System.Uri profileUri) { }
        public ColorContext(System.Windows.Media.PixelFormat pixelFormat) { }
        public System.Uri ProfileUri { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public System.IO.Stream OpenProfileStream() { throw null; }
        public static bool operator ==(System.Windows.Media.ColorContext context1, System.Windows.Media.ColorContext context2) { throw null; }
        public static bool operator !=(System.Windows.Media.ColorContext context1, System.Windows.Media.ColorContext context2) { throw null; }
    }
    public sealed partial class ColorConverter : System.ComponentModel.TypeConverter
    {
        public ColorConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { throw null; }
        public static new object ConvertFromString(string value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public enum ColorInterpolationMode
    {
        ScRgbLinearInterpolation = 0,
        SRgbLinearInterpolation = 1,
    }
    public sealed partial class Colors
    {
        internal Colors() { }
        public static System.Windows.Media.Color AliceBlue { get { throw null; } }
        public static System.Windows.Media.Color AntiqueWhite { get { throw null; } }
        public static System.Windows.Media.Color Aqua { get { throw null; } }
        public static System.Windows.Media.Color Aquamarine { get { throw null; } }
        public static System.Windows.Media.Color Azure { get { throw null; } }
        public static System.Windows.Media.Color Beige { get { throw null; } }
        public static System.Windows.Media.Color Bisque { get { throw null; } }
        public static System.Windows.Media.Color Black { get { throw null; } }
        public static System.Windows.Media.Color BlanchedAlmond { get { throw null; } }
        public static System.Windows.Media.Color Blue { get { throw null; } }
        public static System.Windows.Media.Color BlueViolet { get { throw null; } }
        public static System.Windows.Media.Color Brown { get { throw null; } }
        public static System.Windows.Media.Color BurlyWood { get { throw null; } }
        public static System.Windows.Media.Color CadetBlue { get { throw null; } }
        public static System.Windows.Media.Color Chartreuse { get { throw null; } }
        public static System.Windows.Media.Color Chocolate { get { throw null; } }
        public static System.Windows.Media.Color Coral { get { throw null; } }
        public static System.Windows.Media.Color CornflowerBlue { get { throw null; } }
        public static System.Windows.Media.Color Cornsilk { get { throw null; } }
        public static System.Windows.Media.Color Crimson { get { throw null; } }
        public static System.Windows.Media.Color Cyan { get { throw null; } }
        public static System.Windows.Media.Color DarkBlue { get { throw null; } }
        public static System.Windows.Media.Color DarkCyan { get { throw null; } }
        public static System.Windows.Media.Color DarkGoldenrod { get { throw null; } }
        public static System.Windows.Media.Color DarkGray { get { throw null; } }
        public static System.Windows.Media.Color DarkGreen { get { throw null; } }
        public static System.Windows.Media.Color DarkKhaki { get { throw null; } }
        public static System.Windows.Media.Color DarkMagenta { get { throw null; } }
        public static System.Windows.Media.Color DarkOliveGreen { get { throw null; } }
        public static System.Windows.Media.Color DarkOrange { get { throw null; } }
        public static System.Windows.Media.Color DarkOrchid { get { throw null; } }
        public static System.Windows.Media.Color DarkRed { get { throw null; } }
        public static System.Windows.Media.Color DarkSalmon { get { throw null; } }
        public static System.Windows.Media.Color DarkSeaGreen { get { throw null; } }
        public static System.Windows.Media.Color DarkSlateBlue { get { throw null; } }
        public static System.Windows.Media.Color DarkSlateGray { get { throw null; } }
        public static System.Windows.Media.Color DarkTurquoise { get { throw null; } }
        public static System.Windows.Media.Color DarkViolet { get { throw null; } }
        public static System.Windows.Media.Color DeepPink { get { throw null; } }
        public static System.Windows.Media.Color DeepSkyBlue { get { throw null; } }
        public static System.Windows.Media.Color DimGray { get { throw null; } }
        public static System.Windows.Media.Color DodgerBlue { get { throw null; } }
        public static System.Windows.Media.Color Firebrick { get { throw null; } }
        public static System.Windows.Media.Color FloralWhite { get { throw null; } }
        public static System.Windows.Media.Color ForestGreen { get { throw null; } }
        public static System.Windows.Media.Color Fuchsia { get { throw null; } }
        public static System.Windows.Media.Color Gainsboro { get { throw null; } }
        public static System.Windows.Media.Color GhostWhite { get { throw null; } }
        public static System.Windows.Media.Color Gold { get { throw null; } }
        public static System.Windows.Media.Color Goldenrod { get { throw null; } }
        public static System.Windows.Media.Color Gray { get { throw null; } }
        public static System.Windows.Media.Color Green { get { throw null; } }
        public static System.Windows.Media.Color GreenYellow { get { throw null; } }
        public static System.Windows.Media.Color Honeydew { get { throw null; } }
        public static System.Windows.Media.Color HotPink { get { throw null; } }
        public static System.Windows.Media.Color IndianRed { get { throw null; } }
        public static System.Windows.Media.Color Indigo { get { throw null; } }
        public static System.Windows.Media.Color Ivory { get { throw null; } }
        public static System.Windows.Media.Color Khaki { get { throw null; } }
        public static System.Windows.Media.Color Lavender { get { throw null; } }
        public static System.Windows.Media.Color LavenderBlush { get { throw null; } }
        public static System.Windows.Media.Color LawnGreen { get { throw null; } }
        public static System.Windows.Media.Color LemonChiffon { get { throw null; } }
        public static System.Windows.Media.Color LightBlue { get { throw null; } }
        public static System.Windows.Media.Color LightCoral { get { throw null; } }
        public static System.Windows.Media.Color LightCyan { get { throw null; } }
        public static System.Windows.Media.Color LightGoldenrodYellow { get { throw null; } }
        public static System.Windows.Media.Color LightGray { get { throw null; } }
        public static System.Windows.Media.Color LightGreen { get { throw null; } }
        public static System.Windows.Media.Color LightPink { get { throw null; } }
        public static System.Windows.Media.Color LightSalmon { get { throw null; } }
        public static System.Windows.Media.Color LightSeaGreen { get { throw null; } }
        public static System.Windows.Media.Color LightSkyBlue { get { throw null; } }
        public static System.Windows.Media.Color LightSlateGray { get { throw null; } }
        public static System.Windows.Media.Color LightSteelBlue { get { throw null; } }
        public static System.Windows.Media.Color LightYellow { get { throw null; } }
        public static System.Windows.Media.Color Lime { get { throw null; } }
        public static System.Windows.Media.Color LimeGreen { get { throw null; } }
        public static System.Windows.Media.Color Linen { get { throw null; } }
        public static System.Windows.Media.Color Magenta { get { throw null; } }
        public static System.Windows.Media.Color Maroon { get { throw null; } }
        public static System.Windows.Media.Color MediumAquamarine { get { throw null; } }
        public static System.Windows.Media.Color MediumBlue { get { throw null; } }
        public static System.Windows.Media.Color MediumOrchid { get { throw null; } }
        public static System.Windows.Media.Color MediumPurple { get { throw null; } }
        public static System.Windows.Media.Color MediumSeaGreen { get { throw null; } }
        public static System.Windows.Media.Color MediumSlateBlue { get { throw null; } }
        public static System.Windows.Media.Color MediumSpringGreen { get { throw null; } }
        public static System.Windows.Media.Color MediumTurquoise { get { throw null; } }
        public static System.Windows.Media.Color MediumVioletRed { get { throw null; } }
        public static System.Windows.Media.Color MidnightBlue { get { throw null; } }
        public static System.Windows.Media.Color MintCream { get { throw null; } }
        public static System.Windows.Media.Color MistyRose { get { throw null; } }
        public static System.Windows.Media.Color Moccasin { get { throw null; } }
        public static System.Windows.Media.Color NavajoWhite { get { throw null; } }
        public static System.Windows.Media.Color Navy { get { throw null; } }
        public static System.Windows.Media.Color OldLace { get { throw null; } }
        public static System.Windows.Media.Color Olive { get { throw null; } }
        public static System.Windows.Media.Color OliveDrab { get { throw null; } }
        public static System.Windows.Media.Color Orange { get { throw null; } }
        public static System.Windows.Media.Color OrangeRed { get { throw null; } }
        public static System.Windows.Media.Color Orchid { get { throw null; } }
        public static System.Windows.Media.Color PaleGoldenrod { get { throw null; } }
        public static System.Windows.Media.Color PaleGreen { get { throw null; } }
        public static System.Windows.Media.Color PaleTurquoise { get { throw null; } }
        public static System.Windows.Media.Color PaleVioletRed { get { throw null; } }
        public static System.Windows.Media.Color PapayaWhip { get { throw null; } }
        public static System.Windows.Media.Color PeachPuff { get { throw null; } }
        public static System.Windows.Media.Color Peru { get { throw null; } }
        public static System.Windows.Media.Color Pink { get { throw null; } }
        public static System.Windows.Media.Color Plum { get { throw null; } }
        public static System.Windows.Media.Color PowderBlue { get { throw null; } }
        public static System.Windows.Media.Color Purple { get { throw null; } }
        public static System.Windows.Media.Color Red { get { throw null; } }
        public static System.Windows.Media.Color RosyBrown { get { throw null; } }
        public static System.Windows.Media.Color RoyalBlue { get { throw null; } }
        public static System.Windows.Media.Color SaddleBrown { get { throw null; } }
        public static System.Windows.Media.Color Salmon { get { throw null; } }
        public static System.Windows.Media.Color SandyBrown { get { throw null; } }
        public static System.Windows.Media.Color SeaGreen { get { throw null; } }
        public static System.Windows.Media.Color SeaShell { get { throw null; } }
        public static System.Windows.Media.Color Sienna { get { throw null; } }
        public static System.Windows.Media.Color Silver { get { throw null; } }
        public static System.Windows.Media.Color SkyBlue { get { throw null; } }
        public static System.Windows.Media.Color SlateBlue { get { throw null; } }
        public static System.Windows.Media.Color SlateGray { get { throw null; } }
        public static System.Windows.Media.Color Snow { get { throw null; } }
        public static System.Windows.Media.Color SpringGreen { get { throw null; } }
        public static System.Windows.Media.Color SteelBlue { get { throw null; } }
        public static System.Windows.Media.Color Tan { get { throw null; } }
        public static System.Windows.Media.Color Teal { get { throw null; } }
        public static System.Windows.Media.Color Thistle { get { throw null; } }
        public static System.Windows.Media.Color Tomato { get { throw null; } }
        public static System.Windows.Media.Color Transparent { get { throw null; } }
        public static System.Windows.Media.Color Turquoise { get { throw null; } }
        public static System.Windows.Media.Color Violet { get { throw null; } }
        public static System.Windows.Media.Color Wheat { get { throw null; } }
        public static System.Windows.Media.Color White { get { throw null; } }
        public static System.Windows.Media.Color WhiteSmoke { get { throw null; } }
        public static System.Windows.Media.Color Yellow { get { throw null; } }
        public static System.Windows.Media.Color YellowGreen { get { throw null; } }
    }
    public sealed partial class CombinedGeometry : System.Windows.Media.Geometry
    {
        public static readonly System.Windows.DependencyProperty Geometry1Property;
        public static readonly System.Windows.DependencyProperty Geometry2Property;
        public static readonly System.Windows.DependencyProperty GeometryCombineModeProperty;
        public CombinedGeometry() { }
        public CombinedGeometry(System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2) { }
        public CombinedGeometry(System.Windows.Media.GeometryCombineMode geometryCombineMode, System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2) { }
        public CombinedGeometry(System.Windows.Media.GeometryCombineMode geometryCombineMode, System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2, System.Windows.Media.Transform transform) { }
        public override System.Windows.Rect Bounds { get { throw null; } }
        public System.Windows.Media.Geometry Geometry1 { get { throw null; } set { } }
        public System.Windows.Media.Geometry Geometry2 { get { throw null; } set { } }
        public System.Windows.Media.GeometryCombineMode GeometryCombineMode { get { throw null; } set { } }
        public new System.Windows.Media.CombinedGeometry Clone() { throw null; }
        public new System.Windows.Media.CombinedGeometry CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public override double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public override bool IsEmpty() { throw null; }
        public override bool MayHaveCurves() { throw null; }
    }
    public abstract partial class CompositionTarget : System.Windows.Threading.DispatcherObject, System.IDisposable
    {
        internal CompositionTarget() { }
        public virtual System.Windows.Media.Visual RootVisual { get { throw null; } set { } }
        public abstract System.Windows.Media.Matrix TransformFromDevice { get; }
        public abstract System.Windows.Media.Matrix TransformToDevice { get; }
        public static event System.EventHandler Rendering { add { } remove { } }
        public virtual void Dispose() { }
    }
    public partial class ContainerVisual : System.Windows.Media.Visual
    {
        public ContainerVisual() { }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get { throw null; } set { } }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get { throw null; } set { } }
        public System.Windows.Media.CacheMode CacheMode { get { throw null; } set { } }
        public System.Windows.Media.VisualCollection Children { get { throw null; } }
        public System.Windows.Media.Geometry Clip { get { throw null; } set { } }
        public System.Windows.Rect ContentBounds { get { throw null; } }
        public System.Windows.Rect DescendantBounds { get { throw null; } }
        public System.Windows.Media.Effects.Effect Effect { get { throw null; } set { } }
        public System.Windows.Vector Offset { get { throw null; } set { } }
        public double Opacity { get { throw null; } set { } }
        public System.Windows.Media.Brush OpacityMask { get { throw null; } set { } }
        public System.Windows.DependencyObject Parent { get { throw null; } }
        public System.Windows.Media.Transform Transform { get { throw null; } set { } }
        protected sealed override int VisualChildrenCount { get { throw null; } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Windows.Media.DoubleCollection XSnappingGuidelines { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        public System.Windows.Media.DoubleCollection YSnappingGuidelines { get { throw null; } set { } }
        protected sealed override System.Windows.Media.Visual GetVisualChild(int index) { throw null; }
        public void HitTest(System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.HitTestParameters hitTestParameters) { }
        public System.Windows.Media.HitTestResult HitTest(System.Windows.Point point) { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public sealed partial class DashStyle : System.Windows.Media.Animation.Animatable
    {
        public static readonly System.Windows.DependencyProperty DashesProperty;
        public static readonly System.Windows.DependencyProperty OffsetProperty;
        public DashStyle() { }
        public DashStyle(System.Collections.Generic.IEnumerable<double> dashes, double offset) { }
        public System.Windows.Media.DoubleCollection Dashes { get { throw null; } set { } }
        public double Offset { get { throw null; } set { } }
        public new System.Windows.Media.DashStyle Clone() { throw null; }
        public new System.Windows.Media.DashStyle CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public static partial class DashStyles
    {
        public static System.Windows.Media.DashStyle Dash { get { throw null; } }
        public static System.Windows.Media.DashStyle DashDot { get { throw null; } }
        public static System.Windows.Media.DashStyle DashDotDot { get { throw null; } }
        public static System.Windows.Media.DashStyle Dot { get { throw null; } }
        public static System.Windows.Media.DashStyle Solid { get { throw null; } }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.DoubleCollectionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.DoubleCollectionValueSerializer))]
    public sealed partial class DoubleCollection : System.Windows.Freezable, System.Collections.Generic.ICollection<double>, System.Collections.Generic.IEnumerable<double>, System.Collections.Generic.IList<double>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable
    {
        public DoubleCollection() { }
        public DoubleCollection(System.Collections.Generic.IEnumerable<double> collection) { }
        public DoubleCollection(int capacity) { }
        public int Count { get { throw null; } }
        public double this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Double>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(double value) { }
        public void Clear() { }
        public new System.Windows.Media.DoubleCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.DoubleCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(double value) { throw null; }
        public void CopyTo(double[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.DoubleCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(double value) { throw null; }
        public void Insert(int index, double value) { }
        public static System.Windows.Media.DoubleCollection Parse(string source) { throw null; }
        public bool Remove(double value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<double> System.Collections.Generic.IEnumerable<System.Double>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<double>, System.Collections.IEnumerator, System.IDisposable
        {
            public double Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class DoubleCollectionConverter : System.ComponentModel.TypeConverter
    {
        public DoubleCollectionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public abstract partial class Drawing : System.Windows.Media.Animation.Animatable
    {
        internal Drawing() { }
        public System.Windows.Rect Bounds { get { throw null; } }
        public new System.Windows.Media.Drawing Clone() { throw null; }
        public new System.Windows.Media.Drawing CloneCurrentValue() { throw null; }
    }
    public sealed partial class DrawingBrush : System.Windows.Media.TileBrush
    {
        public static readonly System.Windows.DependencyProperty DrawingProperty;
        public DrawingBrush() { }
        public DrawingBrush(System.Windows.Media.Drawing drawing) { }
        public System.Windows.Media.Drawing Drawing { get { throw null; } set { } }
        public new System.Windows.Media.DrawingBrush Clone() { throw null; }
        public new System.Windows.Media.DrawingBrush CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetContentBounds(out System.Windows.Rect contentBounds) { throw null; }
    }
    public sealed partial class DrawingCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Drawing>, System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing>, System.Collections.Generic.IList<System.Windows.Media.Drawing>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public DrawingCollection() { }
        public DrawingCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing> collection) { }
        public DrawingCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Drawing this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Drawing>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Drawing value) { }
        public void Clear() { }
        public new System.Windows.Media.DrawingCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.DrawingCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Drawing value) { throw null; }
        public void CopyTo(System.Windows.Media.Drawing[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.DrawingCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Drawing value) { throw null; }
        public void Insert(int index, System.Windows.Media.Drawing value) { }
        public bool Remove(System.Windows.Media.Drawing value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Drawing> System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Drawing>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Drawing Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public abstract partial class DrawingContext : System.Windows.Threading.DispatcherObject, System.IDisposable
    {
        internal DrawingContext() { }
        public abstract void Close();
        protected abstract void DisposeCore();
        public abstract void DrawDrawing(System.Windows.Media.Drawing drawing);
        public abstract void DrawEllipse(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Point center, double radiusX, double radiusY);
        public abstract void DrawEllipse(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Point center, System.Windows.Media.Animation.AnimationClock centerAnimations, double radiusX, System.Windows.Media.Animation.AnimationClock radiusXAnimations, double radiusY, System.Windows.Media.Animation.AnimationClock radiusYAnimations);
        public abstract void DrawGeometry(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Media.Geometry geometry);
        public abstract void DrawGlyphRun(System.Windows.Media.Brush foregroundBrush, System.Windows.Media.GlyphRun glyphRun);
        public abstract void DrawImage(System.Windows.Media.ImageSource imageSource, System.Windows.Rect rectangle);
        public abstract void DrawImage(System.Windows.Media.ImageSource imageSource, System.Windows.Rect rectangle, System.Windows.Media.Animation.AnimationClock rectangleAnimations);
        public abstract void DrawLine(System.Windows.Media.Pen pen, System.Windows.Point point0, System.Windows.Media.Animation.AnimationClock point0Animations, System.Windows.Point point1, System.Windows.Media.Animation.AnimationClock point1Animations);
        public abstract void DrawLine(System.Windows.Media.Pen pen, System.Windows.Point point0, System.Windows.Point point1);
        public abstract void DrawRectangle(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Rect rectangle);
        public abstract void DrawRectangle(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Rect rectangle, System.Windows.Media.Animation.AnimationClock rectangleAnimations);
        public abstract void DrawRoundedRectangle(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Rect rectangle, double radiusX, double radiusY);
        public abstract void DrawRoundedRectangle(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Rect rectangle, System.Windows.Media.Animation.AnimationClock rectangleAnimations, double radiusX, System.Windows.Media.Animation.AnimationClock radiusXAnimations, double radiusY, System.Windows.Media.Animation.AnimationClock radiusYAnimations);
        public void DrawText(System.Windows.Media.FormattedText formattedText, System.Windows.Point origin) { }
        public abstract void DrawVideo(System.Windows.Media.MediaPlayer player, System.Windows.Rect rectangle);
        public abstract void DrawVideo(System.Windows.Media.MediaPlayer player, System.Windows.Rect rectangle, System.Windows.Media.Animation.AnimationClock rectangleAnimations);
        public abstract void Pop();
        public abstract void PushClip(System.Windows.Media.Geometry clipGeometry);
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        public abstract void PushEffect(System.Windows.Media.Effects.BitmapEffect effect, System.Windows.Media.Effects.BitmapEffectInput effectInput);
        public abstract void PushGuidelineSet(System.Windows.Media.GuidelineSet guidelines);
        public abstract void PushOpacity(double opacity);
        public abstract void PushOpacity(double opacity, System.Windows.Media.Animation.AnimationClock opacityAnimations);
        public abstract void PushOpacityMask(System.Windows.Media.Brush opacityMask);
        public abstract void PushTransform(System.Windows.Media.Transform transform);
        void System.IDisposable.Dispose() { }
        protected virtual void VerifyApiNonstructuralChange() { }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class DrawingGroup : System.Windows.Media.Drawing
    {
        public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;
        public static readonly System.Windows.DependencyProperty BitmapEffectProperty;
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        public static readonly System.Windows.DependencyProperty ClipGeometryProperty;
        public static readonly System.Windows.DependencyProperty GuidelineSetProperty;
        public static readonly System.Windows.DependencyProperty OpacityMaskProperty;
        public static readonly System.Windows.DependencyProperty OpacityProperty;
        public static readonly System.Windows.DependencyProperty TransformProperty;
        public DrawingGroup() { }
        public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get { throw null; } set { } }
        public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get { throw null; } set { } }
        public System.Windows.Media.DrawingCollection Children { get { throw null; } set { } }
        public System.Windows.Media.Geometry ClipGeometry { get { throw null; } set { } }
        public System.Windows.Media.GuidelineSet GuidelineSet { get { throw null; } set { } }
        public double Opacity { get { throw null; } set { } }
        public System.Windows.Media.Brush OpacityMask { get { throw null; } set { } }
        public System.Windows.Media.Transform Transform { get { throw null; } set { } }
        public System.Windows.Media.DrawingContext Append() { throw null; }
        public new System.Windows.Media.DrawingGroup Clone() { throw null; }
        public new System.Windows.Media.DrawingGroup CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public System.Windows.Media.DrawingContext Open() { throw null; }
    }
    public sealed partial class DrawingImage : System.Windows.Media.ImageSource
    {
        public static readonly System.Windows.DependencyProperty DrawingProperty;
        public DrawingImage() { }
        public DrawingImage(System.Windows.Media.Drawing drawing) { }
        public System.Windows.Media.Drawing Drawing { get { throw null; } set { } }
        public override double Height { get { throw null; } }
        public override System.Windows.Media.ImageMetadata Metadata { get { throw null; } }
        public override double Width { get { throw null; } }
        public new System.Windows.Media.DrawingImage Clone() { throw null; }
        public new System.Windows.Media.DrawingImage CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public partial class DrawingVisual : System.Windows.Media.ContainerVisual
    {
        public DrawingVisual() { }
        public System.Windows.Media.DrawingGroup Drawing { get { throw null; } }
        protected override System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { throw null; }
        protected override System.Windows.Media.HitTestResult HitTestCore(System.Windows.Media.PointHitTestParameters hitTestParameters) { throw null; }
        public System.Windows.Media.DrawingContext RenderOpen() { throw null; }
    }
    public enum EdgeMode
    {
        Unspecified = 0,
        Aliased = 1,
    }
    public sealed partial class EllipseGeometry : System.Windows.Media.Geometry
    {
        public static readonly System.Windows.DependencyProperty CenterProperty;
        public static readonly System.Windows.DependencyProperty RadiusXProperty;
        public static readonly System.Windows.DependencyProperty RadiusYProperty;
        public EllipseGeometry() { }
        public EllipseGeometry(System.Windows.Point center, double radiusX, double radiusY) { }
        public EllipseGeometry(System.Windows.Point center, double radiusX, double radiusY, System.Windows.Media.Transform transform) { }
        public EllipseGeometry(System.Windows.Rect rect) { }
        public override System.Windows.Rect Bounds { get { throw null; } }
        public System.Windows.Point Center { get { throw null; } set { } }
        public double RadiusX { get { throw null; } set { } }
        public double RadiusY { get { throw null; } set { } }
        public new System.Windows.Media.EllipseGeometry Clone() { throw null; }
        public new System.Windows.Media.EllipseGeometry CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public override double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public override bool IsEmpty() { throw null; }
        public override bool MayHaveCurves() { throw null; }
    }
    public sealed partial class ExceptionEventArgs : System.EventArgs
    {
        internal ExceptionEventArgs() { }
        public System.Exception ErrorException { get { throw null; } }
    }
    public partial class FamilyTypeface
    {
        public FamilyTypeface() { }
        public System.Collections.Generic.IDictionary<System.Windows.Markup.XmlLanguage, string> AdjustedFaceNames { get { throw null; } }
        public double CapsHeight { get { throw null; } set { } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Media.CharacterMetricsDictionary DeviceFontCharacterMetrics { get { throw null; } }
        public string DeviceFontName { get { throw null; } set { } }
        public System.Windows.FontStretch Stretch { get { throw null; } set { } }
        public double StrikethroughPosition { get { throw null; } set { } }
        public double StrikethroughThickness { get { throw null; } set { } }
        public System.Windows.FontStyle Style { get { throw null; } set { } }
        public double UnderlinePosition { get { throw null; } set { } }
        public double UnderlineThickness { get { throw null; } set { } }
        public System.Windows.FontWeight Weight { get { throw null; } set { } }
        public double XHeight { get { throw null; } set { } }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Media.FamilyTypeface typeface) { throw null; }
        public override int GetHashCode() { throw null; }
    }
    public sealed partial class FamilyTypefaceCollection : System.Collections.Generic.ICollection<System.Windows.Media.FamilyTypeface>, System.Collections.Generic.IEnumerable<System.Windows.Media.FamilyTypeface>, System.Collections.Generic.IList<System.Windows.Media.FamilyTypeface>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        internal FamilyTypefaceCollection() { }
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public System.Windows.Media.FamilyTypeface this[int index] { get { throw null; } set { } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.FamilyTypeface item) { }
        public void Clear() { }
        public bool Contains(System.Windows.Media.FamilyTypeface item) { throw null; }
        public void CopyTo(System.Windows.Media.FamilyTypeface[] array, int index) { }
        public System.Collections.Generic.IEnumerator<System.Windows.Media.FamilyTypeface> GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.FamilyTypeface item) { throw null; }
        public void Insert(int index, System.Windows.Media.FamilyTypeface item) { }
        public bool Remove(System.Windows.Media.FamilyTypeface item) { throw null; }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object item) { }
        void System.Collections.IList.Remove(object value) { }
    }
    public enum FillRule
    {
        EvenOdd = 0,
        Nonzero = 1,
    }
    public partial class FontEmbeddingManager
    {
        public FontEmbeddingManager() { }
        [System.CLSCompliantAttribute(false)]
        public System.Collections.Generic.ICollection<System.Uri> GlyphTypefaceUris { get { throw null; } }
        [System.CLSCompliantAttribute(false)]
        public System.Collections.Generic.ICollection<ushort> GetUsedGlyphs(System.Uri glyphTypeface) { throw null; }
        public void RecordUsage(System.Windows.Media.GlyphRun glyphRun) { }
    }
    public enum FontEmbeddingRight
    {
        Installable = 0,
        InstallableButNoSubsetting = 1,
        InstallableButWithBitmapsOnly = 2,
        InstallableButNoSubsettingAndWithBitmapsOnly = 3,
        RestrictedLicense = 4,
        PreviewAndPrint = 5,
        PreviewAndPrintButNoSubsetting = 6,
        PreviewAndPrintButWithBitmapsOnly = 7,
        PreviewAndPrintButNoSubsettingAndWithBitmapsOnly = 8,
        Editable = 9,
        EditableButNoSubsetting = 10,
        EditableButWithBitmapsOnly = 11,
        EditableButNoSubsettingAndWithBitmapsOnly = 12,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.FontFamilyConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.Font)]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.FontFamilyValueSerializer))]
    public partial class FontFamily
    {
        public FontFamily() { }
        public FontFamily(string familyName) { }
        public FontFamily(System.Uri baseUri, string familyName) { }
        public double Baseline { get { throw null; } set { } }
        public System.Uri BaseUri { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Media.FontFamilyMapCollection FamilyMaps { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Media.LanguageSpecificStringDictionary FamilyNames { get { throw null; } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Media.FamilyTypefaceCollection FamilyTypefaces { get { throw null; } }
        public double LineSpacing { get { throw null; } set { } }
        public string Source { get { throw null; } }
        public override bool Equals(object o) { throw null; }
        public override int GetHashCode() { throw null; }
        [System.CLSCompliantAttribute(false)]
        public System.Collections.Generic.ICollection<System.Windows.Media.Typeface> GetTypefaces() { throw null; }
        public override string ToString() { throw null; }
    }
    public partial class FontFamilyConverter : System.ComponentModel.TypeConverter
    {
        public FontFamilyConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object o) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public partial class FontFamilyMap
    {
        public FontFamilyMap() { }
        public System.Windows.Markup.XmlLanguage Language { get { throw null; } set { } }
        public double Scale { get { throw null; } set { } }
        [System.Windows.Markup.DesignerSerializationOptionsAttribute(System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute)]
        public string Target { get { throw null; } set { } }
        [System.Windows.Markup.DesignerSerializationOptionsAttribute(System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute)]
        public string Unicode { get { throw null; } set { } }
    }
    public sealed partial class FontFamilyMapCollection : System.Collections.Generic.ICollection<System.Windows.Media.FontFamilyMap>, System.Collections.Generic.IEnumerable<System.Windows.Media.FontFamilyMap>, System.Collections.Generic.IList<System.Windows.Media.FontFamilyMap>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        internal FontFamilyMapCollection() { }
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public System.Windows.Media.FontFamilyMap this[int index] { get { throw null; } set { } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.FontFamilyMap item) { }
        public void Clear() { }
        public bool Contains(System.Windows.Media.FontFamilyMap item) { throw null; }
        public void CopyTo(System.Windows.Media.FontFamilyMap[] array, int index) { }
        public System.Collections.Generic.IEnumerator<System.Windows.Media.FontFamilyMap> GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.FontFamilyMap item) { throw null; }
        public void Insert(int index, System.Windows.Media.FontFamilyMap item) { }
        public bool Remove(System.Windows.Media.FontFamilyMap item) { throw null; }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object item) { }
        void System.Collections.IList.Remove(object value) { }
    }
    public partial class FontFamilyValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public FontFamilyValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public static partial class Fonts
    {
        public static System.Collections.Generic.ICollection<System.Windows.Media.FontFamily> SystemFontFamilies { get { throw null; } }
        public static System.Collections.Generic.ICollection<System.Windows.Media.Typeface> SystemTypefaces { get { throw null; } }
        public static System.Collections.Generic.ICollection<System.Windows.Media.FontFamily> GetFontFamilies(string location) { throw null; }
        public static System.Collections.Generic.ICollection<System.Windows.Media.FontFamily> GetFontFamilies(System.Uri baseUri) { throw null; }
        public static System.Collections.Generic.ICollection<System.Windows.Media.FontFamily> GetFontFamilies(System.Uri baseUri, string location) { throw null; }
        public static System.Collections.Generic.ICollection<System.Windows.Media.Typeface> GetTypefaces(string location) { throw null; }
        public static System.Collections.Generic.ICollection<System.Windows.Media.Typeface> GetTypefaces(System.Uri baseUri) { throw null; }
        public static System.Collections.Generic.ICollection<System.Windows.Media.Typeface> GetTypefaces(System.Uri baseUri, string location) { throw null; }
    }
    public partial class FormattedText
    {
        [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
        public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground) { }
        public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, double pixelsPerDip) { }
        [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
        public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, System.Windows.Media.NumberSubstitution numberSubstitution) { }
        public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, System.Windows.Media.NumberSubstitution numberSubstitution, double pixelsPerDip) { }
        [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
        public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, System.Windows.Media.NumberSubstitution numberSubstitution, System.Windows.Media.TextFormattingMode textFormattingMode) { }
        public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, System.Windows.Media.NumberSubstitution numberSubstitution, System.Windows.Media.TextFormattingMode textFormattingMode, double pixelsPerDip) { }
        public double Baseline { get { throw null; } }
        public double Extent { get { throw null; } }
        public System.Windows.FlowDirection FlowDirection { get { throw null; } set { } }
        public double Height { get { throw null; } }
        public double LineHeight { get { throw null; } set { } }
        public int MaxLineCount { get { throw null; } set { } }
        public double MaxTextHeight { get { throw null; } set { } }
        public double MaxTextWidth { get { throw null; } set { } }
        public double MinWidth { get { throw null; } }
        public double OverhangAfter { get { throw null; } }
        public double OverhangLeading { get { throw null; } }
        public double OverhangTrailing { get { throw null; } }
        public double PixelsPerDip { get { throw null; } set { } }
        public string Text { get { throw null; } }
        public System.Windows.TextAlignment TextAlignment { get { throw null; } set { } }
        public System.Windows.TextTrimming Trimming { get { throw null; } set { } }
        public double Width { get { throw null; } }
        public double WidthIncludingTrailingWhitespace { get { throw null; } }
        public System.Windows.Media.Geometry BuildGeometry(System.Windows.Point origin) { throw null; }
        public System.Windows.Media.Geometry BuildHighlightGeometry(System.Windows.Point origin) { throw null; }
        public System.Windows.Media.Geometry BuildHighlightGeometry(System.Windows.Point origin, int startIndex, int count) { throw null; }
        public double[] GetMaxTextWidths() { throw null; }
        public void SetCulture(System.Globalization.CultureInfo culture) { }
        public void SetCulture(System.Globalization.CultureInfo culture, int startIndex, int count) { }
        public void SetFontFamily(string fontFamily) { }
        public void SetFontFamily(string fontFamily, int startIndex, int count) { }
        public void SetFontFamily(System.Windows.Media.FontFamily fontFamily) { }
        public void SetFontFamily(System.Windows.Media.FontFamily fontFamily, int startIndex, int count) { }
        public void SetFontSize(double emSize) { }
        public void SetFontSize(double emSize, int startIndex, int count) { }
        public void SetFontStretch(System.Windows.FontStretch stretch) { }
        public void SetFontStretch(System.Windows.FontStretch stretch, int startIndex, int count) { }
        public void SetFontStyle(System.Windows.FontStyle style) { }
        public void SetFontStyle(System.Windows.FontStyle style, int startIndex, int count) { }
        public void SetFontTypeface(System.Windows.Media.Typeface typeface) { }
        public void SetFontTypeface(System.Windows.Media.Typeface typeface, int startIndex, int count) { }
        public void SetFontWeight(System.Windows.FontWeight weight) { }
        public void SetFontWeight(System.Windows.FontWeight weight, int startIndex, int count) { }
        public void SetForegroundBrush(System.Windows.Media.Brush foregroundBrush) { }
        public void SetForegroundBrush(System.Windows.Media.Brush foregroundBrush, int startIndex, int count) { }
        public void SetMaxTextWidths(double[] maxTextWidths) { }
        public void SetNumberSubstitution(System.Windows.Media.NumberSubstitution numberSubstitution) { }
        public void SetNumberSubstitution(System.Windows.Media.NumberSubstitution numberSubstitution, int startIndex, int count) { }
        public void SetTextDecorations(System.Windows.TextDecorationCollection textDecorations) { }
        public void SetTextDecorations(System.Windows.TextDecorationCollection textDecorations, int startIndex, int count) { }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public abstract partial class GeneralTransform : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        protected GeneralTransform() { }
        public abstract System.Windows.Media.GeneralTransform Inverse { get; }
        public new System.Windows.Media.GeneralTransform Clone() { throw null; }
        public new System.Windows.Media.GeneralTransform CloneCurrentValue() { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public System.Windows.Point Transform(System.Windows.Point point) { throw null; }
        public abstract System.Windows.Rect TransformBounds(System.Windows.Rect rect);
        public abstract bool TryTransform(System.Windows.Point inPoint, out System.Windows.Point result);
    }
    public sealed partial class GeneralTransformCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.GeneralTransform>, System.Collections.Generic.IEnumerable<System.Windows.Media.GeneralTransform>, System.Collections.Generic.IList<System.Windows.Media.GeneralTransform>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public GeneralTransformCollection() { }
        public GeneralTransformCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.GeneralTransform> collection) { }
        public GeneralTransformCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.GeneralTransform this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.GeneralTransform>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.GeneralTransform value) { }
        public void Clear() { }
        public new System.Windows.Media.GeneralTransformCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.GeneralTransformCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.GeneralTransform value) { throw null; }
        public void CopyTo(System.Windows.Media.GeneralTransform[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.GeneralTransformCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.GeneralTransform value) { throw null; }
        public void Insert(int index, System.Windows.Media.GeneralTransform value) { }
        public bool Remove(System.Windows.Media.GeneralTransform value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.GeneralTransform> System.Collections.Generic.IEnumerable<System.Windows.Media.GeneralTransform>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.GeneralTransform>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.GeneralTransform Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class GeneralTransformGroup : System.Windows.Media.GeneralTransform
    {
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        public GeneralTransformGroup() { }
        public System.Windows.Media.GeneralTransformCollection Children { get { throw null; } set { } }
        public override System.Windows.Media.GeneralTransform Inverse { get { throw null; } }
        public new System.Windows.Media.GeneralTransformGroup Clone() { throw null; }
        public new System.Windows.Media.GeneralTransformGroup CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public override System.Windows.Rect TransformBounds(System.Windows.Rect rect) { throw null; }
        public override bool TryTransform(System.Windows.Point inPoint, out System.Windows.Point result) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.GeometryConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.GeometryValueSerializer))]
    public abstract partial class Geometry : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        internal Geometry() { }
        public static readonly System.Windows.DependencyProperty TransformProperty;
        public virtual System.Windows.Rect Bounds { get { throw null; } }
        public static System.Windows.Media.Geometry Empty { get { throw null; } }
        public static double StandardFlatteningTolerance { get { throw null; } }
        public System.Windows.Media.Transform Transform { get { throw null; } set { } }
        public new System.Windows.Media.Geometry Clone() { throw null; }
        public new System.Windows.Media.Geometry CloneCurrentValue() { throw null; }
        public static System.Windows.Media.PathGeometry Combine(System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2, System.Windows.Media.GeometryCombineMode mode, System.Windows.Media.Transform transform) { throw null; }
        public static System.Windows.Media.PathGeometry Combine(System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2, System.Windows.Media.GeometryCombineMode mode, System.Windows.Media.Transform transform, double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public bool FillContains(System.Windows.Media.Geometry geometry) { throw null; }
        public bool FillContains(System.Windows.Media.Geometry geometry, double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public bool FillContains(System.Windows.Point hitPoint) { throw null; }
        public bool FillContains(System.Windows.Point hitPoint, double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public System.Windows.Media.IntersectionDetail FillContainsWithDetail(System.Windows.Media.Geometry geometry) { throw null; }
        public virtual System.Windows.Media.IntersectionDetail FillContainsWithDetail(System.Windows.Media.Geometry geometry, double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public double GetArea() { throw null; }
        public virtual double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public System.Windows.Media.PathGeometry GetFlattenedPathGeometry() { throw null; }
        public virtual System.Windows.Media.PathGeometry GetFlattenedPathGeometry(double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public System.Windows.Media.PathGeometry GetOutlinedPathGeometry() { throw null; }
        public virtual System.Windows.Media.PathGeometry GetOutlinedPathGeometry(double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public System.Windows.Rect GetRenderBounds(System.Windows.Media.Pen pen) { throw null; }
        public virtual System.Windows.Rect GetRenderBounds(System.Windows.Media.Pen pen, double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public System.Windows.Media.PathGeometry GetWidenedPathGeometry(System.Windows.Media.Pen pen) { throw null; }
        public virtual System.Windows.Media.PathGeometry GetWidenedPathGeometry(System.Windows.Media.Pen pen, double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public abstract bool IsEmpty();
        public abstract bool MayHaveCurves();
        public static System.Windows.Media.Geometry Parse(string source) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeTransform() { throw null; }
        public bool StrokeContains(System.Windows.Media.Pen pen, System.Windows.Point hitPoint) { throw null; }
        public bool StrokeContains(System.Windows.Media.Pen pen, System.Windows.Point hitPoint, double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public System.Windows.Media.IntersectionDetail StrokeContainsWithDetail(System.Windows.Media.Pen pen, System.Windows.Media.Geometry geometry) { throw null; }
        public System.Windows.Media.IntersectionDetail StrokeContainsWithDetail(System.Windows.Media.Pen pen, System.Windows.Media.Geometry geometry, double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public sealed partial class GeometryCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Geometry>, System.Collections.Generic.IEnumerable<System.Windows.Media.Geometry>, System.Collections.Generic.IList<System.Windows.Media.Geometry>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public GeometryCollection() { }
        public GeometryCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Geometry> collection) { }
        public GeometryCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Geometry this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Geometry>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Geometry value) { }
        public void Clear() { }
        public new System.Windows.Media.GeometryCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.GeometryCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Geometry value) { throw null; }
        public void CopyTo(System.Windows.Media.Geometry[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.GeometryCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Geometry value) { throw null; }
        public void Insert(int index, System.Windows.Media.Geometry value) { }
        public bool Remove(System.Windows.Media.Geometry value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Geometry> System.Collections.Generic.IEnumerable<System.Windows.Media.Geometry>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Geometry>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Geometry Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public enum GeometryCombineMode
    {
        Union = 0,
        Intersect = 1,
        Xor = 2,
        Exclude = 3,
    }
    public sealed partial class GeometryConverter : System.ComponentModel.TypeConverter
    {
        public GeometryConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class GeometryDrawing : System.Windows.Media.Drawing
    {
        public static readonly System.Windows.DependencyProperty BrushProperty;
        public static readonly System.Windows.DependencyProperty GeometryProperty;
        public static readonly System.Windows.DependencyProperty PenProperty;
        public GeometryDrawing() { }
        public GeometryDrawing(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Media.Geometry geometry) { }
        public System.Windows.Media.Brush Brush { get { throw null; } set { } }
        public System.Windows.Media.Geometry Geometry { get { throw null; } set { } }
        public System.Windows.Media.Pen Pen { get { throw null; } set { } }
        public new System.Windows.Media.GeometryDrawing Clone() { throw null; }
        public new System.Windows.Media.GeometryDrawing CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class GeometryGroup : System.Windows.Media.Geometry
    {
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        public static readonly System.Windows.DependencyProperty FillRuleProperty;
        public GeometryGroup() { }
        public System.Windows.Media.GeometryCollection Children { get { throw null; } set { } }
        public System.Windows.Media.FillRule FillRule { get { throw null; } set { } }
        public new System.Windows.Media.GeometryGroup Clone() { throw null; }
        public new System.Windows.Media.GeometryGroup CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public override bool IsEmpty() { throw null; }
        public override bool MayHaveCurves() { throw null; }
    }
    public partial class GeometryHitTestParameters : System.Windows.Media.HitTestParameters
    {
        public GeometryHitTestParameters(System.Windows.Media.Geometry geometry) { }
        public System.Windows.Media.Geometry HitGeometry { get { throw null; } }
    }
    public partial class GeometryHitTestResult : System.Windows.Media.HitTestResult
    {
        public GeometryHitTestResult(System.Windows.Media.Visual visualHit, System.Windows.Media.IntersectionDetail intersectionDetail) { }
        public System.Windows.Media.IntersectionDetail IntersectionDetail { get { throw null; } }
        public new System.Windows.Media.Visual VisualHit { get { throw null; } }
    }
    public partial class GlyphRun : System.ComponentModel.ISupportInitialize
    {
        [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
        public GlyphRun() { }
        public GlyphRun(float pixelsPerDip) { }
        [System.CLSCompliantAttribute(false)]
        [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
        public GlyphRun(System.Windows.Media.GlyphTypeface glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, System.Collections.Generic.IList<ushort> glyphIndices, System.Windows.Point baselineOrigin, System.Collections.Generic.IList<double> advanceWidths, System.Collections.Generic.IList<System.Windows.Point> glyphOffsets, System.Collections.Generic.IList<char> characters, string deviceFontName, System.Collections.Generic.IList<ushort> clusterMap, System.Collections.Generic.IList<bool> caretStops, System.Windows.Markup.XmlLanguage language) { }
        [System.CLSCompliantAttribute(false)]
        public GlyphRun(System.Windows.Media.GlyphTypeface glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, float pixelsPerDip, System.Collections.Generic.IList<ushort> glyphIndices, System.Windows.Point baselineOrigin, System.Collections.Generic.IList<double> advanceWidths, System.Collections.Generic.IList<System.Windows.Point> glyphOffsets, System.Collections.Generic.IList<char> characters, string deviceFontName, System.Collections.Generic.IList<ushort> clusterMap, System.Collections.Generic.IList<bool> caretStops, System.Windows.Markup.XmlLanguage language) { }
        [System.CLSCompliantAttribute(false)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.DoubleIListConverter))]
        public System.Collections.Generic.IList<double> AdvanceWidths { get { throw null; } set { } }
        public System.Windows.Point BaselineOrigin { get { throw null; } set { } }
        public int BidiLevel { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.BoolIListConverter))]
        public System.Collections.Generic.IList<bool> CaretStops { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.CharIListConverter))]
        public System.Collections.Generic.IList<char> Characters { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.UShortIListConverter))]
        public System.Collections.Generic.IList<ushort> ClusterMap { get { throw null; } set { } }
        public string DeviceFontName { get { throw null; } set { } }
        public double FontRenderingEmSize { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.UShortIListConverter))]
        public System.Collections.Generic.IList<ushort> GlyphIndices { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.PointIListConverter))]
        public System.Collections.Generic.IList<System.Windows.Point> GlyphOffsets { get { throw null; } set { } }
        public System.Windows.Media.GlyphTypeface GlyphTypeface { get { throw null; } set { } }
        public bool IsHitTestable { get { throw null; } }
        public bool IsSideways { get { throw null; } set { } }
        public System.Windows.Markup.XmlLanguage Language { get { throw null; } set { } }
        public float PixelsPerDip { get { throw null; } set { } }
        public System.Windows.Media.Geometry BuildGeometry() { throw null; }
        public System.Windows.Rect ComputeAlignmentBox() { throw null; }
        public System.Windows.Rect ComputeInkBoundingBox() { throw null; }
        public System.Windows.Media.TextFormatting.CharacterHit GetCaretCharacterHitFromDistance(double distance, out bool isInside) { throw null; }
        public double GetDistanceFromCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit) { throw null; }
        public System.Windows.Media.TextFormatting.CharacterHit GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit) { throw null; }
        public System.Windows.Media.TextFormatting.CharacterHit GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit) { throw null; }
        void System.ComponentModel.ISupportInitialize.BeginInit() { }
        void System.ComponentModel.ISupportInitialize.EndInit() { }
    }
    public sealed partial class GlyphRunDrawing : System.Windows.Media.Drawing
    {
        public static readonly System.Windows.DependencyProperty ForegroundBrushProperty;
        public static readonly System.Windows.DependencyProperty GlyphRunProperty;
        public GlyphRunDrawing() { }
        public GlyphRunDrawing(System.Windows.Media.Brush foregroundBrush, System.Windows.Media.GlyphRun glyphRun) { }
        public System.Windows.Media.Brush ForegroundBrush { get { throw null; } set { } }
        public System.Windows.Media.GlyphRun GlyphRun { get { throw null; } set { } }
        public new System.Windows.Media.GlyphRunDrawing Clone() { throw null; }
        public new System.Windows.Media.GlyphRunDrawing CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public partial class GlyphTypeface : System.ComponentModel.ISupportInitialize
    {
        public GlyphTypeface() { }
        public GlyphTypeface(System.Uri typefaceSource) { }
        public GlyphTypeface(System.Uri typefaceSource, System.Windows.Media.StyleSimulations styleSimulations) { }
        public System.Collections.Generic.IDictionary<ushort, double> AdvanceHeights { get { throw null; } }
        public System.Collections.Generic.IDictionary<ushort, double> AdvanceWidths { get { throw null; } }
        public double Baseline { get { throw null; } }
        public System.Collections.Generic.IDictionary<ushort, double> BottomSideBearings { get { throw null; } }
        public double CapsHeight { get { throw null; } }
        public System.Collections.Generic.IDictionary<int, ushort> CharacterToGlyphMap { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> Copyrights { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> Descriptions { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> DesignerNames { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> DesignerUrls { get { throw null; } }
        public System.Collections.Generic.IDictionary<ushort, double> DistancesFromHorizontalBaselineToBlackBoxBottom { get { throw null; } }
        public System.Windows.Media.FontEmbeddingRight EmbeddingRights { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> FaceNames { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> FamilyNames { get { throw null; } }
        public System.Uri FontUri { get { throw null; } set { } }
        public int GlyphCount { get { throw null; } }
        public double Height { get { throw null; } }
        public System.Collections.Generic.IDictionary<ushort, double> LeftSideBearings { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> LicenseDescriptions { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> ManufacturerNames { get { throw null; } }
        public System.Collections.Generic.IDictionary<ushort, double> RightSideBearings { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> SampleTexts { get { throw null; } }
        public System.Windows.FontStretch Stretch { get { throw null; } }
        public double StrikethroughPosition { get { throw null; } }
        public double StrikethroughThickness { get { throw null; } }
        public System.Windows.FontStyle Style { get { throw null; } }
        public System.Windows.Media.StyleSimulations StyleSimulations { get { throw null; } set { } }
        public bool Symbol { get { throw null; } }
        public System.Collections.Generic.IDictionary<ushort, double> TopSideBearings { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> Trademarks { get { throw null; } }
        public double UnderlinePosition { get { throw null; } }
        public double UnderlineThickness { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> VendorUrls { get { throw null; } }
        public double Version { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> VersionStrings { get { throw null; } }
        public System.Windows.FontWeight Weight { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> Win32FaceNames { get { throw null; } }
        public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, string> Win32FamilyNames { get { throw null; } }
        public double XHeight { get { throw null; } }
        [System.CLSCompliantAttribute(false)]
        public byte[] ComputeSubset(System.Collections.Generic.ICollection<ushort> glyphs) { throw null; }
        public override bool Equals(object o) { throw null; }
        public System.IO.Stream GetFontStream() { throw null; }
        [System.CLSCompliantAttribute(false)]
        public System.Windows.Media.Geometry GetGlyphOutline(ushort glyphIndex, double renderingEmSize, double hintingEmSize) { throw null; }
        public override int GetHashCode() { throw null; }
        void System.ComponentModel.ISupportInitialize.BeginInit() { }
        void System.ComponentModel.ISupportInitialize.EndInit() { }
    }
    [System.Windows.Markup.ContentPropertyAttribute("GradientStops")]
    public abstract partial class GradientBrush : System.Windows.Media.Brush
    {
        public static readonly System.Windows.DependencyProperty ColorInterpolationModeProperty;
        public static readonly System.Windows.DependencyProperty GradientStopsProperty;
        public static readonly System.Windows.DependencyProperty MappingModeProperty;
        public static readonly System.Windows.DependencyProperty SpreadMethodProperty;
        protected GradientBrush() { }
        protected GradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection) { }
        public System.Windows.Media.ColorInterpolationMode ColorInterpolationMode { get { throw null; } set { } }
        public System.Windows.Media.GradientStopCollection GradientStops { get { throw null; } set { } }
        public System.Windows.Media.BrushMappingMode MappingMode { get { throw null; } set { } }
        public System.Windows.Media.GradientSpreadMethod SpreadMethod { get { throw null; } set { } }
        public new System.Windows.Media.GradientBrush Clone() { throw null; }
        public new System.Windows.Media.GradientBrush CloneCurrentValue() { throw null; }
    }
    public enum GradientSpreadMethod
    {
        Pad = 0,
        Reflect = 1,
        Repeat = 2,
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public sealed partial class GradientStop : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        public static readonly System.Windows.DependencyProperty ColorProperty;
        public static readonly System.Windows.DependencyProperty OffsetProperty;
        public GradientStop() { }
        public GradientStop(System.Windows.Media.Color color, double offset) { }
        public System.Windows.Media.Color Color { get { throw null; } set { } }
        public double Offset { get { throw null; } set { } }
        public new System.Windows.Media.GradientStop Clone() { throw null; }
        public new System.Windows.Media.GradientStop CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public sealed partial class GradientStopCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.GradientStop>, System.Collections.Generic.IEnumerable<System.Windows.Media.GradientStop>, System.Collections.Generic.IList<System.Windows.Media.GradientStop>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable
    {
        public GradientStopCollection() { }
        public GradientStopCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.GradientStop> collection) { }
        public GradientStopCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.GradientStop this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.GradientStop>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.GradientStop value) { }
        public void Clear() { }
        public new System.Windows.Media.GradientStopCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.GradientStopCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.GradientStop value) { throw null; }
        public void CopyTo(System.Windows.Media.GradientStop[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.GradientStopCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.GradientStop value) { throw null; }
        public void Insert(int index, System.Windows.Media.GradientStop value) { }
        public static System.Windows.Media.GradientStopCollection Parse(string source) { throw null; }
        public bool Remove(System.Windows.Media.GradientStop value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.GradientStop> System.Collections.Generic.IEnumerable<System.Windows.Media.GradientStop>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.GradientStop>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.GradientStop Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class GuidelineSet : System.Windows.Media.Animation.Animatable
    {
        public static readonly System.Windows.DependencyProperty GuidelinesXProperty;
        public static readonly System.Windows.DependencyProperty GuidelinesYProperty;
        public GuidelineSet() { }
        public GuidelineSet(double[] guidelinesX, double[] guidelinesY) { }
        public System.Windows.Media.DoubleCollection GuidelinesX { get { throw null; } set { } }
        public System.Windows.Media.DoubleCollection GuidelinesY { get { throw null; } set { } }
        public new System.Windows.Media.GuidelineSet Clone() { throw null; }
        public new System.Windows.Media.GuidelineSet CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public enum HitTestFilterBehavior
    {
        ContinueSkipSelfAndChildren = 0,
        ContinueSkipChildren = 2,
        ContinueSkipSelf = 4,
        Continue = 6,
        Stop = 8,
    }
    public delegate System.Windows.Media.HitTestFilterBehavior HitTestFilterCallback(System.Windows.DependencyObject potentialHitTestTarget);
    public abstract partial class HitTestParameters
    {
        internal HitTestParameters() { }
    }
    public abstract partial class HitTestResult
    {
        internal HitTestResult() { }
        public System.Windows.DependencyObject VisualHit { get { throw null; } }
    }
    public enum HitTestResultBehavior
    {
        Stop = 0,
        Continue = 1,
    }
    public delegate System.Windows.Media.HitTestResultBehavior HitTestResultCallback(System.Windows.Media.HitTestResult result);
    public partial class HostVisual : System.Windows.Media.ContainerVisual
    {
        public HostVisual() { }
        protected override System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { throw null; }
        protected override System.Windows.Media.HitTestResult HitTestCore(System.Windows.Media.PointHitTestParameters hitTestParameters) { throw null; }
    }
    public sealed partial class ImageBrush : System.Windows.Media.TileBrush
    {
        public static readonly System.Windows.DependencyProperty ImageSourceProperty;
        public ImageBrush() { }
        public ImageBrush(System.Windows.Media.ImageSource image) { }
        public System.Windows.Media.ImageSource ImageSource { get { throw null; } set { } }
        public new System.Windows.Media.ImageBrush Clone() { throw null; }
        public new System.Windows.Media.ImageBrush CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetContentBounds(out System.Windows.Rect contentBounds) { throw null; }
    }
    public sealed partial class ImageDrawing : System.Windows.Media.Drawing
    {
        public static readonly System.Windows.DependencyProperty ImageSourceProperty;
        public static readonly System.Windows.DependencyProperty RectProperty;
        public ImageDrawing() { }
        public ImageDrawing(System.Windows.Media.ImageSource imageSource, System.Windows.Rect rect) { }
        public System.Windows.Media.ImageSource ImageSource { get { throw null; } set { } }
        public System.Windows.Rect Rect { get { throw null; } set { } }
        public new System.Windows.Media.ImageDrawing Clone() { throw null; }
        public new System.Windows.Media.ImageDrawing CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public abstract partial class ImageMetadata : System.Windows.Freezable
    {
        internal ImageMetadata() { }
        public new System.Windows.Media.ImageMetadata Clone() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.ImageSourceConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.ImageSourceValueSerializer))]
    public abstract partial class ImageSource : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        internal ImageSource() { }
        public abstract double Height { get; }
        public abstract System.Windows.Media.ImageMetadata Metadata { get; }
        public abstract double Width { get; }
        public new System.Windows.Media.ImageSource Clone() { throw null; }
        public new System.Windows.Media.ImageSource CloneCurrentValue() { throw null; }
        protected static double PixelsToDIPs(double dpi, int pixels) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public partial class ImageSourceConverter : System.ComponentModel.TypeConverter
    {
        public ImageSourceConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public partial class ImageSourceValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public ImageSourceValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Int32CollectionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.Int32CollectionValueSerializer))]
    public sealed partial class Int32Collection : System.Windows.Freezable, System.Collections.Generic.ICollection<int>, System.Collections.Generic.IEnumerable<int>, System.Collections.Generic.IList<int>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable
    {
        public Int32Collection() { }
        public Int32Collection(System.Collections.Generic.IEnumerable<int> collection) { }
        public Int32Collection(int capacity) { }
        public int Count { get { throw null; } }
        public int this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Int32>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(int value) { }
        public void Clear() { }
        public new System.Windows.Media.Int32Collection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Int32Collection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(int value) { throw null; }
        public void CopyTo(int[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.Int32Collection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(int value) { throw null; }
        public void Insert(int index, int value) { }
        public static System.Windows.Media.Int32Collection Parse(string source) { throw null; }
        public bool Remove(int value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<int> System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<int>, System.Collections.IEnumerator, System.IDisposable
        {
            public int Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class Int32CollectionConverter : System.ComponentModel.TypeConverter
    {
        public Int32CollectionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public enum IntersectionDetail
    {
        NotCalculated = 0,
        Empty = 1,
        FullyInside = 2,
        FullyContains = 3,
        Intersects = 4,
    }
    public partial class InvalidWmpVersionException : System.SystemException
    {
        public InvalidWmpVersionException() { }
        protected InvalidWmpVersionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public InvalidWmpVersionException(string message) { }
        public InvalidWmpVersionException(string message, System.Exception innerException) { }
    }
    public sealed partial class LanguageSpecificStringDictionary : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, string>>, System.Collections.Generic.IDictionary<System.Windows.Markup.XmlLanguage, string>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, string>>, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable
    {
        internal LanguageSpecificStringDictionary() { }
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public string this[System.Windows.Markup.XmlLanguage key] { get { throw null; } set { } }
        [System.CLSCompliantAttribute(false)]
        public System.Collections.Generic.ICollection<System.Windows.Markup.XmlLanguage> Keys { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IDictionary.IsFixedSize { get { throw null; } }
        object System.Collections.IDictionary.this[object key] { get { throw null; } set { } }
        System.Collections.ICollection System.Collections.IDictionary.Keys { get { throw null; } }
        System.Collections.ICollection System.Collections.IDictionary.Values { get { throw null; } }
        [System.CLSCompliantAttribute(false)]
        public System.Collections.Generic.ICollection<string> Values { get { throw null; } }
        [System.CLSCompliantAttribute(false)]
        public void Add(System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, string> item) { }
        public void Add(System.Windows.Markup.XmlLanguage key, string value) { }
        public void Clear() { }
        [System.CLSCompliantAttribute(false)]
        public bool Contains(System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, string> item) { throw null; }
        public bool ContainsKey(System.Windows.Markup.XmlLanguage key) { throw null; }
        [System.CLSCompliantAttribute(false)]
        public void CopyTo(System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, string>[] array, int index) { }
        [System.CLSCompliantAttribute(false)]
        public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, string>> GetEnumerator() { throw null; }
        [System.CLSCompliantAttribute(false)]
        public bool Remove(System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, string> item) { throw null; }
        public bool Remove(System.Windows.Markup.XmlLanguage key) { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        void System.Collections.IDictionary.Add(object key, object value) { }
        bool System.Collections.IDictionary.Contains(object key) { throw null; }
        System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { throw null; }
        void System.Collections.IDictionary.Remove(object key) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        public bool TryGetValue(System.Windows.Markup.XmlLanguage key, out string value) { throw null; }
    }
    public sealed partial class LinearGradientBrush : System.Windows.Media.GradientBrush
    {
        public static readonly System.Windows.DependencyProperty EndPointProperty;
        public static readonly System.Windows.DependencyProperty StartPointProperty;
        public LinearGradientBrush() { }
        public LinearGradientBrush(System.Windows.Media.Color startColor, System.Windows.Media.Color endColor, double angle) { }
        public LinearGradientBrush(System.Windows.Media.Color startColor, System.Windows.Media.Color endColor, System.Windows.Point startPoint, System.Windows.Point endPoint) { }
        public LinearGradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection) { }
        public LinearGradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection, double angle) { }
        public LinearGradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection, System.Windows.Point startPoint, System.Windows.Point endPoint) { }
        public System.Windows.Point EndPoint { get { throw null; } set { } }
        public System.Windows.Point StartPoint { get { throw null; } set { } }
        public new System.Windows.Media.LinearGradientBrush Clone() { throw null; }
        public new System.Windows.Media.LinearGradientBrush CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class LineGeometry : System.Windows.Media.Geometry
    {
        public static readonly System.Windows.DependencyProperty EndPointProperty;
        public static readonly System.Windows.DependencyProperty StartPointProperty;
        public LineGeometry() { }
        public LineGeometry(System.Windows.Point startPoint, System.Windows.Point endPoint) { }
        public LineGeometry(System.Windows.Point startPoint, System.Windows.Point endPoint, System.Windows.Media.Transform transform) { }
        public override System.Windows.Rect Bounds { get { throw null; } }
        public System.Windows.Point EndPoint { get { throw null; } set { } }
        public System.Windows.Point StartPoint { get { throw null; } set { } }
        public new System.Windows.Media.LineGeometry Clone() { throw null; }
        public new System.Windows.Media.LineGeometry CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public override double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public override bool IsEmpty() { throw null; }
        public override bool MayHaveCurves() { throw null; }
    }
    public sealed partial class LineSegment : System.Windows.Media.PathSegment
    {
        public static readonly System.Windows.DependencyProperty PointProperty;
        public LineSegment() { }
        public LineSegment(System.Windows.Point point, bool isStroked) { }
        public System.Windows.Point Point { get { throw null; } set { } }
        public new System.Windows.Media.LineSegment Clone() { throw null; }
        public new System.Windows.Media.LineSegment CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class MatrixTransform : System.Windows.Media.Transform
    {
        public static readonly System.Windows.DependencyProperty MatrixProperty;
        public MatrixTransform() { }
        public MatrixTransform(double m11, double m12, double m21, double m22, double offsetX, double offsetY) { }
        public MatrixTransform(System.Windows.Media.Matrix matrix) { }
        public System.Windows.Media.Matrix Matrix { get { throw null; } set { } }
        public override System.Windows.Media.Matrix Value { get { throw null; } }
        public new System.Windows.Media.MatrixTransform Clone() { throw null; }
        public new System.Windows.Media.MatrixTransform CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public partial class MediaClock : System.Windows.Media.Animation.Clock
    {
        protected internal MediaClock(System.Windows.Media.MediaTimeline media) : base(default(System.Windows.Media.Animation.Timeline)) { }
        public new System.Windows.Media.MediaTimeline Timeline { get { throw null; } }
        protected override void DiscontinuousTimeMovement() { }
        protected override bool GetCanSlip() { throw null; }
        protected override System.TimeSpan GetCurrentTimeCore() { throw null; }
        protected override void SpeedChanged() { }
        protected override void Stopped() { }
    }
    public partial class MediaPlayer : System.Windows.Media.Animation.Animatable
    {
        public MediaPlayer() { }
        public double Balance { get { throw null; } set { } }
        public double BufferingProgress { get { throw null; } }
        public bool CanPause { get { throw null; } }
        public System.Windows.Media.MediaClock Clock { get { throw null; } set { } }
        public double DownloadProgress { get { throw null; } }
        public bool HasAudio { get { throw null; } }
        public bool HasVideo { get { throw null; } }
        public bool IsBuffering { get { throw null; } }
        public bool IsMuted { get { throw null; } set { } }
        public System.Windows.Duration NaturalDuration { get { throw null; } }
        public int NaturalVideoHeight { get { throw null; } }
        public int NaturalVideoWidth { get { throw null; } }
        public System.TimeSpan Position { get { throw null; } set { } }
        public bool ScrubbingEnabled { get { throw null; } set { } }
        public System.Uri Source { get { throw null; } }
        public double SpeedRatio { get { throw null; } set { } }
        public double Volume { get { throw null; } set { } }
        public event System.EventHandler BufferingEnded { add { } remove { } }
        public event System.EventHandler BufferingStarted { add { } remove { } }
        public event System.EventHandler MediaEnded { add { } remove { } }
        public event System.EventHandler<System.Windows.Media.ExceptionEventArgs> MediaFailed { add { } remove { } }
        public event System.EventHandler MediaOpened { add { } remove { } }
        public event System.EventHandler<System.Windows.Media.MediaScriptCommandEventArgs> ScriptCommand { add { } remove { } }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public void Close() { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public void Open(System.Uri source) { }
        public void Pause() { }
        public void Play() { }
        protected new void ReadPreamble() { }
        public void Stop() { }
        protected new void WritePreamble() { }
    }
    public sealed partial class MediaScriptCommandEventArgs : System.EventArgs
    {
        internal MediaScriptCommandEventArgs() { }
        public string ParameterType { get { throw null; } }
        public string ParameterValue { get { throw null; } }
    }
    public partial class MediaTimeline : System.Windows.Media.Animation.Timeline, System.Windows.Markup.IUriContext
    {
        public static readonly System.Windows.DependencyProperty SourceProperty;
        public MediaTimeline() { }
        public MediaTimeline(System.TimeSpan? beginTime) { }
        public MediaTimeline(System.TimeSpan? beginTime, System.Windows.Duration duration) { }
        public MediaTimeline(System.TimeSpan? beginTime, System.Windows.Duration duration, System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { }
        public MediaTimeline(System.Uri source) { }
        public System.Uri Source { get { throw null; } set { } }
        System.Uri System.Windows.Markup.IUriContext.BaseUri { get { throw null; } set { } }
        protected internal override System.Windows.Media.Animation.Clock AllocateClock() { throw null; }
        public new System.Windows.Media.MediaTimeline Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.MediaTimeline CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.MediaClock CreateClock() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        public override string ToString() { throw null; }
    }
    public enum NumberCultureSource
    {
        Text = 0,
        User = 1,
        Override = 2,
    }
    public partial class NumberSubstitution
    {
        public static readonly System.Windows.DependencyProperty CultureOverrideProperty;
        public static readonly System.Windows.DependencyProperty CultureSourceProperty;
        public static readonly System.Windows.DependencyProperty SubstitutionProperty;
        public NumberSubstitution() { }
        public NumberSubstitution(System.Windows.Media.NumberCultureSource source, System.Globalization.CultureInfo cultureOverride, System.Windows.Media.NumberSubstitutionMethod substitution) { }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]
        public System.Globalization.CultureInfo CultureOverride { get { throw null; } set { } }
        public System.Windows.Media.NumberCultureSource CultureSource { get { throw null; } set { } }
        public System.Windows.Media.NumberSubstitutionMethod Substitution { get { throw null; } set { } }
        public override bool Equals(object obj) { throw null; }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Globalization.CultureInfo GetCultureOverride(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Windows.Media.NumberCultureSource GetCultureSource(System.Windows.DependencyObject target) { throw null; }
        public override int GetHashCode() { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Windows.Media.NumberSubstitutionMethod GetSubstitution(System.Windows.DependencyObject target) { throw null; }
        public static void SetCultureOverride(System.Windows.DependencyObject target, System.Globalization.CultureInfo value) { }
        public static void SetCultureSource(System.Windows.DependencyObject target, System.Windows.Media.NumberCultureSource value) { }
        public static void SetSubstitution(System.Windows.DependencyObject target, System.Windows.Media.NumberSubstitutionMethod value) { }
    }
    public enum NumberSubstitutionMethod
    {
        AsCulture = 0,
        Context = 1,
        European = 2,
        NativeNational = 3,
        Traditional = 4,
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    [System.Windows.Markup.ContentPropertyAttribute("Segments")]
    public sealed partial class PathFigure : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        public static readonly System.Windows.DependencyProperty IsClosedProperty;
        public static readonly System.Windows.DependencyProperty IsFilledProperty;
        public static readonly System.Windows.DependencyProperty SegmentsProperty;
        public static readonly System.Windows.DependencyProperty StartPointProperty;
        public PathFigure() { }
        public PathFigure(System.Windows.Point start, System.Collections.Generic.IEnumerable<System.Windows.Media.PathSegment> segments, bool closed) { }
        public bool IsClosed { get { throw null; } set { } }
        public bool IsFilled { get { throw null; } set { } }
        public System.Windows.Media.PathSegmentCollection Segments { get { throw null; } set { } }
        public System.Windows.Point StartPoint { get { throw null; } set { } }
        public new System.Windows.Media.PathFigure Clone() { throw null; }
        public new System.Windows.Media.PathFigure CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public System.Windows.Media.PathFigure GetFlattenedPathFigure() { throw null; }
        public System.Windows.Media.PathFigure GetFlattenedPathFigure(double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public bool MayHaveCurves() { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.PathFigureCollectionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.PathFigureCollectionValueSerializer))]
    public sealed partial class PathFigureCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.PathFigure>, System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure>, System.Collections.Generic.IList<System.Windows.Media.PathFigure>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable
    {
        public PathFigureCollection() { }
        public PathFigureCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure> collection) { }
        public PathFigureCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.PathFigure this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.PathFigure>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.PathFigure value) { }
        public void Clear() { }
        public new System.Windows.Media.PathFigureCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.PathFigureCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.PathFigure value) { throw null; }
        public void CopyTo(System.Windows.Media.PathFigure[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.PathFigureCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.PathFigure value) { throw null; }
        public void Insert(int index, System.Windows.Media.PathFigure value) { }
        public static System.Windows.Media.PathFigureCollection Parse(string source) { throw null; }
        public bool Remove(System.Windows.Media.PathFigure value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.PathFigure> System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.PathFigure>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.PathFigure Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class PathFigureCollectionConverter : System.ComponentModel.TypeConverter
    {
        public PathFigureCollectionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Figures")]
    public sealed partial class PathGeometry : System.Windows.Media.Geometry
    {
        public static readonly System.Windows.DependencyProperty FiguresProperty;
        public static readonly System.Windows.DependencyProperty FillRuleProperty;
        public PathGeometry() { }
        public PathGeometry(System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure> figures) { }
        public PathGeometry(System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure> figures, System.Windows.Media.FillRule fillRule, System.Windows.Media.Transform transform) { }
        public override System.Windows.Rect Bounds { get { throw null; } }
        public System.Windows.Media.PathFigureCollection Figures { get { throw null; } set { } }
        public System.Windows.Media.FillRule FillRule { get { throw null; } set { } }
        public void AddGeometry(System.Windows.Media.Geometry geometry) { }
        public void Clear() { }
        public new System.Windows.Media.PathGeometry Clone() { throw null; }
        public new System.Windows.Media.PathGeometry CloneCurrentValue() { throw null; }
        public static System.Windows.Media.PathGeometry CreateFromGeometry(System.Windows.Media.Geometry geometry) { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public void GetPointAtFractionLength(double progress, out System.Windows.Point point, out System.Windows.Point tangent) { throw null; }
        public override bool IsEmpty() { throw null; }
        public override bool MayHaveCurves() { throw null; }
        protected override void OnChanged() { }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public abstract partial class PathSegment : System.Windows.Media.Animation.Animatable
    {
        internal PathSegment() { }
        public static readonly System.Windows.DependencyProperty IsSmoothJoinProperty;
        public static readonly System.Windows.DependencyProperty IsStrokedProperty;
        public bool IsSmoothJoin { get { throw null; } set { } }
        public bool IsStroked { get { throw null; } set { } }
        public new System.Windows.Media.PathSegment Clone() { throw null; }
        public new System.Windows.Media.PathSegment CloneCurrentValue() { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public sealed partial class PathSegmentCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.PathSegment>, System.Collections.Generic.IEnumerable<System.Windows.Media.PathSegment>, System.Collections.Generic.IList<System.Windows.Media.PathSegment>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public PathSegmentCollection() { }
        public PathSegmentCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.PathSegment> collection) { }
        public PathSegmentCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.PathSegment this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.PathSegment>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.PathSegment value) { }
        public void Clear() { }
        public new System.Windows.Media.PathSegmentCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.PathSegmentCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.PathSegment value) { throw null; }
        public void CopyTo(System.Windows.Media.PathSegment[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.PathSegmentCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.PathSegment value) { throw null; }
        public void Insert(int index, System.Windows.Media.PathSegment value) { }
        public bool Remove(System.Windows.Media.PathSegment value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.PathSegment> System.Collections.Generic.IEnumerable<System.Windows.Media.PathSegment>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.PathSegment>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.PathSegment Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public sealed partial class Pen : System.Windows.Media.Animation.Animatable
    {
        public static readonly System.Windows.DependencyProperty BrushProperty;
        public static readonly System.Windows.DependencyProperty DashCapProperty;
        public static readonly System.Windows.DependencyProperty DashStyleProperty;
        public static readonly System.Windows.DependencyProperty EndLineCapProperty;
        public static readonly System.Windows.DependencyProperty LineJoinProperty;
        public static readonly System.Windows.DependencyProperty MiterLimitProperty;
        public static readonly System.Windows.DependencyProperty StartLineCapProperty;
        public static readonly System.Windows.DependencyProperty ThicknessProperty;
        public Pen() { }
        public Pen(System.Windows.Media.Brush brush, double thickness) { }
        public System.Windows.Media.Brush Brush { get { throw null; } set { } }
        public System.Windows.Media.PenLineCap DashCap { get { throw null; } set { } }
        public System.Windows.Media.DashStyle DashStyle { get { throw null; } set { } }
        public System.Windows.Media.PenLineCap EndLineCap { get { throw null; } set { } }
        public System.Windows.Media.PenLineJoin LineJoin { get { throw null; } set { } }
        public double MiterLimit { get { throw null; } set { } }
        public System.Windows.Media.PenLineCap StartLineCap { get { throw null; } set { } }
        public double Thickness { get { throw null; } set { } }
        public new System.Windows.Media.Pen Clone() { throw null; }
        public new System.Windows.Media.Pen CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public enum PenDashCap
    {
        Flat = 0,
        Round = 2,
        Triangle = 3,
    }
    public enum PenLineCap
    {
        Flat = 0,
        Square = 1,
        Round = 2,
        Triangle = 3,
    }
    public enum PenLineJoin
    {
        Miter = 0,
        Bevel = 1,
        Round = 2,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.PixelFormatConverter))]
    public partial struct PixelFormat : System.IEquatable<System.Windows.Media.PixelFormat>
    {
        public int BitsPerPixel { get { throw null; } }
        public System.Collections.Generic.IList<System.Windows.Media.PixelFormatChannelMask> Masks { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.Media.PixelFormat pixelFormat) { throw null; }
        public static bool Equals(System.Windows.Media.PixelFormat left, System.Windows.Media.PixelFormat right) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.PixelFormat left, System.Windows.Media.PixelFormat right) { throw null; }
        public static bool operator !=(System.Windows.Media.PixelFormat left, System.Windows.Media.PixelFormat right) { throw null; }
        public override string ToString() { throw null; }
    }
    public partial struct PixelFormatChannelMask
    {
        public System.Collections.Generic.IList<byte> Mask { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public static bool Equals(System.Windows.Media.PixelFormatChannelMask left, System.Windows.Media.PixelFormatChannelMask right) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.PixelFormatChannelMask left, System.Windows.Media.PixelFormatChannelMask right) { throw null; }
        public static bool operator !=(System.Windows.Media.PixelFormatChannelMask left, System.Windows.Media.PixelFormatChannelMask right) { throw null; }
    }
    public sealed partial class PixelFormatConverter : System.ComponentModel.TypeConverter
    {
        public PixelFormatConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object o) { throw null; }
        public new object ConvertFromString(string value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public static partial class PixelFormats
    {
        public static System.Windows.Media.PixelFormat Bgr101010 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Bgr24 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Bgr32 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Bgr555 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Bgr565 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Bgra32 { get { throw null; } }
        public static System.Windows.Media.PixelFormat BlackWhite { get { throw null; } }
        public static System.Windows.Media.PixelFormat Cmyk32 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Default { get { throw null; } }
        public static System.Windows.Media.PixelFormat Gray16 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Gray2 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Gray32Float { get { throw null; } }
        public static System.Windows.Media.PixelFormat Gray4 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Gray8 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Indexed1 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Indexed2 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Indexed4 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Indexed8 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Pbgra32 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Prgba128Float { get { throw null; } }
        public static System.Windows.Media.PixelFormat Prgba64 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Rgb128Float { get { throw null; } }
        public static System.Windows.Media.PixelFormat Rgb24 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Rgb48 { get { throw null; } }
        public static System.Windows.Media.PixelFormat Rgba128Float { get { throw null; } }
        public static System.Windows.Media.PixelFormat Rgba64 { get { throw null; } }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.PointCollectionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.PointCollectionValueSerializer))]
    public sealed partial class PointCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable, System.Collections.Generic.IList<System.Windows.Point>
    {
        public PointCollection() { }
        public PointCollection(System.Collections.Generic.IEnumerable<System.Windows.Point> collection) { }
        public PointCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Point this[int index] { get { throw null; } set { } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        bool System.Collections.Generic.ICollection<System.Windows.Point>.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Point value) { }
        public void Clear() { }
        public new System.Windows.Media.PointCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.PointCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Point value) { throw null; }
        public void CopyTo(System.Windows.Point[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.PointCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Point value) { throw null; }
        public void Insert(int index, System.Windows.Point value) { }
        public static System.Windows.Media.PointCollection Parse(string source) { throw null; }
        public bool Remove(System.Windows.Point value) { throw null; }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        System.Collections.Generic.IEnumerator<System.Windows.Point> System.Collections.Generic.IEnumerable<System.Windows.Point>.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public partial struct Enumerator : System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerator<System.Windows.Point>
        {
            public System.Windows.Point Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }

    public sealed partial class PointCollectionConverter : System.ComponentModel.TypeConverter
    {
        public PointCollectionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public partial class PointHitTestParameters : System.Windows.Media.HitTestParameters
    {
        public PointHitTestParameters(System.Windows.Point point) { }
        public System.Windows.Point HitPoint { get { throw null; } }
    }
    public partial class PointHitTestResult : System.Windows.Media.HitTestResult
    {
        public PointHitTestResult(System.Windows.Media.Visual visualHit, System.Windows.Point pointHit) { }
        public System.Windows.Point PointHit { get { throw null; } }
        public new System.Windows.Media.Visual VisualHit { get { throw null; } }
    }
    public sealed partial class PolyBezierSegment : System.Windows.Media.PathSegment
    {
        public static readonly System.Windows.DependencyProperty PointsProperty;
        public PolyBezierSegment() { }
        public PolyBezierSegment(System.Collections.Generic.IEnumerable<System.Windows.Point> points, bool isStroked) { }
        public System.Windows.Media.PointCollection Points { get { throw null; } set { } }
        public new System.Windows.Media.PolyBezierSegment Clone() { throw null; }
        public new System.Windows.Media.PolyBezierSegment CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class PolyLineSegment : System.Windows.Media.PathSegment
    {
        public static readonly System.Windows.DependencyProperty PointsProperty;
        public PolyLineSegment() { }
        public PolyLineSegment(System.Collections.Generic.IEnumerable<System.Windows.Point> points, bool isStroked) { }
        public System.Windows.Media.PointCollection Points { get { throw null; } set { } }
        public new System.Windows.Media.PolyLineSegment Clone() { throw null; }
        public new System.Windows.Media.PolyLineSegment CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class PolyQuadraticBezierSegment : System.Windows.Media.PathSegment
    {
        public static readonly System.Windows.DependencyProperty PointsProperty;
        public PolyQuadraticBezierSegment() { }
        public PolyQuadraticBezierSegment(System.Collections.Generic.IEnumerable<System.Windows.Point> points, bool isStroked) { }
        public System.Windows.Media.PointCollection Points { get { throw null; } set { } }
        public new System.Windows.Media.PolyQuadraticBezierSegment Clone() { throw null; }
        public new System.Windows.Media.PolyQuadraticBezierSegment CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class QuadraticBezierSegment : System.Windows.Media.PathSegment
    {
        public static readonly System.Windows.DependencyProperty Point1Property;
        public static readonly System.Windows.DependencyProperty Point2Property;
        public QuadraticBezierSegment() { }
        public QuadraticBezierSegment(System.Windows.Point point1, System.Windows.Point point2, bool isStroked) { }
        public System.Windows.Point Point1 { get { throw null; } set { } }
        public System.Windows.Point Point2 { get { throw null; } set { } }
        public new System.Windows.Media.QuadraticBezierSegment Clone() { throw null; }
        public new System.Windows.Media.QuadraticBezierSegment CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class RadialGradientBrush : System.Windows.Media.GradientBrush
    {
        public static readonly System.Windows.DependencyProperty CenterProperty;
        public static readonly System.Windows.DependencyProperty GradientOriginProperty;
        public static readonly System.Windows.DependencyProperty RadiusXProperty;
        public static readonly System.Windows.DependencyProperty RadiusYProperty;
        public RadialGradientBrush() { }
        public RadialGradientBrush(System.Windows.Media.Color startColor, System.Windows.Media.Color endColor) { }
        public RadialGradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection) { }
        public System.Windows.Point Center { get { throw null; } set { } }
        public System.Windows.Point GradientOrigin { get { throw null; } set { } }
        public double RadiusX { get { throw null; } set { } }
        public double RadiusY { get { throw null; } set { } }
        public new System.Windows.Media.RadialGradientBrush Clone() { throw null; }
        public new System.Windows.Media.RadialGradientBrush CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class RectangleGeometry : System.Windows.Media.Geometry
    {
        public static readonly System.Windows.DependencyProperty RadiusXProperty;
        public static readonly System.Windows.DependencyProperty RadiusYProperty;
        public static readonly System.Windows.DependencyProperty RectProperty;
        public RectangleGeometry() { }
        public RectangleGeometry(System.Windows.Rect rect) { }
        public RectangleGeometry(System.Windows.Rect rect, double radiusX, double radiusY) { }
        public RectangleGeometry(System.Windows.Rect rect, double radiusX, double radiusY, System.Windows.Media.Transform transform) { }
        public override System.Windows.Rect Bounds { get { throw null; } }
        public double RadiusX { get { throw null; } set { } }
        public double RadiusY { get { throw null; } set { } }
        public System.Windows.Rect Rect { get { throw null; } set { } }
        public new System.Windows.Media.RectangleGeometry Clone() { throw null; }
        public new System.Windows.Media.RectangleGeometry CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public override double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { throw null; }
        public override bool IsEmpty() { throw null; }
        public override bool MayHaveCurves() { throw null; }
    }
    public static partial class RenderCapability
    {
        [System.ObsoleteAttribute("IsShaderEffectSoftwareRenderingSupported property is deprecated.  Use IsPixelShaderVersionSupportedInSoftware static method instead.")]
        public static bool IsShaderEffectSoftwareRenderingSupported { get { throw null; } }
        public static System.Windows.Size MaxHardwareTextureSize { get { throw null; } }
        public static int Tier { get { throw null; } }
        public static event System.EventHandler TierChanged { add { } remove { } }
        public static bool IsPixelShaderVersionSupported(short majorVersionRequested, short minorVersionRequested) { throw null; }
        public static bool IsPixelShaderVersionSupportedInSoftware(short majorVersionRequested, short minorVersionRequested) { throw null; }
        public static int MaxPixelShaderInstructionSlots(short majorVersionRequested, short minorVersionRequested) { throw null; }
    }
    public partial class RenderingEventArgs : System.EventArgs
    {
        internal RenderingEventArgs() { }
        public System.TimeSpan RenderingTime { get { throw null; } }
    }
    public static partial class RenderOptions
    {
        public static readonly System.Windows.DependencyProperty BitmapScalingModeProperty;
        public static readonly System.Windows.DependencyProperty CacheInvalidationThresholdMaximumProperty;
        public static readonly System.Windows.DependencyProperty CacheInvalidationThresholdMinimumProperty;
        public static readonly System.Windows.DependencyProperty CachingHintProperty;
        public static readonly System.Windows.DependencyProperty ClearTypeHintProperty;
        public static readonly System.Windows.DependencyProperty EdgeModeProperty;
        public static System.Windows.Interop.RenderMode ProcessRenderMode { get { throw null; } set { } }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Windows.Media.BitmapScalingMode GetBitmapScalingMode(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Media.TileBrush))]
        public static double GetCacheInvalidationThresholdMaximum(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Media.TileBrush))]
        public static double GetCacheInvalidationThresholdMinimum(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Media.TileBrush))]
        public static System.Windows.Media.CachingHint GetCachingHint(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Windows.Media.ClearTypeHint GetClearTypeHint(System.Windows.DependencyObject target) { throw null; }
        [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
        public static System.Windows.Media.EdgeMode GetEdgeMode(System.Windows.DependencyObject target) { throw null; }
        public static void SetBitmapScalingMode(System.Windows.DependencyObject target, System.Windows.Media.BitmapScalingMode bitmapScalingMode) { }
        public static void SetCacheInvalidationThresholdMaximum(System.Windows.DependencyObject target, double cacheInvalidationThresholdMaximum) { }
        public static void SetCacheInvalidationThresholdMinimum(System.Windows.DependencyObject target, double cacheInvalidationThresholdMinimum) { }
        public static void SetCachingHint(System.Windows.DependencyObject target, System.Windows.Media.CachingHint cachingHint) { }
        public static void SetClearTypeHint(System.Windows.DependencyObject target, System.Windows.Media.ClearTypeHint clearTypeHint) { }
        public static void SetEdgeMode(System.Windows.DependencyObject target, System.Windows.Media.EdgeMode edgeMode) { }
    }
    public sealed partial class RequestCachePolicyConverter : System.ComponentModel.TypeConverter
    {
        public RequestCachePolicyConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class RotateTransform : System.Windows.Media.Transform
    {
        public static readonly System.Windows.DependencyProperty AngleProperty;
        public static readonly System.Windows.DependencyProperty CenterXProperty;
        public static readonly System.Windows.DependencyProperty CenterYProperty;
        public RotateTransform() { }
        public RotateTransform(double angle) { }
        public RotateTransform(double angle, double centerX, double centerY) { }
        public double Angle { get { throw null; } set { } }
        public double CenterX { get { throw null; } set { } }
        public double CenterY { get { throw null; } set { } }
        public override System.Windows.Media.Matrix Value { get { throw null; } }
        public new System.Windows.Media.RotateTransform Clone() { throw null; }
        public new System.Windows.Media.RotateTransform CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class ScaleTransform : System.Windows.Media.Transform
    {
        public static readonly System.Windows.DependencyProperty CenterXProperty;
        public static readonly System.Windows.DependencyProperty CenterYProperty;
        public static readonly System.Windows.DependencyProperty ScaleXProperty;
        public static readonly System.Windows.DependencyProperty ScaleYProperty;
        public ScaleTransform() { }
        public ScaleTransform(double scaleX, double scaleY) { }
        public ScaleTransform(double scaleX, double scaleY, double centerX, double centerY) { }
        public double CenterX { get { throw null; } set { } }
        public double CenterY { get { throw null; } set { } }
        public double ScaleX { get { throw null; } set { } }
        public double ScaleY { get { throw null; } set { } }
        public override System.Windows.Media.Matrix Value { get { throw null; } }
        public new System.Windows.Media.ScaleTransform Clone() { throw null; }
        public new System.Windows.Media.ScaleTransform CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class SkewTransform : System.Windows.Media.Transform
    {
        public static readonly System.Windows.DependencyProperty AngleXProperty;
        public static readonly System.Windows.DependencyProperty AngleYProperty;
        public static readonly System.Windows.DependencyProperty CenterXProperty;
        public static readonly System.Windows.DependencyProperty CenterYProperty;
        public SkewTransform() { }
        public SkewTransform(double angleX, double angleY) { }
        public SkewTransform(double angleX, double angleY, double centerX, double centerY) { }
        public double AngleX { get { throw null; } set { } }
        public double AngleY { get { throw null; } set { } }
        public double CenterX { get { throw null; } set { } }
        public double CenterY { get { throw null; } set { } }
        public override System.Windows.Media.Matrix Value { get { throw null; } }
        public new System.Windows.Media.SkewTransform Clone() { throw null; }
        public new System.Windows.Media.SkewTransform CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class SolidColorBrush : System.Windows.Media.Brush
    {
        public static readonly System.Windows.DependencyProperty ColorProperty;
        public SolidColorBrush() { }
        public SolidColorBrush(System.Windows.Media.Color color) { }
        public System.Windows.Media.Color Color { get { throw null; } set { } }
        public new System.Windows.Media.SolidColorBrush Clone() { throw null; }
        public new System.Windows.Media.SolidColorBrush CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public static object DeserializeFrom(System.IO.BinaryReader reader) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.GeometryConverter))]
    public sealed partial class StreamGeometry : System.Windows.Media.Geometry
    {
        public static readonly System.Windows.DependencyProperty FillRuleProperty;
        public StreamGeometry() { }
        public override System.Windows.Rect Bounds { get { throw null; } }
        public System.Windows.Media.FillRule FillRule { get { throw null; } set { } }
        public void Clear() { }
        public new System.Windows.Media.StreamGeometry Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.StreamGeometry CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public override bool IsEmpty() { throw null; }
        public override bool MayHaveCurves() { throw null; }
        protected override void OnChanged() { }
        public System.Windows.Media.StreamGeometryContext Open() { throw null; }
    }
    public abstract partial class StreamGeometryContext : System.Windows.Threading.DispatcherObject, System.IDisposable
    {
        internal StreamGeometryContext() { }
        public abstract void ArcTo(System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);
        public abstract void BeginFigure(System.Windows.Point startPoint, bool isFilled, bool isClosed);
        public abstract void BezierTo(System.Windows.Point point1, System.Windows.Point point2, System.Windows.Point point3, bool isStroked, bool isSmoothJoin);
        public virtual void Close() { }
        public abstract void LineTo(System.Windows.Point point, bool isStroked, bool isSmoothJoin);
        public abstract void PolyBezierTo(System.Collections.Generic.IList<System.Windows.Point> points, bool isStroked, bool isSmoothJoin);
        public abstract void PolyLineTo(System.Collections.Generic.IList<System.Windows.Point> points, bool isStroked, bool isSmoothJoin);
        public abstract void PolyQuadraticBezierTo(System.Collections.Generic.IList<System.Windows.Point> points, bool isStroked, bool isSmoothJoin);
        public abstract void QuadraticBezierTo(System.Windows.Point point1, System.Windows.Point point2, bool isStroked, bool isSmoothJoin);
        void System.IDisposable.Dispose() { }
    }
    public enum Stretch
    {
        None = 0,
        Fill = 1,
        Uniform = 2,
        UniformToFill = 3,
    }
    [System.FlagsAttribute]
    public enum StyleSimulations
    {
        None = 0,
        BoldSimulation = 1,
        ItalicSimulation = 2,
        BoldItalicSimulation = 3,
    }
    public enum SweepDirection
    {
        Counterclockwise = 0,
        Clockwise = 1,
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public sealed partial class TextEffect : System.Windows.Media.Animation.Animatable
    {
        public static readonly System.Windows.DependencyProperty ClipProperty;
        public static readonly System.Windows.DependencyProperty ForegroundProperty;
        public static readonly System.Windows.DependencyProperty PositionCountProperty;
        public static readonly System.Windows.DependencyProperty PositionStartProperty;
        public static readonly System.Windows.DependencyProperty TransformProperty;
        public TextEffect() { }
        public TextEffect(System.Windows.Media.Transform transform, System.Windows.Media.Brush foreground, System.Windows.Media.Geometry clip, int positionStart, int positionCount) { }
        public System.Windows.Media.Geometry Clip { get { throw null; } set { } }
        public System.Windows.Media.Brush Foreground { get { throw null; } set { } }
        public int PositionCount { get { throw null; } set { } }
        public int PositionStart { get { throw null; } set { } }
        public System.Windows.Media.Transform Transform { get { throw null; } set { } }
        public new System.Windows.Media.TextEffect Clone() { throw null; }
        public new System.Windows.Media.TextEffect CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public sealed partial class TextEffectCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.TextEffect>, System.Collections.Generic.IEnumerable<System.Windows.Media.TextEffect>, System.Collections.Generic.IList<System.Windows.Media.TextEffect>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public TextEffectCollection() { }
        public TextEffectCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.TextEffect> collection) { }
        public TextEffectCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.TextEffect this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.TextEffect>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.TextEffect value) { }
        public void Clear() { }
        public new System.Windows.Media.TextEffectCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.TextEffectCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.TextEffect value) { throw null; }
        public void CopyTo(System.Windows.Media.TextEffect[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.TextEffectCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.TextEffect value) { throw null; }
        public void Insert(int index, System.Windows.Media.TextEffect value) { }
        public bool Remove(System.Windows.Media.TextEffect value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.TextEffect> System.Collections.Generic.IEnumerable<System.Windows.Media.TextEffect>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.TextEffect>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.TextEffect Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public enum TextHintingMode
    {
        Auto = 0,
        Fixed = 1,
        Animated = 2,
    }
    public enum TextRenderingMode
    {
        Auto = 0,
        Aliased = 1,
        Grayscale = 2,
        ClearType = 3,
    }
    public abstract partial class TileBrush : System.Windows.Media.Brush
    {
        public static readonly System.Windows.DependencyProperty AlignmentXProperty;
        public static readonly System.Windows.DependencyProperty AlignmentYProperty;
        public static readonly System.Windows.DependencyProperty StretchProperty;
        public static readonly System.Windows.DependencyProperty TileModeProperty;
        public static readonly System.Windows.DependencyProperty ViewboxProperty;
        public static readonly System.Windows.DependencyProperty ViewboxUnitsProperty;
        public static readonly System.Windows.DependencyProperty ViewportProperty;
        public static readonly System.Windows.DependencyProperty ViewportUnitsProperty;
        protected TileBrush() { }
        public System.Windows.Media.AlignmentX AlignmentX { get { throw null; } set { } }
        public System.Windows.Media.AlignmentY AlignmentY { get { throw null; } set { } }
        public System.Windows.Media.Stretch Stretch { get { throw null; } set { } }
        public System.Windows.Media.TileMode TileMode { get { throw null; } set { } }
        public System.Windows.Rect Viewbox { get { throw null; } set { } }
        public System.Windows.Media.BrushMappingMode ViewboxUnits { get { throw null; } set { } }
        public System.Windows.Rect Viewport { get { throw null; } set { } }
        public System.Windows.Media.BrushMappingMode ViewportUnits { get { throw null; } set { } }
        public new System.Windows.Media.TileBrush Clone() { throw null; }
        public new System.Windows.Media.TileBrush CloneCurrentValue() { throw null; }
        protected abstract void GetContentBounds(out System.Windows.Rect contentBounds);
    }
    public enum TileMode
    {
        None = 0,
        FlipX = 1,
        FlipY = 2,
        FlipXY = 3,
        Tile = 4,
    }
    public enum ToleranceType
    {
        Absolute = 0,
        Relative = 1,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.TransformConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.TransformValueSerializer))]
    public abstract partial class Transform : System.Windows.Media.GeneralTransform
    {
        internal Transform() { }
        public static System.Windows.Media.Transform Identity { get { throw null; } }
        public override System.Windows.Media.GeneralTransform Inverse { get { throw null; } }
        public abstract System.Windows.Media.Matrix Value { get; }
        public new System.Windows.Media.Transform Clone() { throw null; }
        public new System.Windows.Media.Transform CloneCurrentValue() { throw null; }
        public static System.Windows.Media.Transform Parse(string source) { throw null; }
        public override System.Windows.Rect TransformBounds(System.Windows.Rect rect) { throw null; }
        public override bool TryTransform(System.Windows.Point inPoint, out System.Windows.Point result) { throw null; }
    }
    public sealed partial class TransformCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Transform>, System.Collections.Generic.IEnumerable<System.Windows.Media.Transform>, System.Collections.Generic.IList<System.Windows.Media.Transform>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public TransformCollection() { }
        public TransformCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Transform> collection) { }
        public TransformCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Transform this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Transform>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Transform value) { }
        public void Clear() { }
        public new System.Windows.Media.TransformCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.TransformCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Transform value) { throw null; }
        public void CopyTo(System.Windows.Media.Transform[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.TransformCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Transform value) { throw null; }
        public void Insert(int index, System.Windows.Media.Transform value) { }
        public bool Remove(System.Windows.Media.Transform value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Transform> System.Collections.Generic.IEnumerable<System.Windows.Media.Transform>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Transform>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Transform Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class TransformConverter : System.ComponentModel.TypeConverter
    {
        public TransformConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class TransformGroup : System.Windows.Media.Transform
    {
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        public TransformGroup() { }
        public System.Windows.Media.TransformCollection Children { get { throw null; } set { } }
        public override System.Windows.Media.Matrix Value { get { throw null; } }
        public new System.Windows.Media.TransformGroup Clone() { throw null; }
        public new System.Windows.Media.TransformGroup CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class TranslateTransform : System.Windows.Media.Transform
    {
        public static readonly System.Windows.DependencyProperty XProperty;
        public static readonly System.Windows.DependencyProperty YProperty;
        public TranslateTransform() { }
        public TranslateTransform(double offsetX, double offsetY) { }
        public override System.Windows.Media.Matrix Value { get { throw null; } }
        public double X { get { throw null; } set { } }
        public double Y { get { throw null; } set { } }
        public new System.Windows.Media.TranslateTransform Clone() { throw null; }
        public new System.Windows.Media.TranslateTransform CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public partial class Typeface
    {
        public Typeface(string typefaceName) { }
        public Typeface(System.Windows.Media.FontFamily fontFamily, System.Windows.FontStyle style, System.Windows.FontWeight weight, System.Windows.FontStretch stretch) { }
        public Typeface(System.Windows.Media.FontFamily fontFamily, System.Windows.FontStyle style, System.Windows.FontWeight weight, System.Windows.FontStretch stretch, System.Windows.Media.FontFamily fallbackFontFamily) { }
        public double CapsHeight { get { throw null; } }
        public System.Windows.Media.LanguageSpecificStringDictionary FaceNames { get { throw null; } }
        public System.Windows.Media.FontFamily FontFamily { get { throw null; } }
        public bool IsBoldSimulated { get { throw null; } }
        public bool IsObliqueSimulated { get { throw null; } }
        public System.Windows.FontStretch Stretch { get { throw null; } }
        public double StrikethroughPosition { get { throw null; } }
        public double StrikethroughThickness { get { throw null; } }
        public System.Windows.FontStyle Style { get { throw null; } }
        public double UnderlinePosition { get { throw null; } }
        public double UnderlineThickness { get { throw null; } }
        public System.Windows.FontWeight Weight { get { throw null; } }
        public double XHeight { get { throw null; } }
        public override bool Equals(object o) { throw null; }
        public override int GetHashCode() { throw null; }
        public bool TryGetGlyphTypeface(out System.Windows.Media.GlyphTypeface glyphTypeface) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.VectorCollectionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.VectorCollectionValueSerializer))]
    public sealed partial class VectorCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable, System.Collections.Generic.IList<System.Windows.Vector>
    {
        public VectorCollection() { }
        public VectorCollection(System.Collections.Generic.IEnumerable<System.Windows.Vector> collection) { }
        public VectorCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Vector this[int index] { get { throw null; } set { } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        bool System.Collections.Generic.ICollection<System.Windows.Vector>.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Vector value) { }
        public void Clear() { }
        public new System.Windows.Media.VectorCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.VectorCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Vector value) { throw null; }
        public void CopyTo(System.Windows.Vector[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.VectorCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Vector value) { throw null; }
        public void Insert(int index, System.Windows.Vector value) { }
        public static System.Windows.Media.VectorCollection Parse(string source) { throw null; }
        public bool Remove(System.Windows.Vector value) { throw null; }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        System.Collections.Generic.IEnumerator<System.Windows.Vector> System.Collections.Generic.IEnumerable<System.Windows.Vector>.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public partial struct Enumerator : System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerator<System.Windows.Vector>
        {
            public System.Windows.Vector Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class VectorCollectionConverter : System.ComponentModel.TypeConverter
    {
        public VectorCollectionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class VideoDrawing : System.Windows.Media.Drawing
    {
        public static readonly System.Windows.DependencyProperty PlayerProperty;
        public static readonly System.Windows.DependencyProperty RectProperty;
        public VideoDrawing() { }
        public System.Windows.Media.MediaPlayer Player { get { throw null; } set { } }
        public System.Windows.Rect Rect { get { throw null; } set { } }
        public new System.Windows.Media.VideoDrawing Clone() { throw null; }
        public new System.Windows.Media.VideoDrawing CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public abstract partial class Visual : System.Windows.DependencyObject
    {
        protected Visual() { }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected internal System.Windows.Media.Effects.BitmapEffect VisualBitmapEffect { get { throw null; } protected set { } }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected internal System.Windows.Media.Effects.BitmapEffectInput VisualBitmapEffectInput { get { throw null; } protected set { } }
        protected internal System.Windows.Media.BitmapScalingMode VisualBitmapScalingMode { get { throw null; } protected set { } }
        protected internal System.Windows.Media.CacheMode VisualCacheMode { get { throw null; } protected set { } }
        protected virtual int VisualChildrenCount { get { throw null; } }
        protected internal System.Windows.Media.ClearTypeHint VisualClearTypeHint { get { throw null; } set { } }
        protected internal System.Windows.Media.Geometry VisualClip { get { throw null; } protected set { } }
        protected internal System.Windows.Media.EdgeMode VisualEdgeMode { get { throw null; } protected set { } }
        protected internal System.Windows.Media.Effects.Effect VisualEffect { get { throw null; } protected set { } }
        protected internal System.Windows.Vector VisualOffset { get { throw null; } protected set { } }
        protected internal double VisualOpacity { get { throw null; } protected set { } }
        protected internal System.Windows.Media.Brush VisualOpacityMask { get { throw null; } protected set { } }
        protected System.Windows.DependencyObject VisualParent { get { throw null; } }
        protected internal System.Windows.Rect? VisualScrollableAreaClip { get { throw null; } protected set { } }
        protected internal System.Windows.Media.TextHintingMode VisualTextHintingMode { get { throw null; } set { } }
        protected internal System.Windows.Media.TextRenderingMode VisualTextRenderingMode { get { throw null; } set { } }
        protected internal System.Windows.Media.Transform VisualTransform { get { throw null; } protected set { } }
        protected internal System.Windows.Media.DoubleCollection VisualXSnappingGuidelines { get { throw null; } protected set { } }
        protected internal System.Windows.Media.DoubleCollection VisualYSnappingGuidelines { get { throw null; } protected set { } }
        protected void AddVisualChild(System.Windows.Media.Visual child) { }
        public System.Windows.DependencyObject FindCommonVisualAncestor(System.Windows.DependencyObject otherVisual) { throw null; }
        protected virtual System.Windows.Media.Visual GetVisualChild(int index) { throw null; }
        protected virtual System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { throw null; }
        protected virtual System.Windows.Media.HitTestResult HitTestCore(System.Windows.Media.PointHitTestParameters hitTestParameters) { throw null; }
        public bool IsAncestorOf(System.Windows.DependencyObject descendant) { throw null; }
        public bool IsDescendantOf(System.Windows.DependencyObject ancestor) { throw null; }
        protected virtual void OnDpiChanged(System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi) { }
        protected internal virtual void OnVisualChildrenChanged(System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved) { }
        protected internal virtual void OnVisualParentChanged(System.Windows.DependencyObject oldParent) { }
        public System.Windows.Point PointFromScreen(System.Windows.Point point) { throw null; }
        public System.Windows.Point PointToScreen(System.Windows.Point point) { throw null; }
        protected void RemoveVisualChild(System.Windows.Media.Visual child) { }
        public System.Windows.Media.Media3D.GeneralTransform2DTo3D TransformToAncestor(System.Windows.Media.Media3D.Visual3D ancestor) { throw null; }
        public System.Windows.Media.GeneralTransform TransformToAncestor(System.Windows.Media.Visual ancestor) { throw null; }
        public System.Windows.Media.GeneralTransform TransformToDescendant(System.Windows.Media.Visual descendant) { throw null; }
        public System.Windows.Media.GeneralTransform TransformToVisual(System.Windows.Media.Visual visual) { throw null; }
    }
    public sealed partial class VisualBrush : System.Windows.Media.TileBrush
    {
        public static readonly System.Windows.DependencyProperty AutoLayoutContentProperty;
        public static readonly System.Windows.DependencyProperty VisualProperty;
        public VisualBrush() { }
        public VisualBrush(System.Windows.Media.Visual visual) { }
        public bool AutoLayoutContent { get { throw null; } set { } }
        public System.Windows.Media.Visual Visual { get { throw null; } set { } }
        public new System.Windows.Media.VisualBrush Clone() { throw null; }
        public new System.Windows.Media.VisualBrush CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetContentBounds(out System.Windows.Rect contentBounds) { throw null; }
        protected override void OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    }
    public sealed partial class VisualCollection : System.Collections.ICollection, System.Collections.IEnumerable
    {
        public VisualCollection(System.Windows.Media.Visual parent) { }
        public int Capacity { get { throw null; } set { } }
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Visual this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        public int Add(System.Windows.Media.Visual visual) { throw null; }
        public void Clear() { }
        public bool Contains(System.Windows.Media.Visual visual) { throw null; }
        public void CopyTo(System.Array array, int index) { }
        public void CopyTo(System.Windows.Media.Visual[] array, int index) { }
        public System.Windows.Media.VisualCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Visual visual) { throw null; }
        public void Insert(int index, System.Windows.Media.Visual visual) { }
        public void Remove(System.Windows.Media.Visual visual) { }
        public void RemoveAt(int index) { }
        public void RemoveRange(int index, int count) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        public partial struct Enumerator : System.Collections.IEnumerator
        {
            public System.Windows.Media.Visual Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
        }
    }
    public partial class VisualTarget : System.Windows.Media.CompositionTarget
    {
        public VisualTarget(System.Windows.Media.HostVisual hostVisual) { }
        public override System.Windows.Media.Matrix TransformFromDevice { get { throw null; } }
        public override System.Windows.Media.Matrix TransformToDevice { get { throw null; } }
        public override void Dispose() { }
    }
    public static partial class VisualTreeHelper
    {
        public static System.Windows.Media.Effects.BitmapEffect GetBitmapEffect(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Media.Effects.BitmapEffectInput GetBitmapEffectInput(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Media.CacheMode GetCacheMode(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.DependencyObject GetChild(System.Windows.DependencyObject reference, int childIndex) { throw null; }
        public static int GetChildrenCount(System.Windows.DependencyObject reference) { throw null; }
        public static System.Windows.Media.Geometry GetClip(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Media.Media3D.Rect3D GetContentBounds(System.Windows.Media.Media3D.Visual3D reference) { throw null; }
        public static System.Windows.Rect GetContentBounds(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Media.Media3D.Rect3D GetDescendantBounds(System.Windows.Media.Media3D.Visual3D reference) { throw null; }
        public static System.Windows.Rect GetDescendantBounds(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.DpiScale GetDpi(System.Windows.Media.Visual visual) { throw null; }
        public static System.Windows.Media.DrawingGroup GetDrawing(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Media.EdgeMode GetEdgeMode(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Media.Effects.Effect GetEffect(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Vector GetOffset(System.Windows.Media.Visual reference) { throw null; }
        public static double GetOpacity(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Media.Brush GetOpacityMask(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.DependencyObject GetParent(System.Windows.DependencyObject reference) { throw null; }
        public static System.Windows.Media.Transform GetTransform(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Media.DoubleCollection GetXSnappingGuidelines(System.Windows.Media.Visual reference) { throw null; }
        public static System.Windows.Media.DoubleCollection GetYSnappingGuidelines(System.Windows.Media.Visual reference) { throw null; }
        public static void HitTest(System.Windows.Media.Media3D.Visual3D reference, System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.Media3D.HitTestParameters3D hitTestParameters) { }
        public static void HitTest(System.Windows.Media.Visual reference, System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.HitTestParameters hitTestParameters) { }
        public static System.Windows.Media.HitTestResult HitTest(System.Windows.Media.Visual reference, System.Windows.Point point) { throw null; }
        public static void SetRootDpi(System.Windows.Media.Visual visual, System.Windows.DpiScale dpiInfo) { }
    }
}
namespace System.Windows.Media.Animation
{
    public abstract partial class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable
    {
        protected Animatable() { }
        public bool HasAnimatedProperties { get { throw null; } }
        public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock) { }
        public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
        public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation) { }
        public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
        public new System.Windows.Media.Animation.Animatable Clone() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        public object GetAnimationBaseValue(System.Windows.DependencyProperty dp) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public static bool ShouldSerializeStoredWeakReference(System.Windows.DependencyObject target) { throw null; }
    }
    public partial class AnimationClock : System.Windows.Media.Animation.Clock
    {
        protected internal AnimationClock(System.Windows.Media.Animation.AnimationTimeline animation) : base(default(System.Windows.Media.Animation.Timeline)) { }
        public new System.Windows.Media.Animation.AnimationTimeline Timeline { get { throw null; } }
        public object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue) { throw null; }
    }
    public sealed partial class AnimationException : System.SystemException
    {
        internal AnimationException() { }
        public System.Windows.Media.Animation.AnimationClock Clock { get { throw null; } }
        public System.Windows.DependencyProperty Property { get { throw null; } }
        public System.Windows.Media.Animation.IAnimatable Target { get { throw null; } }
    }
    public abstract partial class AnimationTimeline : System.Windows.Media.Animation.Timeline
    {
        public static readonly System.Windows.DependencyProperty IsAdditiveProperty;
        public static readonly System.Windows.DependencyProperty IsCumulativeProperty;
        protected AnimationTimeline() { }
        public virtual bool IsDestinationDefault { get { throw null; } }
        public abstract System.Type TargetPropertyType { get; }
        protected internal override System.Windows.Media.Animation.Clock AllocateClock() { throw null; }
        public new System.Windows.Media.Animation.AnimationTimeline Clone() { throw null; }
        public new System.Windows.Media.Animation.AnimationClock CreateClock() { throw null; }
        public virtual object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
    }
    public partial class BackEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public static readonly System.Windows.DependencyProperty AmplitudeProperty;
        public BackEase() { }
        public double Amplitude { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public abstract partial class BooleanAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected BooleanAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.BooleanAnimationBase Clone() { throw null; }
        public bool GetCurrentValue(bool defaultOriginValue, bool defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract bool GetCurrentValueCore(bool defaultOriginValue, bool defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class BooleanAnimationUsingKeyFrames : System.Windows.Media.Animation.BooleanAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public BooleanAnimationUsingKeyFrames() { }
        public System.Windows.Media.Animation.BooleanKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override bool GetCurrentValueCore(bool defaultOriginValue, bool defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class BooleanKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected BooleanKeyFrame() { }
        protected BooleanKeyFrame(bool value) { }
        protected BooleanKeyFrame(bool value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public bool Value { get { throw null; } set { } }
        public bool InterpolateValue(bool baseValue, double keyFrameProgress) { throw null; }
        protected abstract bool InterpolateValueCore(bool baseValue, double keyFrameProgress);
    }
    public partial class BooleanKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public BooleanKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.BooleanKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.BooleanKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.BooleanKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.BooleanKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class BounceEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public static readonly System.Windows.DependencyProperty BouncesProperty;
        public static readonly System.Windows.DependencyProperty BouncinessProperty;
        public BounceEase() { }
        public int Bounces { get { throw null; } set { } }
        public double Bounciness { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public partial class ByteAnimation : System.Windows.Media.Animation.ByteAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public ByteAnimation() { }
        public ByteAnimation(byte fromValue, byte toValue, System.Windows.Duration duration) { }
        public ByteAnimation(byte fromValue, byte toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public ByteAnimation(byte toValue, System.Windows.Duration duration) { }
        public ByteAnimation(byte toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public byte? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public byte? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public byte? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.ByteAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override byte GetCurrentValueCore(byte defaultOriginValue, byte defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class ByteAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected ByteAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.ByteAnimationBase Clone() { throw null; }
        public byte GetCurrentValue(byte defaultOriginValue, byte defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract byte GetCurrentValueCore(byte defaultOriginValue, byte defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class ByteAnimationUsingKeyFrames : System.Windows.Media.Animation.ByteAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public ByteAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.ByteKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.ByteAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.ByteAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override byte GetCurrentValueCore(byte defaultOriginValue, byte defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class ByteKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected ByteKeyFrame() { }
        protected ByteKeyFrame(byte value) { }
        protected ByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public byte Value { get { throw null; } set { } }
        public byte InterpolateValue(byte baseValue, double keyFrameProgress) { throw null; }
        protected abstract byte InterpolateValueCore(byte baseValue, double keyFrameProgress);
    }
    public partial class ByteKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public ByteKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.ByteKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.ByteKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.ByteKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.ByteKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.ByteKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.ByteKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.ByteKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.ByteKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.ByteKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public abstract partial class CharAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected CharAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.CharAnimationBase Clone() { throw null; }
        public char GetCurrentValue(char defaultOriginValue, char defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract char GetCurrentValueCore(char defaultOriginValue, char defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class CharAnimationUsingKeyFrames : System.Windows.Media.Animation.CharAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public CharAnimationUsingKeyFrames() { }
        public System.Windows.Media.Animation.CharKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.CharAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.CharAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override char GetCurrentValueCore(char defaultOriginValue, char defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class CharKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected CharKeyFrame() { }
        protected CharKeyFrame(char value) { }
        protected CharKeyFrame(char value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public char Value { get { throw null; } set { } }
        public char InterpolateValue(char baseValue, double keyFrameProgress) { throw null; }
        protected abstract char InterpolateValueCore(char baseValue, double keyFrameProgress);
    }
    public partial class CharKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public CharKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.CharKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.CharKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.CharKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.CharKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.CharKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.CharKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.CharKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.CharKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.CharKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class CircleEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public CircleEase() { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public partial class Clock : System.Windows.Threading.DispatcherObject
    {
        protected internal Clock(System.Windows.Media.Animation.Timeline timeline) { }
        public System.Windows.Media.Animation.ClockController Controller { get { throw null; } }
        public double? CurrentGlobalSpeed { get { throw null; } }
        protected System.TimeSpan CurrentGlobalTime { get { throw null; } }
        public int? CurrentIteration { get { throw null; } }
        public double? CurrentProgress { get { throw null; } }
        public System.Windows.Media.Animation.ClockState CurrentState { get { throw null; } }
        public System.TimeSpan? CurrentTime { get { throw null; } }
        public bool HasControllableRoot { get { throw null; } }
        public bool IsPaused { get { throw null; } }
        public System.Windows.Duration NaturalDuration { get { throw null; } }
        public System.Windows.Media.Animation.Clock Parent { get { throw null; } }
        public System.Windows.Media.Animation.Timeline Timeline { get { throw null; } }
        public event System.EventHandler Completed { add { } remove { } }
        public event System.EventHandler CurrentGlobalSpeedInvalidated { add { } remove { } }
        public event System.EventHandler CurrentStateInvalidated { add { } remove { } }
        public event System.EventHandler CurrentTimeInvalidated { add { } remove { } }
        public event System.EventHandler RemoveRequested { add { } remove { } }
        protected virtual void DiscontinuousTimeMovement() { }
        protected virtual bool GetCanSlip() { throw null; }
        protected virtual System.TimeSpan GetCurrentTimeCore() { throw null; }
        protected virtual void SpeedChanged() { }
        protected virtual void Stopped() { }
    }
    public partial class ClockCollection : System.Collections.Generic.ICollection<System.Windows.Media.Animation.Clock>, System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Clock>, System.Collections.IEnumerable
    {
        internal ClockCollection() { }
        public int Count { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public System.Windows.Media.Animation.Clock this[int index] { get { throw null; } }
        public void Add(System.Windows.Media.Animation.Clock item) { }
        public void Clear() { }
        public bool Contains(System.Windows.Media.Animation.Clock item) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.Clock[] array, int index) { }
        public override bool Equals(object obj) { throw null; }
        public static bool Equals(System.Windows.Media.Animation.ClockCollection objA, System.Windows.Media.Animation.ClockCollection objB) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.Animation.ClockCollection objA, System.Windows.Media.Animation.ClockCollection objB) { throw null; }
        public static bool operator !=(System.Windows.Media.Animation.ClockCollection objA, System.Windows.Media.Animation.ClockCollection objB) { throw null; }
        public bool Remove(System.Windows.Media.Animation.Clock item) { throw null; }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Animation.Clock> System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Clock>.GetEnumerator() { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    }
    public sealed partial class ClockController : System.Windows.Threading.DispatcherObject
    {
        internal ClockController() { }
        public System.Windows.Media.Animation.Clock Clock { get { throw null; } }
        public double SpeedRatio { get { throw null; } set { } }
        public void Begin() { }
        public void Pause() { }
        public void Remove() { }
        public void Resume() { }
        public void Seek(System.TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin) { }
        public void SeekAlignedToLastTick(System.TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin) { }
        public void SkipToFill() { }
        public void Stop() { }
    }
    public partial class ClockGroup : System.Windows.Media.Animation.Clock
    {
        protected internal ClockGroup(System.Windows.Media.Animation.TimelineGroup timelineGroup) : base(default(System.Windows.Media.Animation.Timeline)) { }
        public System.Windows.Media.Animation.ClockCollection Children { get { throw null; } }
        public new System.Windows.Media.Animation.TimelineGroup Timeline { get { throw null; } }
    }
    public enum ClockState
    {
        Active = 0,
        Filling = 1,
        Stopped = 2,
    }
    public partial class ColorAnimation : System.Windows.Media.Animation.ColorAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public ColorAnimation() { }
        public ColorAnimation(System.Windows.Media.Color toValue, System.Windows.Duration duration) { }
        public ColorAnimation(System.Windows.Media.Color toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public ColorAnimation(System.Windows.Media.Color fromValue, System.Windows.Media.Color toValue, System.Windows.Duration duration) { }
        public ColorAnimation(System.Windows.Media.Color fromValue, System.Windows.Media.Color toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public System.Windows.Media.Color? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public System.Windows.Media.Color? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Color? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.ColorAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Color GetCurrentValueCore(System.Windows.Media.Color defaultOriginValue, System.Windows.Media.Color defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class ColorAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected ColorAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.ColorAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Media.Color GetCurrentValue(System.Windows.Media.Color defaultOriginValue, System.Windows.Media.Color defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Media.Color GetCurrentValueCore(System.Windows.Media.Color defaultOriginValue, System.Windows.Media.Color defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class ColorAnimationUsingKeyFrames : System.Windows.Media.Animation.ColorAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public ColorAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.ColorKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.ColorAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.ColorAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Media.Color GetCurrentValueCore(System.Windows.Media.Color defaultOriginValue, System.Windows.Media.Color defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class ColorKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected ColorKeyFrame() { }
        protected ColorKeyFrame(System.Windows.Media.Color value) { }
        protected ColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Media.Color Value { get { throw null; } set { } }
        public System.Windows.Media.Color InterpolateValue(System.Windows.Media.Color baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress);
    }
    public partial class ColorKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public ColorKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.ColorKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.ColorKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.ColorKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.ColorKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.ColorKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.ColorKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.ColorKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.ColorKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.ColorKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class CubicEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public CubicEase() { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public partial class DecimalAnimation : System.Windows.Media.Animation.DecimalAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public DecimalAnimation() { }
        public DecimalAnimation(decimal fromValue, decimal toValue, System.Windows.Duration duration) { }
        public DecimalAnimation(decimal fromValue, decimal toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public DecimalAnimation(decimal toValue, System.Windows.Duration duration) { }
        public DecimalAnimation(decimal toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public decimal? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public decimal? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public decimal? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.DecimalAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override decimal GetCurrentValueCore(decimal defaultOriginValue, decimal defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class DecimalAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected DecimalAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.DecimalAnimationBase Clone() { throw null; }
        public decimal GetCurrentValue(decimal defaultOriginValue, decimal defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract decimal GetCurrentValueCore(decimal defaultOriginValue, decimal defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class DecimalAnimationUsingKeyFrames : System.Windows.Media.Animation.DecimalAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public DecimalAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.DecimalKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override decimal GetCurrentValueCore(decimal defaultOriginValue, decimal defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class DecimalKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected DecimalKeyFrame() { }
        protected DecimalKeyFrame(decimal value) { }
        protected DecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public decimal Value { get { throw null; } set { } }
        public decimal InterpolateValue(decimal baseValue, double keyFrameProgress) { throw null; }
        protected abstract decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress);
    }
    public partial class DecimalKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public DecimalKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.DecimalKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.DecimalKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.DecimalKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.DecimalKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class DiscreteBooleanKeyFrame : System.Windows.Media.Animation.BooleanKeyFrame
    {
        public DiscreteBooleanKeyFrame() { }
        public DiscreteBooleanKeyFrame(bool value) { }
        public DiscreteBooleanKeyFrame(bool value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool InterpolateValueCore(bool baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteByteKeyFrame : System.Windows.Media.Animation.ByteKeyFrame
    {
        public DiscreteByteKeyFrame() { }
        public DiscreteByteKeyFrame(byte value) { }
        public DiscreteByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override byte InterpolateValueCore(byte baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteCharKeyFrame : System.Windows.Media.Animation.CharKeyFrame
    {
        public DiscreteCharKeyFrame() { }
        public DiscreteCharKeyFrame(char value) { }
        public DiscreteCharKeyFrame(char value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override char InterpolateValueCore(char baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteColorKeyFrame : System.Windows.Media.Animation.ColorKeyFrame
    {
        public DiscreteColorKeyFrame() { }
        public DiscreteColorKeyFrame(System.Windows.Media.Color value) { }
        public DiscreteColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteDecimalKeyFrame : System.Windows.Media.Animation.DecimalKeyFrame
    {
        public DiscreteDecimalKeyFrame() { }
        public DiscreteDecimalKeyFrame(decimal value) { }
        public DiscreteDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteDoubleKeyFrame : System.Windows.Media.Animation.DoubleKeyFrame
    {
        public DiscreteDoubleKeyFrame() { }
        public DiscreteDoubleKeyFrame(double value) { }
        public DiscreteDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double InterpolateValueCore(double baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteInt16KeyFrame : System.Windows.Media.Animation.Int16KeyFrame
    {
        public DiscreteInt16KeyFrame() { }
        public DiscreteInt16KeyFrame(short value) { }
        public DiscreteInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override short InterpolateValueCore(short baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteInt32KeyFrame : System.Windows.Media.Animation.Int32KeyFrame
    {
        public DiscreteInt32KeyFrame() { }
        public DiscreteInt32KeyFrame(int value) { }
        public DiscreteInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override int InterpolateValueCore(int baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteInt64KeyFrame : System.Windows.Media.Animation.Int64KeyFrame
    {
        public DiscreteInt64KeyFrame() { }
        public DiscreteInt64KeyFrame(long value) { }
        public DiscreteInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override long InterpolateValueCore(long baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteMatrixKeyFrame : System.Windows.Media.Animation.MatrixKeyFrame
    {
        public DiscreteMatrixKeyFrame() { }
        public DiscreteMatrixKeyFrame(System.Windows.Media.Matrix value) { }
        public DiscreteMatrixKeyFrame(System.Windows.Media.Matrix value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Matrix InterpolateValueCore(System.Windows.Media.Matrix baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteObjectKeyFrame : System.Windows.Media.Animation.ObjectKeyFrame
    {
        public DiscreteObjectKeyFrame() { }
        public DiscreteObjectKeyFrame(object value) { }
        public DiscreteObjectKeyFrame(object value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override object InterpolateValueCore(object baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscretePoint3DKeyFrame : System.Windows.Media.Animation.Point3DKeyFrame
    {
        public DiscretePoint3DKeyFrame() { }
        public DiscretePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
        public DiscretePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscretePointKeyFrame : System.Windows.Media.Animation.PointKeyFrame
    {
        public DiscretePointKeyFrame() { }
        public DiscretePointKeyFrame(System.Windows.Point value) { }
        public DiscretePointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteQuaternionKeyFrame : System.Windows.Media.Animation.QuaternionKeyFrame
    {
        public DiscreteQuaternionKeyFrame() { }
        public DiscreteQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
        public DiscreteQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteRectKeyFrame : System.Windows.Media.Animation.RectKeyFrame
    {
        public DiscreteRectKeyFrame() { }
        public DiscreteRectKeyFrame(System.Windows.Rect value) { }
        public DiscreteRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteRotation3DKeyFrame : System.Windows.Media.Animation.Rotation3DKeyFrame
    {
        public DiscreteRotation3DKeyFrame() { }
        public DiscreteRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
        public DiscreteRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteSingleKeyFrame : System.Windows.Media.Animation.SingleKeyFrame
    {
        public DiscreteSingleKeyFrame() { }
        public DiscreteSingleKeyFrame(float value) { }
        public DiscreteSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override float InterpolateValueCore(float baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteSizeKeyFrame : System.Windows.Media.Animation.SizeKeyFrame
    {
        public DiscreteSizeKeyFrame() { }
        public DiscreteSizeKeyFrame(System.Windows.Size value) { }
        public DiscreteSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteStringKeyFrame : System.Windows.Media.Animation.StringKeyFrame
    {
        public DiscreteStringKeyFrame() { }
        public DiscreteStringKeyFrame(string value) { }
        public DiscreteStringKeyFrame(string value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override string InterpolateValueCore(string baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteVector3DKeyFrame : System.Windows.Media.Animation.Vector3DKeyFrame
    {
        public DiscreteVector3DKeyFrame() { }
        public DiscreteVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
        public DiscreteVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DiscreteVectorKeyFrame : System.Windows.Media.Animation.VectorKeyFrame
    {
        public DiscreteVectorKeyFrame() { }
        public DiscreteVectorKeyFrame(System.Windows.Vector value) { }
        public DiscreteVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class DoubleAnimation : System.Windows.Media.Animation.DoubleAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public DoubleAnimation() { }
        public DoubleAnimation(double fromValue, double toValue, System.Windows.Duration duration) { }
        public DoubleAnimation(double fromValue, double toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public DoubleAnimation(double toValue, System.Windows.Duration duration) { }
        public DoubleAnimation(double toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public double? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public double? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public double? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.DoubleAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double GetCurrentValueCore(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class DoubleAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected DoubleAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.DoubleAnimationBase Clone() { throw null; }
        public double GetCurrentValue(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract double GetCurrentValueCore(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class DoubleAnimationUsingKeyFrames : System.Windows.Media.Animation.DoubleAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public DoubleAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.DoubleKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override double GetCurrentValueCore(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public partial class DoubleAnimationUsingPath : System.Windows.Media.Animation.DoubleAnimationBase
    {
        public static readonly System.Windows.DependencyProperty PathGeometryProperty;
        public static readonly System.Windows.DependencyProperty SourceProperty;
        public DoubleAnimationUsingPath() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.PathGeometry PathGeometry { get { throw null; } set { } }
        public System.Windows.Media.Animation.PathAnimationSource Source { get { throw null; } set { } }
        public new System.Windows.Media.Animation.DoubleAnimationUsingPath Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double GetCurrentValueCore(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected override void OnChanged() { }
    }
    public abstract partial class DoubleKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected DoubleKeyFrame() { }
        protected DoubleKeyFrame(double value) { }
        protected DoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public double Value { get { throw null; } set { } }
        public double InterpolateValue(double baseValue, double keyFrameProgress) { throw null; }
        protected abstract double InterpolateValueCore(double baseValue, double keyFrameProgress);
    }
    public partial class DoubleKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public DoubleKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.DoubleKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.DoubleKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.DoubleKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.DoubleKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class EasingByteKeyFrame : System.Windows.Media.Animation.ByteKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingByteKeyFrame() { }
        public EasingByteKeyFrame(byte value) { }
        public EasingByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override byte InterpolateValueCore(byte baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingColorKeyFrame : System.Windows.Media.Animation.ColorKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingColorKeyFrame() { }
        public EasingColorKeyFrame(System.Windows.Media.Color value) { }
        public EasingColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingDecimalKeyFrame : System.Windows.Media.Animation.DecimalKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingDecimalKeyFrame() { }
        public EasingDecimalKeyFrame(decimal value) { }
        public EasingDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingDoubleKeyFrame : System.Windows.Media.Animation.DoubleKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingDoubleKeyFrame() { }
        public EasingDoubleKeyFrame(double value) { }
        public EasingDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double InterpolateValueCore(double baseValue, double keyFrameProgress) { throw null; }
    }
    public abstract partial class EasingFunctionBase : System.Windows.Freezable, System.Windows.Media.Animation.IEasingFunction
    {
        public static readonly System.Windows.DependencyProperty EasingModeProperty;
        protected EasingFunctionBase() { }
        public System.Windows.Media.Animation.EasingMode EasingMode { get { throw null; } set { } }
        public double Ease(double normalizedTime) { throw null; }
        protected abstract double EaseInCore(double normalizedTime);
    }
    public partial class EasingInt16KeyFrame : System.Windows.Media.Animation.Int16KeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingInt16KeyFrame() { }
        public EasingInt16KeyFrame(short value) { }
        public EasingInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override short InterpolateValueCore(short baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingInt32KeyFrame : System.Windows.Media.Animation.Int32KeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingInt32KeyFrame() { }
        public EasingInt32KeyFrame(int value) { }
        public EasingInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override int InterpolateValueCore(int baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingInt64KeyFrame : System.Windows.Media.Animation.Int64KeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingInt64KeyFrame() { }
        public EasingInt64KeyFrame(long value) { }
        public EasingInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override long InterpolateValueCore(long baseValue, double keyFrameProgress) { throw null; }
    }
    public enum EasingMode
    {
        EaseIn = 0,
        EaseOut = 1,
        EaseInOut = 2,
    }
    public partial class EasingPoint3DKeyFrame : System.Windows.Media.Animation.Point3DKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingPoint3DKeyFrame() { }
        public EasingPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
        public EasingPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingPointKeyFrame : System.Windows.Media.Animation.PointKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingPointKeyFrame() { }
        public EasingPointKeyFrame(System.Windows.Point value) { }
        public EasingPointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingPointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingQuaternionKeyFrame : System.Windows.Media.Animation.QuaternionKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty UseShortestPathProperty;
        public EasingQuaternionKeyFrame() { }
        public EasingQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
        public EasingQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public bool UseShortestPath { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingRectKeyFrame : System.Windows.Media.Animation.RectKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingRectKeyFrame() { }
        public EasingRectKeyFrame(System.Windows.Rect value) { }
        public EasingRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingRotation3DKeyFrame : System.Windows.Media.Animation.Rotation3DKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingRotation3DKeyFrame() { }
        public EasingRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
        public EasingRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingSingleKeyFrame : System.Windows.Media.Animation.SingleKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingSingleKeyFrame() { }
        public EasingSingleKeyFrame(float value) { }
        public EasingSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override float InterpolateValueCore(float baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingSizeKeyFrame : System.Windows.Media.Animation.SizeKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingSizeKeyFrame() { }
        public EasingSizeKeyFrame(System.Windows.Size value) { }
        public EasingSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingVector3DKeyFrame : System.Windows.Media.Animation.Vector3DKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingVector3DKeyFrame() { }
        public EasingVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
        public EasingVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class EasingVectorKeyFrame : System.Windows.Media.Animation.VectorKeyFrame
    {
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public EasingVectorKeyFrame() { }
        public EasingVectorKeyFrame(System.Windows.Vector value) { }
        public EasingVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public EasingVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class ElasticEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public static readonly System.Windows.DependencyProperty OscillationsProperty;
        public static readonly System.Windows.DependencyProperty SpringinessProperty;
        public ElasticEase() { }
        public int Oscillations { get { throw null; } set { } }
        public double Springiness { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public partial class ExponentialEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public static readonly System.Windows.DependencyProperty ExponentProperty;
        public ExponentialEase() { }
        public double Exponent { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public enum FillBehavior
    {
        HoldEnd = 0,
        Stop = 1,
    }
    public enum HandoffBehavior
    {
        SnapshotAndReplace = 0,
        Compose = 1,
    }
    public partial interface IAnimatable
    {
        bool HasAnimatedProperties { get; }
        void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
        void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
        void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
        void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
        object GetAnimationBaseValue(System.Windows.DependencyProperty dp);
    }
    public partial interface IAnimation
    {
        object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    public partial interface IEasingFunction
    {
        double Ease(double normalizedTime);
    }
    public partial interface IKeyFrame
    {
        System.Windows.Media.Animation.KeyTime KeyTime { get; set; }
        object Value { get; set; }
    }
    public partial interface IKeyFrameAnimation
    {
        System.Collections.IList KeyFrames { get; set; }
    }
    public partial class Int16Animation : System.Windows.Media.Animation.Int16AnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public Int16Animation() { }
        public Int16Animation(short fromValue, short toValue, System.Windows.Duration duration) { }
        public Int16Animation(short fromValue, short toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public Int16Animation(short toValue, System.Windows.Duration duration) { }
        public Int16Animation(short toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public short? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public short? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public short? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.Int16Animation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override short GetCurrentValueCore(short defaultOriginValue, short defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class Int16AnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected Int16AnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.Int16AnimationBase Clone() { throw null; }
        public short GetCurrentValue(short defaultOriginValue, short defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract short GetCurrentValueCore(short defaultOriginValue, short defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class Int16AnimationUsingKeyFrames : System.Windows.Media.Animation.Int16AnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public Int16AnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.Int16KeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.Int16AnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.Int16AnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override short GetCurrentValueCore(short defaultOriginValue, short defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class Int16KeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected Int16KeyFrame() { }
        protected Int16KeyFrame(short value) { }
        protected Int16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public short Value { get { throw null; } set { } }
        public short InterpolateValue(short baseValue, double keyFrameProgress) { throw null; }
        protected abstract short InterpolateValueCore(short baseValue, double keyFrameProgress);
    }
    public partial class Int16KeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public Int16KeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.Int16KeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.Int16KeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.Int16KeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.Int16KeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.Int16KeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.Int16KeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.Int16KeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.Int16KeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.Int16KeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class Int32Animation : System.Windows.Media.Animation.Int32AnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public Int32Animation() { }
        public Int32Animation(int fromValue, int toValue, System.Windows.Duration duration) { }
        public Int32Animation(int fromValue, int toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public Int32Animation(int toValue, System.Windows.Duration duration) { }
        public Int32Animation(int toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public int? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public int? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public int? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.Int32Animation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override int GetCurrentValueCore(int defaultOriginValue, int defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class Int32AnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected Int32AnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.Int32AnimationBase Clone() { throw null; }
        public int GetCurrentValue(int defaultOriginValue, int defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract int GetCurrentValueCore(int defaultOriginValue, int defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class Int32AnimationUsingKeyFrames : System.Windows.Media.Animation.Int32AnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public Int32AnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.Int32KeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.Int32AnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.Int32AnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override int GetCurrentValueCore(int defaultOriginValue, int defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class Int32KeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected Int32KeyFrame() { }
        protected Int32KeyFrame(int value) { }
        protected Int32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public int Value { get { throw null; } set { } }
        public int InterpolateValue(int baseValue, double keyFrameProgress) { throw null; }
        protected abstract int InterpolateValueCore(int baseValue, double keyFrameProgress);
    }
    public partial class Int32KeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public Int32KeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.Int32KeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.Int32KeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.Int32KeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.Int32KeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.Int32KeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.Int32KeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.Int32KeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.Int32KeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.Int32KeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class Int64Animation : System.Windows.Media.Animation.Int64AnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public Int64Animation() { }
        public Int64Animation(long fromValue, long toValue, System.Windows.Duration duration) { }
        public Int64Animation(long fromValue, long toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public Int64Animation(long toValue, System.Windows.Duration duration) { }
        public Int64Animation(long toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public long? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public long? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public long? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.Int64Animation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override long GetCurrentValueCore(long defaultOriginValue, long defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class Int64AnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected Int64AnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.Int64AnimationBase Clone() { throw null; }
        public long GetCurrentValue(long defaultOriginValue, long defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract long GetCurrentValueCore(long defaultOriginValue, long defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class Int64AnimationUsingKeyFrames : System.Windows.Media.Animation.Int64AnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public Int64AnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.Int64KeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.Int64AnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.Int64AnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override long GetCurrentValueCore(long defaultOriginValue, long defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class Int64KeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected Int64KeyFrame() { }
        protected Int64KeyFrame(long value) { }
        protected Int64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public long Value { get { throw null; } set { } }
        public long InterpolateValue(long baseValue, double keyFrameProgress) { throw null; }
        protected abstract long InterpolateValueCore(long baseValue, double keyFrameProgress);
    }
    public partial class Int64KeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public Int64KeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.Int64KeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.Int64KeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.Int64KeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.Int64KeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.Int64KeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.Int64KeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.Int64KeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.Int64KeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.Int64KeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.KeySplineConverter))]
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public partial class KeySpline : System.Windows.Freezable, System.IFormattable
    {
        public KeySpline() { }
        public KeySpline(double x1, double y1, double x2, double y2) { }
        public KeySpline(System.Windows.Point controlPoint1, System.Windows.Point controlPoint2) { }
        public System.Windows.Point ControlPoint1 { get { throw null; } set { } }
        public System.Windows.Point ControlPoint2 { get { throw null; } set { } }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public double GetSplineProgress(double linearProgress) { throw null; }
        protected override void OnChanged() { }
        string System.IFormattable.ToString(string format, System.IFormatProvider formatProvider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider formatProvider) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.KeyTimeConverter))]
    public partial struct KeyTime : System.IEquatable<System.Windows.Media.Animation.KeyTime>
    {
        public static System.Windows.Media.Animation.KeyTime Paced { get { throw null; } }
        public double Percent { get { throw null; } }
        public System.TimeSpan TimeSpan { get { throw null; } }
        public System.Windows.Media.Animation.KeyTimeType Type { get { throw null; } }
        public static System.Windows.Media.Animation.KeyTime Uniform { get { throw null; } }
        public override bool Equals(object value) { throw null; }
        public bool Equals(System.Windows.Media.Animation.KeyTime value) { throw null; }
        public static bool Equals(System.Windows.Media.Animation.KeyTime keyTime1, System.Windows.Media.Animation.KeyTime keyTime2) { throw null; }
        public static System.Windows.Media.Animation.KeyTime FromPercent(double percent) { throw null; }
        public static System.Windows.Media.Animation.KeyTime FromTimeSpan(System.TimeSpan timeSpan) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.Animation.KeyTime keyTime1, System.Windows.Media.Animation.KeyTime keyTime2) { throw null; }
        public static implicit operator System.Windows.Media.Animation.KeyTime(System.TimeSpan timeSpan) { throw null; }
        public static bool operator !=(System.Windows.Media.Animation.KeyTime keyTime1, System.Windows.Media.Animation.KeyTime keyTime2) { throw null; }
        public override string ToString() { throw null; }
    }
    public enum KeyTimeType : byte
    {
        Uniform = (byte)0,
        Percent = (byte)1,
        TimeSpan = (byte)2,
        Paced = (byte)3,
    }
    public partial class LinearByteKeyFrame : System.Windows.Media.Animation.ByteKeyFrame
    {
        public LinearByteKeyFrame() { }
        public LinearByteKeyFrame(byte value) { }
        public LinearByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override byte InterpolateValueCore(byte baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearColorKeyFrame : System.Windows.Media.Animation.ColorKeyFrame
    {
        public LinearColorKeyFrame() { }
        public LinearColorKeyFrame(System.Windows.Media.Color value) { }
        public LinearColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearDecimalKeyFrame : System.Windows.Media.Animation.DecimalKeyFrame
    {
        public LinearDecimalKeyFrame() { }
        public LinearDecimalKeyFrame(decimal value) { }
        public LinearDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearDoubleKeyFrame : System.Windows.Media.Animation.DoubleKeyFrame
    {
        public LinearDoubleKeyFrame() { }
        public LinearDoubleKeyFrame(double value) { }
        public LinearDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double InterpolateValueCore(double baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearInt16KeyFrame : System.Windows.Media.Animation.Int16KeyFrame
    {
        public LinearInt16KeyFrame() { }
        public LinearInt16KeyFrame(short value) { }
        public LinearInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override short InterpolateValueCore(short baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearInt32KeyFrame : System.Windows.Media.Animation.Int32KeyFrame
    {
        public LinearInt32KeyFrame() { }
        public LinearInt32KeyFrame(int value) { }
        public LinearInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override int InterpolateValueCore(int baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearInt64KeyFrame : System.Windows.Media.Animation.Int64KeyFrame
    {
        public LinearInt64KeyFrame() { }
        public LinearInt64KeyFrame(long value) { }
        public LinearInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override long InterpolateValueCore(long baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearPoint3DKeyFrame : System.Windows.Media.Animation.Point3DKeyFrame
    {
        public LinearPoint3DKeyFrame() { }
        public LinearPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
        public LinearPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearPointKeyFrame : System.Windows.Media.Animation.PointKeyFrame
    {
        public LinearPointKeyFrame() { }
        public LinearPointKeyFrame(System.Windows.Point value) { }
        public LinearPointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearQuaternionKeyFrame : System.Windows.Media.Animation.QuaternionKeyFrame
    {
        public static readonly System.Windows.DependencyProperty UseShortestPathProperty;
        public LinearQuaternionKeyFrame() { }
        public LinearQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
        public LinearQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public bool UseShortestPath { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearRectKeyFrame : System.Windows.Media.Animation.RectKeyFrame
    {
        public LinearRectKeyFrame() { }
        public LinearRectKeyFrame(System.Windows.Rect value) { }
        public LinearRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearRotation3DKeyFrame : System.Windows.Media.Animation.Rotation3DKeyFrame
    {
        public LinearRotation3DKeyFrame() { }
        public LinearRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
        public LinearRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearSingleKeyFrame : System.Windows.Media.Animation.SingleKeyFrame
    {
        public LinearSingleKeyFrame() { }
        public LinearSingleKeyFrame(float value) { }
        public LinearSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override float InterpolateValueCore(float baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearSizeKeyFrame : System.Windows.Media.Animation.SizeKeyFrame
    {
        public LinearSizeKeyFrame() { }
        public LinearSizeKeyFrame(System.Windows.Size value) { }
        public LinearSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearVector3DKeyFrame : System.Windows.Media.Animation.Vector3DKeyFrame
    {
        public LinearVector3DKeyFrame() { }
        public LinearVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
        public LinearVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class LinearVectorKeyFrame : System.Windows.Media.Animation.VectorKeyFrame
    {
        public LinearVectorKeyFrame() { }
        public LinearVectorKeyFrame(System.Windows.Vector value) { }
        public LinearVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress) { throw null; }
    }
    public abstract partial class MatrixAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected MatrixAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.MatrixAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Media.Matrix GetCurrentValue(System.Windows.Media.Matrix defaultOriginValue, System.Windows.Media.Matrix defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Media.Matrix GetCurrentValueCore(System.Windows.Media.Matrix defaultOriginValue, System.Windows.Media.Matrix defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class MatrixAnimationUsingKeyFrames : System.Windows.Media.Animation.MatrixAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public MatrixAnimationUsingKeyFrames() { }
        public System.Windows.Media.Animation.MatrixKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Media.Matrix GetCurrentValueCore(System.Windows.Media.Matrix defaultOriginValue, System.Windows.Media.Matrix defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public partial class MatrixAnimationUsingPath : System.Windows.Media.Animation.MatrixAnimationBase
    {
        public static readonly System.Windows.DependencyProperty DoesRotateWithTangentProperty;
        public static readonly System.Windows.DependencyProperty IsAngleCumulativeProperty;
        public static readonly System.Windows.DependencyProperty IsOffsetCumulativeProperty;
        public static readonly System.Windows.DependencyProperty PathGeometryProperty;
        public MatrixAnimationUsingPath() { }
        public bool DoesRotateWithTangent { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsAngleCumulative { get { throw null; } set { } }
        public bool IsOffsetCumulative { get { throw null; } set { } }
        public System.Windows.Media.PathGeometry PathGeometry { get { throw null; } set { } }
        public new System.Windows.Media.Animation.MatrixAnimationUsingPath Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Matrix GetCurrentValueCore(System.Windows.Media.Matrix defaultOriginValue, System.Windows.Media.Matrix defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected override void OnChanged() { }
    }
    public abstract partial class MatrixKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected MatrixKeyFrame() { }
        protected MatrixKeyFrame(System.Windows.Media.Matrix value) { }
        protected MatrixKeyFrame(System.Windows.Media.Matrix value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Media.Matrix Value { get { throw null; } set { } }
        public System.Windows.Media.Matrix InterpolateValue(System.Windows.Media.Matrix baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Media.Matrix InterpolateValueCore(System.Windows.Media.Matrix baseValue, double keyFrameProgress);
    }
    public partial class MatrixKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public MatrixKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.MatrixKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.MatrixKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.MatrixKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.MatrixKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public abstract partial class ObjectAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected ObjectAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.ObjectAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract object GetCurrentValueCore(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class ObjectAnimationUsingKeyFrames : System.Windows.Media.Animation.ObjectAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public ObjectAnimationUsingKeyFrames() { }
        public System.Windows.Media.Animation.ObjectKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override object GetCurrentValueCore(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class ObjectKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected ObjectKeyFrame() { }
        protected ObjectKeyFrame(object value) { }
        protected ObjectKeyFrame(object value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public object Value { get { throw null; } set { } }
        public object InterpolateValue(object baseValue, double keyFrameProgress) { throw null; }
        protected abstract object InterpolateValueCore(object baseValue, double keyFrameProgress);
    }
    public partial class ObjectKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public ObjectKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.ObjectKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.ObjectKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.ObjectKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.ObjectKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class ParallelTimeline : System.Windows.Media.Animation.TimelineGroup
    {
        public static readonly System.Windows.DependencyProperty SlipBehaviorProperty;
        public ParallelTimeline() { }
        public ParallelTimeline(System.TimeSpan? beginTime) { }
        public ParallelTimeline(System.TimeSpan? beginTime, System.Windows.Duration duration) { }
        public ParallelTimeline(System.TimeSpan? beginTime, System.Windows.Duration duration, System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { }
        [System.ComponentModel.DefaultValueAttribute(System.Windows.Media.Animation.SlipBehavior.Grow)]
        public System.Windows.Media.Animation.SlipBehavior SlipBehavior { get { throw null; } set { } }
        public new System.Windows.Media.Animation.ParallelTimeline Clone() { throw null; }
        public new System.Windows.Media.Animation.ParallelTimeline CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
    }
    public enum PathAnimationSource : byte
    {
        X = (byte)0,
        Y = (byte)1,
        Angle = (byte)2,
    }
    public partial class Point3DAnimation : System.Windows.Media.Animation.Point3DAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public Point3DAnimation() { }
        public Point3DAnimation(System.Windows.Media.Media3D.Point3D toValue, System.Windows.Duration duration) { }
        public Point3DAnimation(System.Windows.Media.Media3D.Point3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public Point3DAnimation(System.Windows.Media.Media3D.Point3D fromValue, System.Windows.Media.Media3D.Point3D toValue, System.Windows.Duration duration) { }
        public Point3DAnimation(System.Windows.Media.Media3D.Point3D fromValue, System.Windows.Media.Media3D.Point3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public System.Windows.Media.Media3D.Point3D? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Point3D? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Point3D? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.Point3DAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Point3D GetCurrentValueCore(System.Windows.Media.Media3D.Point3D defaultOriginValue, System.Windows.Media.Media3D.Point3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class Point3DAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected Point3DAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.Point3DAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Media.Media3D.Point3D GetCurrentValue(System.Windows.Media.Media3D.Point3D defaultOriginValue, System.Windows.Media.Media3D.Point3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Media.Media3D.Point3D GetCurrentValueCore(System.Windows.Media.Media3D.Point3D defaultOriginValue, System.Windows.Media.Media3D.Point3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class Point3DAnimationUsingKeyFrames : System.Windows.Media.Animation.Point3DAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public Point3DAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.Point3DKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Media.Media3D.Point3D GetCurrentValueCore(System.Windows.Media.Media3D.Point3D defaultOriginValue, System.Windows.Media.Media3D.Point3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class Point3DKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected Point3DKeyFrame() { }
        protected Point3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
        protected Point3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Point3D Value { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Point3D InterpolateValue(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress);
    }
    public partial class Point3DKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public Point3DKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.Point3DKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.Point3DKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.Point3DKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.Point3DKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class PointAnimation : System.Windows.Media.Animation.PointAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public PointAnimation() { }
        public PointAnimation(System.Windows.Point toValue, System.Windows.Duration duration) { }
        public PointAnimation(System.Windows.Point toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public PointAnimation(System.Windows.Point fromValue, System.Windows.Point toValue, System.Windows.Duration duration) { }
        public PointAnimation(System.Windows.Point fromValue, System.Windows.Point toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public System.Windows.Point? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public System.Windows.Point? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Point? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.PointAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Point GetCurrentValueCore(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class PointAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected PointAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.PointAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Point GetCurrentValue(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Point GetCurrentValueCore(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class PointAnimationUsingKeyFrames : System.Windows.Media.Animation.PointAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public PointAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.PointKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.PointAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.PointAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Point GetCurrentValueCore(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public partial class PointAnimationUsingPath : System.Windows.Media.Animation.PointAnimationBase
    {
        public static readonly System.Windows.DependencyProperty PathGeometryProperty;
        public PointAnimationUsingPath() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.PathGeometry PathGeometry { get { throw null; } set { } }
        public new System.Windows.Media.Animation.PointAnimationUsingPath Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Point GetCurrentValueCore(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected override void OnChanged() { }
    }
    public abstract partial class PointKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected PointKeyFrame() { }
        protected PointKeyFrame(System.Windows.Point value) { }
        protected PointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Point Value { get { throw null; } set { } }
        public System.Windows.Point InterpolateValue(System.Windows.Point baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress);
    }
    public partial class PointKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public PointKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.PointKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.PointKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.PointKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.PointKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.PointKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.PointKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.PointKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.PointKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.PointKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class PowerEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public static readonly System.Windows.DependencyProperty PowerProperty;
        public PowerEase() { }
        public double Power { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public partial class QuadraticEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public QuadraticEase() { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public partial class QuarticEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public QuarticEase() { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public partial class QuaternionAnimation : System.Windows.Media.Animation.QuaternionAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public static readonly System.Windows.DependencyProperty UseShortestPathProperty;
        public QuaternionAnimation() { }
        public QuaternionAnimation(System.Windows.Media.Media3D.Quaternion toValue, System.Windows.Duration duration) { }
        public QuaternionAnimation(System.Windows.Media.Media3D.Quaternion toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public QuaternionAnimation(System.Windows.Media.Media3D.Quaternion fromValue, System.Windows.Media.Media3D.Quaternion toValue, System.Windows.Duration duration) { }
        public QuaternionAnimation(System.Windows.Media.Media3D.Quaternion fromValue, System.Windows.Media.Media3D.Quaternion toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public System.Windows.Media.Media3D.Quaternion? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Quaternion? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Quaternion? To { get { throw null; } set { } }
        public bool UseShortestPath { get { throw null; } set { } }
        public new System.Windows.Media.Animation.QuaternionAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Quaternion GetCurrentValueCore(System.Windows.Media.Media3D.Quaternion defaultOriginValue, System.Windows.Media.Media3D.Quaternion defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class QuaternionAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected QuaternionAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.QuaternionAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Media.Media3D.Quaternion GetCurrentValue(System.Windows.Media.Media3D.Quaternion defaultOriginValue, System.Windows.Media.Media3D.Quaternion defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Media.Media3D.Quaternion GetCurrentValueCore(System.Windows.Media.Media3D.Quaternion defaultOriginValue, System.Windows.Media.Media3D.Quaternion defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class QuaternionAnimationUsingKeyFrames : System.Windows.Media.Animation.QuaternionAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public QuaternionAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.QuaternionKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Media.Media3D.Quaternion GetCurrentValueCore(System.Windows.Media.Media3D.Quaternion defaultOriginValue, System.Windows.Media.Media3D.Quaternion defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class QuaternionKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected QuaternionKeyFrame() { }
        protected QuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
        protected QuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Quaternion Value { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Quaternion InterpolateValue(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress);
    }
    public partial class QuaternionKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public QuaternionKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.QuaternionKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.QuaternionKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.QuaternionKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.QuaternionKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class QuinticEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public QuinticEase() { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public partial class RectAnimation : System.Windows.Media.Animation.RectAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public RectAnimation() { }
        public RectAnimation(System.Windows.Rect toValue, System.Windows.Duration duration) { }
        public RectAnimation(System.Windows.Rect toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public RectAnimation(System.Windows.Rect fromValue, System.Windows.Rect toValue, System.Windows.Duration duration) { }
        public RectAnimation(System.Windows.Rect fromValue, System.Windows.Rect toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public System.Windows.Rect? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public System.Windows.Rect? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Rect? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.RectAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Rect GetCurrentValueCore(System.Windows.Rect defaultOriginValue, System.Windows.Rect defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class RectAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected RectAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.RectAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Rect GetCurrentValue(System.Windows.Rect defaultOriginValue, System.Windows.Rect defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Rect GetCurrentValueCore(System.Windows.Rect defaultOriginValue, System.Windows.Rect defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class RectAnimationUsingKeyFrames : System.Windows.Media.Animation.RectAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public RectAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.RectKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.RectAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.RectAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Rect GetCurrentValueCore(System.Windows.Rect defaultOriginValue, System.Windows.Rect defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class RectKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected RectKeyFrame() { }
        protected RectKeyFrame(System.Windows.Rect value) { }
        protected RectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Rect Value { get { throw null; } set { } }
        public System.Windows.Rect InterpolateValue(System.Windows.Rect baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress);
    }
    public partial class RectKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public RectKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.RectKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.RectKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.RectKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.RectKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.RectKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.RectKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.RectKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.RectKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.RectKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Animation.RepeatBehaviorConverter))]
    public partial struct RepeatBehavior : System.IFormattable
    {
        public RepeatBehavior(double count) { throw null; }
        public RepeatBehavior(System.TimeSpan duration) { throw null; }
        public double Count { get { throw null; } }
        public System.TimeSpan Duration { get { throw null; } }
        public static System.Windows.Media.Animation.RepeatBehavior Forever { get { throw null; } }
        public bool HasCount { get { throw null; } }
        public bool HasDuration { get { throw null; } }
        public override bool Equals(object value) { throw null; }
        public bool Equals(System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { throw null; }
        public static bool Equals(System.Windows.Media.Animation.RepeatBehavior repeatBehavior1, System.Windows.Media.Animation.RepeatBehavior repeatBehavior2) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.Animation.RepeatBehavior repeatBehavior1, System.Windows.Media.Animation.RepeatBehavior repeatBehavior2) { throw null; }
        public static bool operator !=(System.Windows.Media.Animation.RepeatBehavior repeatBehavior1, System.Windows.Media.Animation.RepeatBehavior repeatBehavior2) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider formatProvider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider formatProvider) { throw null; }
    }
    public sealed partial class RepeatBehaviorConverter : System.ComponentModel.TypeConverter
    {
        public RepeatBehaviorConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo cultureInfo, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { throw null; }
    }
    public partial class Rotation3DAnimation : System.Windows.Media.Animation.Rotation3DAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public Rotation3DAnimation() { }
        public Rotation3DAnimation(System.Windows.Media.Media3D.Rotation3D toValue, System.Windows.Duration duration) { }
        public Rotation3DAnimation(System.Windows.Media.Media3D.Rotation3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public Rotation3DAnimation(System.Windows.Media.Media3D.Rotation3D fromValue, System.Windows.Media.Media3D.Rotation3D toValue, System.Windows.Duration duration) { }
        public Rotation3DAnimation(System.Windows.Media.Media3D.Rotation3D fromValue, System.Windows.Media.Media3D.Rotation3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public System.Windows.Media.Media3D.Rotation3D By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Rotation3D From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Rotation3D To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.Rotation3DAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Rotation3D GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D defaultOriginValue, System.Windows.Media.Media3D.Rotation3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class Rotation3DAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected Rotation3DAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.Rotation3DAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Media.Media3D.Rotation3D GetCurrentValue(System.Windows.Media.Media3D.Rotation3D defaultOriginValue, System.Windows.Media.Media3D.Rotation3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Media.Media3D.Rotation3D GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D defaultOriginValue, System.Windows.Media.Media3D.Rotation3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class Rotation3DAnimationUsingKeyFrames : System.Windows.Media.Animation.Rotation3DAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public Rotation3DAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.Rotation3DKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Media.Media3D.Rotation3D GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D defaultOriginValue, System.Windows.Media.Media3D.Rotation3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class Rotation3DKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected Rotation3DKeyFrame() { }
        protected Rotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
        protected Rotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Rotation3D Value { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Rotation3D InterpolateValue(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress);
    }
    public partial class Rotation3DKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public Rotation3DKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.Rotation3DKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.Rotation3DKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.Rotation3DKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.Rotation3DKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class SineEase : System.Windows.Media.Animation.EasingFunctionBase
    {
        public SineEase() { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double EaseInCore(double normalizedTime) { throw null; }
    }
    public partial class SingleAnimation : System.Windows.Media.Animation.SingleAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public SingleAnimation() { }
        public SingleAnimation(float fromValue, float toValue, System.Windows.Duration duration) { }
        public SingleAnimation(float fromValue, float toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public SingleAnimation(float toValue, System.Windows.Duration duration) { }
        public SingleAnimation(float toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public float? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public float? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public float? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.SingleAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override float GetCurrentValueCore(float defaultOriginValue, float defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class SingleAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected SingleAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.SingleAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public float GetCurrentValue(float defaultOriginValue, float defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract float GetCurrentValueCore(float defaultOriginValue, float defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class SingleAnimationUsingKeyFrames : System.Windows.Media.Animation.SingleAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public SingleAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.SingleKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.SingleAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.SingleAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override float GetCurrentValueCore(float defaultOriginValue, float defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class SingleKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected SingleKeyFrame() { }
        protected SingleKeyFrame(float value) { }
        protected SingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public float Value { get { throw null; } set { } }
        public float InterpolateValue(float baseValue, double keyFrameProgress) { throw null; }
        protected abstract float InterpolateValueCore(float baseValue, double keyFrameProgress);
    }
    public partial class SingleKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public SingleKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.SingleKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.SingleKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.SingleKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.SingleKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.SingleKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.SingleKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.SingleKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.SingleKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.SingleKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class SizeAnimation : System.Windows.Media.Animation.SizeAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public SizeAnimation() { }
        public SizeAnimation(System.Windows.Size toValue, System.Windows.Duration duration) { }
        public SizeAnimation(System.Windows.Size toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public SizeAnimation(System.Windows.Size fromValue, System.Windows.Size toValue, System.Windows.Duration duration) { }
        public SizeAnimation(System.Windows.Size fromValue, System.Windows.Size toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public System.Windows.Size? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public System.Windows.Size? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Size? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.SizeAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Size GetCurrentValueCore(System.Windows.Size defaultOriginValue, System.Windows.Size defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class SizeAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected SizeAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.SizeAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Size GetCurrentValue(System.Windows.Size defaultOriginValue, System.Windows.Size defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Size GetCurrentValueCore(System.Windows.Size defaultOriginValue, System.Windows.Size defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class SizeAnimationUsingKeyFrames : System.Windows.Media.Animation.SizeAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public SizeAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.SizeKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.SizeAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.SizeAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Size GetCurrentValueCore(System.Windows.Size defaultOriginValue, System.Windows.Size defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class SizeKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected SizeKeyFrame() { }
        protected SizeKeyFrame(System.Windows.Size value) { }
        protected SizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Size Value { get { throw null; } set { } }
        public System.Windows.Size InterpolateValue(System.Windows.Size baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress);
    }
    public partial class SizeKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public SizeKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.SizeKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.SizeKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.SizeKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.SizeKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.SizeKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.SizeKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.SizeKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.SizeKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.SizeKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public enum SlipBehavior
    {
        Grow = 0,
        Slip = 1,
    }
    public partial class SplineByteKeyFrame : System.Windows.Media.Animation.ByteKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineByteKeyFrame() { }
        public SplineByteKeyFrame(byte value) { }
        public SplineByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override byte InterpolateValueCore(byte baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineColorKeyFrame : System.Windows.Media.Animation.ColorKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineColorKeyFrame() { }
        public SplineColorKeyFrame(System.Windows.Media.Color value) { }
        public SplineColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineDecimalKeyFrame : System.Windows.Media.Animation.DecimalKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineDecimalKeyFrame() { }
        public SplineDecimalKeyFrame(decimal value) { }
        public SplineDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineDoubleKeyFrame : System.Windows.Media.Animation.DoubleKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineDoubleKeyFrame() { }
        public SplineDoubleKeyFrame(double value) { }
        public SplineDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override double InterpolateValueCore(double baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineInt16KeyFrame : System.Windows.Media.Animation.Int16KeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineInt16KeyFrame() { }
        public SplineInt16KeyFrame(short value) { }
        public SplineInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override short InterpolateValueCore(short baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineInt32KeyFrame : System.Windows.Media.Animation.Int32KeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineInt32KeyFrame() { }
        public SplineInt32KeyFrame(int value) { }
        public SplineInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override int InterpolateValueCore(int baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineInt64KeyFrame : System.Windows.Media.Animation.Int64KeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineInt64KeyFrame() { }
        public SplineInt64KeyFrame(long value) { }
        public SplineInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override long InterpolateValueCore(long baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplinePoint3DKeyFrame : System.Windows.Media.Animation.Point3DKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplinePoint3DKeyFrame() { }
        public SplinePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
        public SplinePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplinePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplinePointKeyFrame : System.Windows.Media.Animation.PointKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplinePointKeyFrame() { }
        public SplinePointKeyFrame(System.Windows.Point value) { }
        public SplinePointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplinePointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineQuaternionKeyFrame : System.Windows.Media.Animation.QuaternionKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public static readonly System.Windows.DependencyProperty UseShortestPathProperty;
        public SplineQuaternionKeyFrame() { }
        public SplineQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
        public SplineQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        public bool UseShortestPath { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineRectKeyFrame : System.Windows.Media.Animation.RectKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineRectKeyFrame() { }
        public SplineRectKeyFrame(System.Windows.Rect value) { }
        public SplineRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineRotation3DKeyFrame : System.Windows.Media.Animation.Rotation3DKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineRotation3DKeyFrame() { }
        public SplineRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
        public SplineRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineSingleKeyFrame : System.Windows.Media.Animation.SingleKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineSingleKeyFrame() { }
        public SplineSingleKeyFrame(float value) { }
        public SplineSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override float InterpolateValueCore(float baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineSizeKeyFrame : System.Windows.Media.Animation.SizeKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineSizeKeyFrame() { }
        public SplineSizeKeyFrame(System.Windows.Size value) { }
        public SplineSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineVector3DKeyFrame : System.Windows.Media.Animation.Vector3DKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineVector3DKeyFrame() { }
        public SplineVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
        public SplineVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { throw null; }
    }
    public partial class SplineVectorKeyFrame : System.Windows.Media.Animation.VectorKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeySplineProperty;
        public SplineVectorKeyFrame() { }
        public SplineVectorKeyFrame(System.Windows.Vector value) { }
        public SplineVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public SplineVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
        public System.Windows.Media.Animation.KeySpline KeySpline { get { throw null; } set { } }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress) { throw null; }
    }
    public abstract partial class StringAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected StringAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.StringAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public string GetCurrentValue(string defaultOriginValue, string defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract string GetCurrentValueCore(string defaultOriginValue, string defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class StringAnimationUsingKeyFrames : System.Windows.Media.Animation.StringAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public StringAnimationUsingKeyFrames() { }
        public System.Windows.Media.Animation.StringKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.StringAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.StringAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override string GetCurrentValueCore(string defaultOriginValue, string defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class StringKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected StringKeyFrame() { }
        protected StringKeyFrame(string value) { }
        protected StringKeyFrame(string value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public string Value { get { throw null; } set { } }
        public string InterpolateValue(string baseValue, double keyFrameProgress) { throw null; }
        protected abstract string InterpolateValueCore(string baseValue, double keyFrameProgress);
    }
    public partial class StringKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public StringKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.StringKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.StringKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.StringKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.StringKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.StringKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.StringKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.StringKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.StringKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.StringKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    [System.Windows.Markup.RuntimeNamePropertyAttribute("Name")]
    public abstract partial class Timeline : System.Windows.Media.Animation.Animatable
    {
        public static readonly System.Windows.DependencyProperty AccelerationRatioProperty;
        public static readonly System.Windows.DependencyProperty AutoReverseProperty;
        public static readonly System.Windows.DependencyProperty BeginTimeProperty;
        public static readonly System.Windows.DependencyProperty DecelerationRatioProperty;
        public static readonly System.Windows.DependencyProperty DesiredFrameRateProperty;
        public static readonly System.Windows.DependencyProperty DurationProperty;
        public static readonly System.Windows.DependencyProperty FillBehaviorProperty;
        public static readonly System.Windows.DependencyProperty NameProperty;
        public static readonly System.Windows.DependencyProperty RepeatBehaviorProperty;
        public static readonly System.Windows.DependencyProperty SpeedRatioProperty;
        protected Timeline() { }
        protected Timeline(System.TimeSpan? beginTime) { }
        protected Timeline(System.TimeSpan? beginTime, System.Windows.Duration duration) { }
        protected Timeline(System.TimeSpan? beginTime, System.Windows.Duration duration, System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { }
        public double AccelerationRatio { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool AutoReverse { get { throw null; } set { } }
        public System.TimeSpan? BeginTime { get { throw null; } set { } }
        public double DecelerationRatio { get { throw null; } set { } }
        public System.Windows.Duration Duration { get { throw null; } set { } }
        public System.Windows.Media.Animation.FillBehavior FillBehavior { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(null)]
        [System.ComponentModel.MergablePropertyAttribute(false)]
        public string Name { get { throw null; } set { } }
        public System.Windows.Media.Animation.RepeatBehavior RepeatBehavior { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(1)]
        public double SpeedRatio { get { throw null; } set { } }
        public event System.EventHandler Completed { add { } remove { } }
        public event System.EventHandler CurrentGlobalSpeedInvalidated { add { } remove { } }
        public event System.EventHandler CurrentStateInvalidated { add { } remove { } }
        public event System.EventHandler CurrentTimeInvalidated { add { } remove { } }
        public event System.EventHandler RemoveRequested { add { } remove { } }
        protected internal virtual System.Windows.Media.Animation.Clock AllocateClock() { throw null; }
        public new System.Windows.Media.Animation.Timeline Clone() { throw null; }
        public new System.Windows.Media.Animation.Timeline CloneCurrentValue() { throw null; }
        public System.Windows.Media.Animation.Clock CreateClock() { throw null; }
        public System.Windows.Media.Animation.Clock CreateClock(bool hasControllableRoot) { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public static int? GetDesiredFrameRate(System.Windows.Media.Animation.Timeline timeline) { throw null; }
        protected internal System.Windows.Duration GetNaturalDuration(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected virtual System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        public static void SetDesiredFrameRate(System.Windows.Media.Animation.Timeline timeline, int? desiredFrameRate) { }
    }
    public sealed partial class TimelineCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Animation.Timeline>, System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Timeline>, System.Collections.Generic.IList<System.Windows.Media.Animation.Timeline>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public TimelineCollection() { }
        public TimelineCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Timeline> collection) { }
        public TimelineCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Animation.Timeline this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Animation.Timeline>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Animation.Timeline value) { }
        public void Clear() { }
        public new System.Windows.Media.Animation.TimelineCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Animation.TimelineCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Animation.Timeline value) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.Timeline[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.Animation.TimelineCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.Timeline value) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.Timeline value) { }
        public bool Remove(System.Windows.Media.Animation.Timeline value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Animation.Timeline> System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Timeline>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Animation.Timeline>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Animation.Timeline Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public abstract partial class TimelineGroup : System.Windows.Media.Animation.Timeline, System.Windows.Markup.IAddChild
    {
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        protected TimelineGroup() { }
        protected TimelineGroup(System.TimeSpan? beginTime) { }
        protected TimelineGroup(System.TimeSpan? beginTime, System.Windows.Duration duration) { }
        protected TimelineGroup(System.TimeSpan? beginTime, System.Windows.Duration duration, System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { }
        public System.Windows.Media.Animation.TimelineCollection Children { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        protected internal override System.Windows.Media.Animation.Clock AllocateClock() { throw null; }
        public new System.Windows.Media.Animation.TimelineGroup Clone() { throw null; }
        public new System.Windows.Media.Animation.TimelineGroup CloneCurrentValue() { throw null; }
        public new System.Windows.Media.Animation.ClockGroup CreateClock() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public enum TimeSeekOrigin
    {
        BeginTime = 0,
        Duration = 1,
    }
    public partial class Vector3DAnimation : System.Windows.Media.Animation.Vector3DAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public Vector3DAnimation() { }
        public Vector3DAnimation(System.Windows.Media.Media3D.Vector3D toValue, System.Windows.Duration duration) { }
        public Vector3DAnimation(System.Windows.Media.Media3D.Vector3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public Vector3DAnimation(System.Windows.Media.Media3D.Vector3D fromValue, System.Windows.Media.Media3D.Vector3D toValue, System.Windows.Duration duration) { }
        public Vector3DAnimation(System.Windows.Media.Media3D.Vector3D fromValue, System.Windows.Media.Media3D.Vector3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public System.Windows.Media.Media3D.Vector3D? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Vector3D? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Vector3D? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.Vector3DAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Media.Media3D.Vector3D GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D defaultOriginValue, System.Windows.Media.Media3D.Vector3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class Vector3DAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected Vector3DAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.Vector3DAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Media.Media3D.Vector3D GetCurrentValue(System.Windows.Media.Media3D.Vector3D defaultOriginValue, System.Windows.Media.Media3D.Vector3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Media.Media3D.Vector3D GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D defaultOriginValue, System.Windows.Media.Media3D.Vector3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class Vector3DAnimationUsingKeyFrames : System.Windows.Media.Animation.Vector3DAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public Vector3DAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.Vector3DKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Media.Media3D.Vector3D GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D defaultOriginValue, System.Windows.Media.Media3D.Vector3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class Vector3DKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected Vector3DKeyFrame() { }
        protected Vector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
        protected Vector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Vector3D Value { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Vector3D InterpolateValue(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress);
    }
    public partial class Vector3DKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public Vector3DKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.Vector3DKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.Vector3DKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.Vector3DKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.Vector3DKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
    public partial class VectorAnimation : System.Windows.Media.Animation.VectorAnimationBase
    {
        public static readonly System.Windows.DependencyProperty ByProperty;
        public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
        public static readonly System.Windows.DependencyProperty FromProperty;
        public static readonly System.Windows.DependencyProperty ToProperty;
        public VectorAnimation() { }
        public VectorAnimation(System.Windows.Vector toValue, System.Windows.Duration duration) { }
        public VectorAnimation(System.Windows.Vector toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public VectorAnimation(System.Windows.Vector fromValue, System.Windows.Vector toValue, System.Windows.Duration duration) { }
        public VectorAnimation(System.Windows.Vector fromValue, System.Windows.Vector toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
        public System.Windows.Vector? By { get { throw null; } set { } }
        public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { throw null; } set { } }
        public System.Windows.Vector? From { get { throw null; } set { } }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Vector? To { get { throw null; } set { } }
        public new System.Windows.Media.Animation.VectorAnimation Clone() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override System.Windows.Vector GetCurrentValueCore(System.Windows.Vector defaultOriginValue, System.Windows.Vector defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
    }
    public abstract partial class VectorAnimationBase : System.Windows.Media.Animation.AnimationTimeline
    {
        protected VectorAnimationBase() { }
        public sealed override System.Type TargetPropertyType { get { throw null; } }
        public new System.Windows.Media.Animation.VectorAnimationBase Clone() { throw null; }
        public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        public System.Windows.Vector GetCurrentValue(System.Windows.Vector defaultOriginValue, System.Windows.Vector defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected abstract System.Windows.Vector GetCurrentValueCore(System.Windows.Vector defaultOriginValue, System.Windows.Vector defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
    }
    [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
    public partial class VectorAnimationUsingKeyFrames : System.Windows.Media.Animation.VectorAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation
    {
        public VectorAnimationUsingKeyFrames() { }
        public bool IsAdditive { get { throw null; } set { } }
        public bool IsCumulative { get { throw null; } set { } }
        public System.Windows.Media.Animation.VectorKeyFrameCollection KeyFrames { get { throw null; } set { } }
        System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddChild(object child) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        protected virtual void AddText(string childText) { }
        public new System.Windows.Media.Animation.VectorAnimationUsingKeyFrames Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Animation.VectorAnimationUsingKeyFrames CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        protected sealed override System.Windows.Vector GetCurrentValueCore(System.Windows.Vector defaultOriginValue, System.Windows.Vector defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { throw null; }
        protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { throw null; }
        protected override void OnChanged() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeKeyFrames() { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object child) { }
        void System.Windows.Markup.IAddChild.AddText(string childText) { }
    }
    public abstract partial class VectorKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame
    {
        public static readonly System.Windows.DependencyProperty KeyTimeProperty;
        public static readonly System.Windows.DependencyProperty ValueProperty;
        protected VectorKeyFrame() { }
        protected VectorKeyFrame(System.Windows.Vector value) { }
        protected VectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
        public System.Windows.Media.Animation.KeyTime KeyTime { get { throw null; } set { } }
        object System.Windows.Media.Animation.IKeyFrame.Value { get { throw null; } set { } }
        public System.Windows.Vector Value { get { throw null; } set { } }
        public System.Windows.Vector InterpolateValue(System.Windows.Vector baseValue, double keyFrameProgress) { throw null; }
        protected abstract System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress);
    }
    public partial class VectorKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public VectorKeyFrameCollection() { }
        public int Count { get { throw null; } }
        public static System.Windows.Media.Animation.VectorKeyFrameCollection Empty { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public bool IsSynchronized { get { throw null; } }
        public System.Windows.Media.Animation.VectorKeyFrame this[int index] { get { throw null; } set { } }
        public object SyncRoot { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public int Add(System.Windows.Media.Animation.VectorKeyFrame keyFrame) { throw null; }
        public void Clear() { }
        public new System.Windows.Media.Animation.VectorKeyFrameCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool Contains(System.Windows.Media.Animation.VectorKeyFrame keyFrame) { throw null; }
        public void CopyTo(System.Windows.Media.Animation.VectorKeyFrame[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Animation.VectorKeyFrame keyFrame) { throw null; }
        public void Insert(int index, System.Windows.Media.Animation.VectorKeyFrame keyFrame) { }
        public void Remove(System.Windows.Media.Animation.VectorKeyFrame keyFrame) { }
        public void RemoveAt(int index) { }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        int System.Collections.IList.Add(object keyFrame) { throw null; }
        bool System.Collections.IList.Contains(object keyFrame) { throw null; }
        int System.Collections.IList.IndexOf(object keyFrame) { throw null; }
        void System.Collections.IList.Insert(int index, object keyFrame) { }
        void System.Collections.IList.Remove(object keyFrame) { }
    }
}
namespace System.Windows.Media.Converters
{
    public abstract partial class BaseIListConverter : System.ComponentModel.TypeConverter
    {
        protected BaseIListConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class BoolIListConverter : System.Windows.Media.Converters.BaseIListConverter
    {
        public BoolIListConverter() { }
    }
    public partial class BrushValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public BrushValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class CacheModeValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public CacheModeValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public sealed partial class CharIListConverter : System.Windows.Media.Converters.BaseIListConverter
    {
        public CharIListConverter() { }
    }
    public partial class DoubleCollectionValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public DoubleCollectionValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public sealed partial class DoubleIListConverter : System.Windows.Media.Converters.BaseIListConverter
    {
        public DoubleIListConverter() { }
    }
    public partial class GeometryValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public GeometryValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class Int32CollectionValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public Int32CollectionValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class PathFigureCollectionValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public PathFigureCollectionValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class PointCollectionValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public PointCollectionValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public sealed partial class PointIListConverter : System.Windows.Media.Converters.BaseIListConverter
    {
        public PointIListConverter() { }
    }
    public partial class TransformValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public TransformValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public sealed partial class UShortIListConverter : System.Windows.Media.Converters.BaseIListConverter
    {
        public UShortIListConverter() { }
    }
    public partial class VectorCollectionValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public VectorCollectionValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
}
namespace System.Windows.Media.Effects
{
    public sealed partial class BevelBitmapEffect : System.Windows.Media.Effects.BitmapEffect
    {
        public static readonly System.Windows.DependencyProperty BevelWidthProperty;
        public static readonly System.Windows.DependencyProperty EdgeProfileProperty;
        public static readonly System.Windows.DependencyProperty LightAngleProperty;
        public static readonly System.Windows.DependencyProperty ReliefProperty;
        public static readonly System.Windows.DependencyProperty SmoothnessProperty;
        public BevelBitmapEffect() { }
        public double BevelWidth { get { throw null; } set { } }
        public System.Windows.Media.Effects.EdgeProfile EdgeProfile { get { throw null; } set { } }
        public double LightAngle { get { throw null; } set { } }
        public double Relief { get { throw null; } set { } }
        public double Smoothness { get { throw null; } set { } }
        public new System.Windows.Media.Effects.BevelBitmapEffect Clone() { throw null; }
        public new System.Windows.Media.Effects.BevelBitmapEffect CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
    }
    public abstract partial class BitmapEffect : System.Windows.Media.Animation.Animatable
    {
        protected BitmapEffect() { }
        public new System.Windows.Media.Effects.BitmapEffect Clone() { throw null; }
        public new System.Windows.Media.Effects.BitmapEffect CloneCurrentValue() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected static System.Runtime.InteropServices.SafeHandle CreateBitmapEffectOuter() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected abstract System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect();
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        public System.Windows.Media.Imaging.BitmapSource GetOutput(System.Windows.Media.Effects.BitmapEffectInput input) { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected static void InitializeBitmapEffect(System.Runtime.InteropServices.SafeHandle outerObject, System.Runtime.InteropServices.SafeHandle innerObject) { }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected static void SetValue(System.Runtime.InteropServices.SafeHandle effect, string propertyName, object value) { }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected abstract void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect);
    }
    public sealed partial class BitmapEffectCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Effects.BitmapEffect>, System.Collections.Generic.IEnumerable<System.Windows.Media.Effects.BitmapEffect>, System.Collections.Generic.IList<System.Windows.Media.Effects.BitmapEffect>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public BitmapEffectCollection() { }
        public BitmapEffectCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Effects.BitmapEffect> collection) { }
        public BitmapEffectCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Effects.BitmapEffect this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Effects.BitmapEffect>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Effects.BitmapEffect value) { }
        public void Clear() { }
        public new System.Windows.Media.Effects.BitmapEffectCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Effects.BitmapEffectCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Effects.BitmapEffect value) { throw null; }
        public void CopyTo(System.Windows.Media.Effects.BitmapEffect[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.Effects.BitmapEffectCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Effects.BitmapEffect value) { throw null; }
        public void Insert(int index, System.Windows.Media.Effects.BitmapEffect value) { }
        public bool Remove(System.Windows.Media.Effects.BitmapEffect value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Effects.BitmapEffect> System.Collections.Generic.IEnumerable<System.Windows.Media.Effects.BitmapEffect>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Effects.BitmapEffect>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Effects.BitmapEffect Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class BitmapEffectGroup : System.Windows.Media.Effects.BitmapEffect
    {
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        public BitmapEffectGroup() { }
        public System.Windows.Media.Effects.BitmapEffectCollection Children { get { throw null; } set { } }
        public new System.Windows.Media.Effects.BitmapEffectGroup Clone() { throw null; }
        public new System.Windows.Media.Effects.BitmapEffectGroup CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
    }
    public sealed partial class BitmapEffectInput : System.Windows.Media.Animation.Animatable
    {
        public static readonly System.Windows.DependencyProperty AreaToApplyEffectProperty;
        public static readonly System.Windows.DependencyProperty AreaToApplyEffectUnitsProperty;
        public static readonly System.Windows.DependencyProperty InputProperty;
        public BitmapEffectInput() { }
        public BitmapEffectInput(System.Windows.Media.Imaging.BitmapSource input) { }
        public System.Windows.Rect AreaToApplyEffect { get { throw null; } set { } }
        public System.Windows.Media.BrushMappingMode AreaToApplyEffectUnits { get { throw null; } set { } }
        public static System.Windows.Media.Imaging.BitmapSource ContextInputSource { get { throw null; } }
        public System.Windows.Media.Imaging.BitmapSource Input { get { throw null; } set { } }
        public new System.Windows.Media.Effects.BitmapEffectInput Clone() { throw null; }
        public new System.Windows.Media.Effects.BitmapEffectInput CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ShouldSerializeInput() { throw null; }
    }
    public sealed partial class BlurBitmapEffect : System.Windows.Media.Effects.BitmapEffect
    {
        public static readonly System.Windows.DependencyProperty KernelTypeProperty;
        public static readonly System.Windows.DependencyProperty RadiusProperty;
        public BlurBitmapEffect() { }
        public System.Windows.Media.Effects.KernelType KernelType { get { throw null; } set { } }
        public double Radius { get { throw null; } set { } }
        public new System.Windows.Media.Effects.BlurBitmapEffect Clone() { throw null; }
        public new System.Windows.Media.Effects.BlurBitmapEffect CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
    }
    public sealed partial class BlurEffect : System.Windows.Media.Effects.Effect
    {
        public static readonly System.Windows.DependencyProperty KernelTypeProperty;
        public static readonly System.Windows.DependencyProperty RadiusProperty;
        public static readonly System.Windows.DependencyProperty RenderingBiasProperty;
        public BlurEffect() { }
        public System.Windows.Media.Effects.KernelType KernelType { get { throw null; } set { } }
        public double Radius { get { throw null; } set { } }
        public System.Windows.Media.Effects.RenderingBias RenderingBias { get { throw null; } set { } }
        public new System.Windows.Media.Effects.BlurEffect Clone() { throw null; }
        public new System.Windows.Media.Effects.BlurEffect CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class DropShadowBitmapEffect : System.Windows.Media.Effects.BitmapEffect
    {
        public static readonly System.Windows.DependencyProperty ColorProperty;
        public static readonly System.Windows.DependencyProperty DirectionProperty;
        public static readonly System.Windows.DependencyProperty NoiseProperty;
        public static readonly System.Windows.DependencyProperty OpacityProperty;
        public static readonly System.Windows.DependencyProperty ShadowDepthProperty;
        public static readonly System.Windows.DependencyProperty SoftnessProperty;
        public DropShadowBitmapEffect() { }
        public System.Windows.Media.Color Color { get { throw null; } set { } }
        public double Direction { get { throw null; } set { } }
        public double Noise { get { throw null; } set { } }
        public double Opacity { get { throw null; } set { } }
        public double ShadowDepth { get { throw null; } set { } }
        public double Softness { get { throw null; } set { } }
        public new System.Windows.Media.Effects.DropShadowBitmapEffect Clone() { throw null; }
        public new System.Windows.Media.Effects.DropShadowBitmapEffect CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
    }
    public sealed partial class DropShadowEffect : System.Windows.Media.Effects.Effect
    {
        public static readonly System.Windows.DependencyProperty BlurRadiusProperty;
        public static readonly System.Windows.DependencyProperty ColorProperty;
        public static readonly System.Windows.DependencyProperty DirectionProperty;
        public static readonly System.Windows.DependencyProperty OpacityProperty;
        public static readonly System.Windows.DependencyProperty RenderingBiasProperty;
        public static readonly System.Windows.DependencyProperty ShadowDepthProperty;
        public DropShadowEffect() { }
        public double BlurRadius { get { throw null; } set { } }
        public System.Windows.Media.Color Color { get { throw null; } set { } }
        public double Direction { get { throw null; } set { } }
        public double Opacity { get { throw null; } set { } }
        public System.Windows.Media.Effects.RenderingBias RenderingBias { get { throw null; } set { } }
        public double ShadowDepth { get { throw null; } set { } }
        public new System.Windows.Media.Effects.DropShadowEffect Clone() { throw null; }
        public new System.Windows.Media.Effects.DropShadowEffect CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public enum EdgeProfile
    {
        Linear = 0,
        CurvedIn = 1,
        CurvedOut = 2,
        BulgedUp = 3,
    }
    public abstract partial class Effect : System.Windows.Media.Animation.Animatable
    {
        protected Effect() { }
        protected internal virtual System.Windows.Media.GeneralTransform EffectMapping { get { throw null; } }
        [System.ComponentModel.BrowsableAttribute(false)]
        public static System.Windows.Media.Brush ImplicitInput { get { throw null; } }
        public new System.Windows.Media.Effects.Effect Clone() { throw null; }
        public new System.Windows.Media.Effects.Effect CloneCurrentValue() { throw null; }
    }
    public sealed partial class EmbossBitmapEffect : System.Windows.Media.Effects.BitmapEffect
    {
        public static readonly System.Windows.DependencyProperty LightAngleProperty;
        public static readonly System.Windows.DependencyProperty ReliefProperty;
        public EmbossBitmapEffect() { }
        public double LightAngle { get { throw null; } set { } }
        public double Relief { get { throw null; } set { } }
        public new System.Windows.Media.Effects.EmbossBitmapEffect Clone() { throw null; }
        public new System.Windows.Media.Effects.EmbossBitmapEffect CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
    }
    public enum KernelType
    {
        Gaussian = 0,
        Box = 1,
    }
    public sealed partial class OuterGlowBitmapEffect : System.Windows.Media.Effects.BitmapEffect
    {
        public static readonly System.Windows.DependencyProperty GlowColorProperty;
        public static readonly System.Windows.DependencyProperty GlowSizeProperty;
        public static readonly System.Windows.DependencyProperty NoiseProperty;
        public static readonly System.Windows.DependencyProperty OpacityProperty;
        public OuterGlowBitmapEffect() { }
        public System.Windows.Media.Color GlowColor { get { throw null; } set { } }
        public double GlowSize { get { throw null; } set { } }
        public double Noise { get { throw null; } set { } }
        public double Opacity { get { throw null; } set { } }
        public new System.Windows.Media.Effects.OuterGlowBitmapEffect Clone() { throw null; }
        public new System.Windows.Media.Effects.OuterGlowBitmapEffect CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { throw null; }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
    }
    public sealed partial class PixelShader : System.Windows.Media.Animation.Animatable
    {
        public static readonly System.Windows.DependencyProperty ShaderRenderModeProperty;
        public static readonly System.Windows.DependencyProperty UriSourceProperty;
        public PixelShader() { }
        public System.Windows.Media.Effects.ShaderRenderMode ShaderRenderMode { get { throw null; } set { } }
        public System.Uri UriSource { get { throw null; } set { } }
        public static event System.EventHandler InvalidPixelShaderEncountered { add { } remove { } }
        public new System.Windows.Media.Effects.PixelShader Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Effects.PixelShader CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public void SetStreamSource(System.IO.Stream source) { }
    }
    public enum RenderingBias
    {
        Performance = 0,
        Quality = 1,
    }
    public enum SamplingMode
    {
        NearestNeighbor = 0,
        Bilinear = 1,
        Auto = 2,
    }
    public abstract partial class ShaderEffect : System.Windows.Media.Effects.Effect
    {
        protected static readonly System.Windows.DependencyProperty PixelShaderProperty;
        protected ShaderEffect() { }
        protected int DdxUvDdyUvRegisterIndex { get { throw null; } set { } }
        protected double PaddingBottom { get { throw null; } set { } }
        protected double PaddingLeft { get { throw null; } set { } }
        protected double PaddingRight { get { throw null; } set { } }
        protected double PaddingTop { get { throw null; } set { } }
        protected System.Windows.Media.Effects.PixelShader PixelShader { get { throw null; } set { } }
        public new System.Windows.Media.Effects.ShaderEffect Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Effects.ShaderEffect CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected static System.Windows.PropertyChangedCallback PixelShaderConstantCallback(int floatRegisterIndex) { throw null; }
        protected static System.Windows.PropertyChangedCallback PixelShaderSamplerCallback(int samplerRegisterIndex) { throw null; }
        protected static System.Windows.PropertyChangedCallback PixelShaderSamplerCallback(int samplerRegisterIndex, System.Windows.Media.Effects.SamplingMode samplingMode) { throw null; }
        protected static System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty(string dpName, System.Type ownerType, int samplerRegisterIndex) { throw null; }
        protected static System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty(string dpName, System.Type ownerType, int samplerRegisterIndex, System.Windows.Media.Effects.SamplingMode samplingMode) { throw null; }
        protected void UpdateShaderValue(System.Windows.DependencyProperty dp) { }
    }
    public enum ShaderRenderMode
    {
        Auto = 0,
        SoftwareOnly = 1,
        HardwareOnly = 2,
    }
}
namespace System.Windows.Media.Imaging
{
    public enum BitmapCacheOption
    {
        Default = 0,
        OnDemand = 0,
        OnLoad = 1,
        None = 2,
    }
    public abstract partial class BitmapCodecInfo
    {
        protected BitmapCodecInfo() { }
        public virtual string Author { get { throw null; } }
        public virtual System.Guid ContainerFormat { get { throw null; } }
        public virtual string DeviceManufacturer { get { throw null; } }
        public virtual string DeviceModels { get { throw null; } }
        public virtual string FileExtensions { get { throw null; } }
        public virtual string FriendlyName { get { throw null; } }
        public virtual string MimeTypes { get { throw null; } }
        public virtual System.Version SpecificationVersion { get { throw null; } }
        public virtual bool SupportsAnimation { get { throw null; } }
        public virtual bool SupportsLossless { get { throw null; } }
        public virtual bool SupportsMultipleFrames { get { throw null; } }
        public virtual System.Version Version { get { throw null; } }
    }
    [System.FlagsAttribute]
    public enum BitmapCreateOptions
    {
        None = 0,
        PreservePixelFormat = 1,
        DelayCreation = 2,
        IgnoreColorProfile = 4,
        IgnoreImageCache = 8,
    }
    public abstract partial class BitmapDecoder : System.Windows.Threading.DispatcherObject
    {
        protected BitmapDecoder() { }
        public virtual System.Windows.Media.Imaging.BitmapCodecInfo CodecInfo { get { throw null; } }
        public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> ColorContexts { get { throw null; } }
        public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.Imaging.BitmapFrame> Frames { get { throw null; } }
        public virtual bool IsDownloading { get { throw null; } }
        public virtual System.Windows.Media.Imaging.BitmapMetadata Metadata { get { throw null; } }
        public virtual System.Windows.Media.Imaging.BitmapPalette Palette { get { throw null; } }
        public virtual System.Windows.Media.Imaging.BitmapSource Preview { get { throw null; } }
        public virtual System.Windows.Media.Imaging.BitmapSource Thumbnail { get { throw null; } }
        public virtual event System.EventHandler DownloadCompleted { add { } remove { } }
        public virtual event System.EventHandler<System.Windows.Media.ExceptionEventArgs> DownloadFailed { add { } remove { } }
        public virtual event System.EventHandler<System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress { add { } remove { } }
        public static System.Windows.Media.Imaging.BitmapDecoder Create(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { throw null; }
        public static System.Windows.Media.Imaging.BitmapDecoder Create(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { throw null; }
        public static System.Windows.Media.Imaging.BitmapDecoder Create(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption, System.Net.Cache.RequestCachePolicy uriCachePolicy) { throw null; }
        public virtual System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter CreateInPlaceBitmapMetadataWriter() { throw null; }
        ~BitmapDecoder() { }
        public override string ToString() { throw null; }
    }
    public abstract partial class BitmapEncoder : System.Windows.Threading.DispatcherObject
    {
        protected BitmapEncoder() { }
        public virtual System.Windows.Media.Imaging.BitmapCodecInfo CodecInfo { get { throw null; } }
        public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> ColorContexts { get { throw null; } set { } }
        public virtual System.Collections.Generic.IList<System.Windows.Media.Imaging.BitmapFrame> Frames { get { throw null; } set { } }
        public virtual System.Windows.Media.Imaging.BitmapMetadata Metadata { get { throw null; } set { } }
        public virtual System.Windows.Media.Imaging.BitmapPalette Palette { get { throw null; } set { } }
        public virtual System.Windows.Media.Imaging.BitmapSource Preview { get { throw null; } set { } }
        public virtual System.Windows.Media.Imaging.BitmapSource Thumbnail { get { throw null; } set { } }
        public static System.Windows.Media.Imaging.BitmapEncoder Create(System.Guid containerFormat) { throw null; }
        public virtual void Save(System.IO.Stream stream) { }
    }
    public abstract partial class BitmapFrame : System.Windows.Media.Imaging.BitmapSource, System.Windows.Markup.IUriContext
    {
        protected BitmapFrame() { }
        public abstract System.Uri BaseUri { get; set; }
        public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> ColorContexts { get; }
        public abstract System.Windows.Media.Imaging.BitmapDecoder Decoder { get; }
        public abstract System.Windows.Media.Imaging.BitmapSource Thumbnail { get; }
        public static System.Windows.Media.Imaging.BitmapFrame Create(System.IO.Stream bitmapStream) { throw null; }
        public static System.Windows.Media.Imaging.BitmapFrame Create(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { throw null; }
        public static System.Windows.Media.Imaging.BitmapFrame Create(System.Uri bitmapUri) { throw null; }
        public static System.Windows.Media.Imaging.BitmapFrame Create(System.Uri bitmapUri, System.Net.Cache.RequestCachePolicy uriCachePolicy) { throw null; }
        public static System.Windows.Media.Imaging.BitmapFrame Create(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { throw null; }
        public static System.Windows.Media.Imaging.BitmapFrame Create(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption, System.Net.Cache.RequestCachePolicy uriCachePolicy) { throw null; }
        public static System.Windows.Media.Imaging.BitmapFrame Create(System.Windows.Media.Imaging.BitmapSource source) { throw null; }
        public static System.Windows.Media.Imaging.BitmapFrame Create(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.Imaging.BitmapSource thumbnail) { throw null; }
        public static System.Windows.Media.Imaging.BitmapFrame Create(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.Imaging.BitmapSource thumbnail, System.Windows.Media.Imaging.BitmapMetadata metadata, System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> colorContexts) { throw null; }
        public abstract System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter CreateInPlaceBitmapMetadataWriter();
    }
    public sealed partial class BitmapImage : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize, System.Windows.Markup.IUriContext
    {
        public static readonly System.Windows.DependencyProperty CacheOptionProperty;
        public static readonly System.Windows.DependencyProperty CreateOptionsProperty;
        public static readonly System.Windows.DependencyProperty DecodePixelHeightProperty;
        public static readonly System.Windows.DependencyProperty DecodePixelWidthProperty;
        public static readonly System.Windows.DependencyProperty RotationProperty;
        public static readonly System.Windows.DependencyProperty SourceRectProperty;
        public static readonly System.Windows.DependencyProperty StreamSourceProperty;
        public static readonly System.Windows.DependencyProperty UriCachePolicyProperty;
        public static readonly System.Windows.DependencyProperty UriSourceProperty;
        public BitmapImage() { }
        public BitmapImage(System.Uri uriSource) { }
        public BitmapImage(System.Uri uriSource, System.Net.Cache.RequestCachePolicy uriCachePolicy) { }
        public System.Uri BaseUri { get { throw null; } set { } }
        public System.Windows.Media.Imaging.BitmapCacheOption CacheOption { get { throw null; } set { } }
        public System.Windows.Media.Imaging.BitmapCreateOptions CreateOptions { get { throw null; } set { } }
        public int DecodePixelHeight { get { throw null; } set { } }
        public int DecodePixelWidth { get { throw null; } set { } }
        public override bool IsDownloading { get { throw null; } }
        public override System.Windows.Media.ImageMetadata Metadata { get { throw null; } }
        public System.Windows.Media.Imaging.Rotation Rotation { get { throw null; } set { } }
        public System.Windows.Int32Rect SourceRect { get { throw null; } set { } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public System.IO.Stream StreamSource { get { throw null; } set { } }
        [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.RequestCachePolicyConverter))]
        public System.Net.Cache.RequestCachePolicy UriCachePolicy { get { throw null; } set { } }
        public System.Uri UriSource { get { throw null; } set { } }
        public void BeginInit() { }
        public new System.Windows.Media.Imaging.BitmapImage Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Imaging.BitmapImage CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public void EndInit() { }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    }
    public partial class BitmapMetadata : System.Windows.Media.ImageMetadata, System.Collections.Generic.IEnumerable<string>, System.Collections.IEnumerable
    {
        public BitmapMetadata(string containerFormat) { }
        public string ApplicationName { get { throw null; } set { } }
        public System.Collections.ObjectModel.ReadOnlyCollection<string> Author { get { throw null; } set { } }
        public string CameraManufacturer { get { throw null; } set { } }
        public string CameraModel { get { throw null; } set { } }
        public string Comment { get { throw null; } set { } }
        public string Copyright { get { throw null; } set { } }
        public string DateTaken { get { throw null; } set { } }
        public string Format { get { throw null; } }
        public bool IsFixedSize { get { throw null; } }
        public bool IsReadOnly { get { throw null; } }
        public System.Collections.ObjectModel.ReadOnlyCollection<string> Keywords { get { throw null; } set { } }
        public string Location { get { throw null; } }
        public int Rating { get { throw null; } set { } }
        public string Subject { get { throw null; } set { } }
        public string Title { get { throw null; } set { } }
        public new System.Windows.Media.Imaging.BitmapMetadata Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public bool ContainsQuery(string query) { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public object GetQuery(string query) { throw null; }
        public void RemoveQuery(string query) { }
        public void SetQuery(string query, object value) { }
        System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator() { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    }
    public partial class BitmapMetadataBlob
    {
        public BitmapMetadataBlob(byte[] blob) { }
        public byte[] GetBlobValue() { throw null; }
    }
    public sealed partial class BitmapPalette : System.Windows.Threading.DispatcherObject
    {
        public BitmapPalette(System.Collections.Generic.IList<System.Windows.Media.Color> colors) { }
        public BitmapPalette(System.Windows.Media.Imaging.BitmapSource bitmapSource, int maxColorCount) { }
        public System.Collections.Generic.IList<System.Windows.Media.Color> Colors { get { throw null; } }
    }
    public static partial class BitmapPalettes
    {
        public static System.Windows.Media.Imaging.BitmapPalette BlackAndWhite { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette BlackAndWhiteTransparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Gray16 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Gray16Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Gray256 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Gray256Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Gray4 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Gray4Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone125 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone125Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone216 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone216Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone252 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone252Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone256 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone256Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone27 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone27Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone64 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone64Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone8 { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette Halftone8Transparent { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette WebPalette { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapPalette WebPaletteTransparent { get { throw null; } }
    }
    public partial class BitmapSizeOptions
    {
        internal BitmapSizeOptions() { }
        public int PixelHeight { get { throw null; } }
        public int PixelWidth { get { throw null; } }
        public bool PreservesAspectRatio { get { throw null; } }
        public System.Windows.Media.Imaging.Rotation Rotation { get { throw null; } }
        public static System.Windows.Media.Imaging.BitmapSizeOptions FromEmptyOptions() { throw null; }
        public static System.Windows.Media.Imaging.BitmapSizeOptions FromHeight(int pixelHeight) { throw null; }
        public static System.Windows.Media.Imaging.BitmapSizeOptions FromRotation(System.Windows.Media.Imaging.Rotation rotation) { throw null; }
        public static System.Windows.Media.Imaging.BitmapSizeOptions FromWidth(int pixelWidth) { throw null; }
        public static System.Windows.Media.Imaging.BitmapSizeOptions FromWidthAndHeight(int pixelWidth, int pixelHeight) { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public abstract partial class BitmapSource : System.Windows.Media.ImageSource
    {
        protected BitmapSource() { }
        public virtual double DpiX { get { throw null; } }
        public virtual double DpiY { get { throw null; } }
        public virtual System.Windows.Media.PixelFormat Format { get { throw null; } }
        public override double Height { get { throw null; } }
        public virtual bool IsDownloading { get { throw null; } }
        public override System.Windows.Media.ImageMetadata Metadata { get { throw null; } }
        public virtual System.Windows.Media.Imaging.BitmapPalette Palette { get { throw null; } }
        public virtual int PixelHeight { get { throw null; } }
        public virtual int PixelWidth { get { throw null; } }
        public override double Width { get { throw null; } }
        public virtual event System.EventHandler<System.Windows.Media.ExceptionEventArgs> DecodeFailed { add { } remove { } }
        public virtual event System.EventHandler DownloadCompleted { add { } remove { } }
        public virtual event System.EventHandler<System.Windows.Media.ExceptionEventArgs> DownloadFailed { add { } remove { } }
        public virtual event System.EventHandler<System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress { add { } remove { } }
        protected void CheckIfSiteOfOrigin() { }
        public new System.Windows.Media.Imaging.BitmapSource Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Imaging.BitmapSource CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        public virtual void CopyPixels(System.Array pixels, int stride, int offset) { }
        public virtual void CopyPixels(System.Windows.Int32Rect sourceRect, System.Array pixels, int stride, int offset) { }
        public virtual void CopyPixels(System.Windows.Int32Rect sourceRect, System.IntPtr buffer, int bufferSize, int stride) { }
        public static System.Windows.Media.Imaging.BitmapSource Create(int pixelWidth, int pixelHeight, double dpiX, double dpiY, System.Windows.Media.PixelFormat pixelFormat, System.Windows.Media.Imaging.BitmapPalette palette, System.Array pixels, int stride) { throw null; }
        public static System.Windows.Media.Imaging.BitmapSource Create(int pixelWidth, int pixelHeight, double dpiX, double dpiY, System.Windows.Media.PixelFormat pixelFormat, System.Windows.Media.Imaging.BitmapPalette palette, System.IntPtr buffer, int bufferSize, int stride) { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    }
    public sealed partial class BmpBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder
    {
        public BmpBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
        public BmpBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    }
    public sealed partial class BmpBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder
    {
        public BmpBitmapEncoder() { }
    }
    public sealed partial class CachedBitmap : System.Windows.Media.Imaging.BitmapSource
    {
        public CachedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
        public new System.Windows.Media.Imaging.CachedBitmap Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Imaging.CachedBitmap CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    }
    public sealed partial class ColorConvertedBitmap : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize
    {
        public static readonly System.Windows.DependencyProperty DestinationColorContextProperty;
        public static readonly System.Windows.DependencyProperty DestinationFormatProperty;
        public static readonly System.Windows.DependencyProperty SourceColorContextProperty;
        public static readonly System.Windows.DependencyProperty SourceProperty;
        public ColorConvertedBitmap() { }
        public ColorConvertedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.ColorContext sourceColorContext, System.Windows.Media.ColorContext destinationColorContext, System.Windows.Media.PixelFormat format) { }
        public System.Windows.Media.ColorContext DestinationColorContext { get { throw null; } set { } }
        public System.Windows.Media.PixelFormat DestinationFormat { get { throw null; } set { } }
        public System.Windows.Media.Imaging.BitmapSource Source { get { throw null; } set { } }
        public System.Windows.Media.ColorContext SourceColorContext { get { throw null; } set { } }
        public void BeginInit() { }
        public new System.Windows.Media.Imaging.ColorConvertedBitmap Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Imaging.ColorConvertedBitmap CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public void EndInit() { }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    }
    public sealed partial class CroppedBitmap : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize
    {
        public static readonly System.Windows.DependencyProperty SourceProperty;
        public static readonly System.Windows.DependencyProperty SourceRectProperty;
        public CroppedBitmap() { }
        public CroppedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Int32Rect sourceRect) { }
        public System.Windows.Media.Imaging.BitmapSource Source { get { throw null; } set { } }
        public System.Windows.Int32Rect SourceRect { get { throw null; } set { } }
        public void BeginInit() { }
        public new System.Windows.Media.Imaging.CroppedBitmap Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Imaging.CroppedBitmap CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public void EndInit() { }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    }
    public partial class DownloadProgressEventArgs : System.EventArgs
    {
        internal DownloadProgressEventArgs() { }
        public int Progress { get { throw null; } }
    }
    public sealed partial class FormatConvertedBitmap : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize
    {
        public static readonly System.Windows.DependencyProperty AlphaThresholdProperty;
        public static readonly System.Windows.DependencyProperty DestinationFormatProperty;
        public static readonly System.Windows.DependencyProperty DestinationPaletteProperty;
        public static readonly System.Windows.DependencyProperty SourceProperty;
        public FormatConvertedBitmap() { }
        public FormatConvertedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.PixelFormat destinationFormat, System.Windows.Media.Imaging.BitmapPalette destinationPalette, double alphaThreshold) { }
        public double AlphaThreshold { get { throw null; } set { } }
        public System.Windows.Media.PixelFormat DestinationFormat { get { throw null; } set { } }
        public System.Windows.Media.Imaging.BitmapPalette DestinationPalette { get { throw null; } set { } }
        public System.Windows.Media.Imaging.BitmapSource Source { get { throw null; } set { } }
        public void BeginInit() { }
        public new System.Windows.Media.Imaging.FormatConvertedBitmap Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Imaging.FormatConvertedBitmap CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public void EndInit() { }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    }
    public sealed partial class GifBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder
    {
        public GifBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
        public GifBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    }
    public sealed partial class GifBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder
    {
        public GifBitmapEncoder() { }
    }
    public sealed partial class IconBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder
    {
        public IconBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
        public IconBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    }
    public sealed partial class InPlaceBitmapMetadataWriter : System.Windows.Media.Imaging.BitmapMetadata
    {
        internal InPlaceBitmapMetadataWriter() : base(default(string)) { }
        public new System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public bool TrySave() { throw null; }
    }
    public sealed partial class JpegBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder
    {
        public JpegBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
        public JpegBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    }
    public sealed partial class JpegBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder
    {
        public JpegBitmapEncoder() { }
        public bool FlipHorizontal { get { throw null; } set { } }
        public bool FlipVertical { get { throw null; } set { } }
        public int QualityLevel { get { throw null; } set { } }
        public System.Windows.Media.Imaging.Rotation Rotation { get { throw null; } set { } }
    }
    public sealed partial class LateBoundBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder
    {
        internal LateBoundBitmapDecoder() { }
        public override System.Windows.Media.Imaging.BitmapCodecInfo CodecInfo { get { throw null; } }
        public override System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> ColorContexts { get { throw null; } }
        public System.Windows.Media.Imaging.BitmapDecoder Decoder { get { throw null; } }
        public override System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.Imaging.BitmapFrame> Frames { get { throw null; } }
        public override bool IsDownloading { get { throw null; } }
        public override System.Windows.Media.Imaging.BitmapPalette Palette { get { throw null; } }
        public override System.Windows.Media.Imaging.BitmapSource Preview { get { throw null; } }
        public override System.Windows.Media.Imaging.BitmapSource Thumbnail { get { throw null; } }
    }
    public sealed partial class PngBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder
    {
        public PngBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
        public PngBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    }
    public sealed partial class PngBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder
    {
        public PngBitmapEncoder() { }
        public System.Windows.Media.Imaging.PngInterlaceOption Interlace { get { throw null; } set { } }
    }
    public enum PngInterlaceOption
    {
        Default = 0,
        On = 1,
        Off = 2,
    }
    public sealed partial class RenderTargetBitmap : System.Windows.Media.Imaging.BitmapSource
    {
        public RenderTargetBitmap(int pixelWidth, int pixelHeight, double dpiX, double dpiY, System.Windows.Media.PixelFormat pixelFormat) { }
        public void Clear() { }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public void Render(System.Windows.Media.Visual visual) { }
    }
    public enum Rotation
    {
        Rotate0 = 0,
        Rotate90 = 1,
        Rotate180 = 2,
        Rotate270 = 3,
    }
    public sealed partial class TiffBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder
    {
        public TiffBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
        public TiffBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    }
    public sealed partial class TiffBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder
    {
        public TiffBitmapEncoder() { }
        public System.Windows.Media.Imaging.TiffCompressOption Compression { get { throw null; } set { } }
    }
    public enum TiffCompressOption
    {
        Default = 0,
        None = 1,
        Ccitt3 = 2,
        Ccitt4 = 3,
        Lzw = 4,
        Rle = 5,
        Zip = 6,
    }
    public sealed partial class TransformedBitmap : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize
    {
        public static readonly System.Windows.DependencyProperty SourceProperty;
        public static readonly System.Windows.DependencyProperty TransformProperty;
        public TransformedBitmap() { }
        public TransformedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.Transform newTransform) { }
        public System.Windows.Media.Imaging.BitmapSource Source { get { throw null; } set { } }
        public System.Windows.Media.Transform Transform { get { throw null; } set { } }
        public void BeginInit() { }
        public new System.Windows.Media.Imaging.TransformedBitmap Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Imaging.TransformedBitmap CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public void EndInit() { }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    }
    public sealed partial class WmpBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder
    {
        public WmpBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
        public WmpBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    }
    public sealed partial class WmpBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder
    {
        public WmpBitmapEncoder() { }
        public byte AlphaDataDiscardLevel { get { throw null; } set { } }
        public byte AlphaQualityLevel { get { throw null; } set { } }
        public bool CompressedDomainTranscode { get { throw null; } set { } }
        public bool FlipHorizontal { get { throw null; } set { } }
        public bool FlipVertical { get { throw null; } set { } }
        public bool FrequencyOrder { get { throw null; } set { } }
        public short HorizontalTileSlices { get { throw null; } set { } }
        public bool IgnoreOverlap { get { throw null; } set { } }
        public byte ImageDataDiscardLevel { get { throw null; } set { } }
        public float ImageQualityLevel { get { throw null; } set { } }
        public bool InterleavedAlpha { get { throw null; } set { } }
        public bool Lossless { get { throw null; } set { } }
        public byte OverlapLevel { get { throw null; } set { } }
        public byte QualityLevel { get { throw null; } set { } }
        public System.Windows.Media.Imaging.Rotation Rotation { get { throw null; } set { } }
        public byte SubsamplingLevel { get { throw null; } set { } }
        public bool UseCodecOptions { get { throw null; } set { } }
        public short VerticalTileSlices { get { throw null; } set { } }
    }
    public sealed partial class WriteableBitmap : System.Windows.Media.Imaging.BitmapSource
    {
        public WriteableBitmap(int pixelWidth, int pixelHeight, double dpiX, double dpiY, System.Windows.Media.PixelFormat pixelFormat, System.Windows.Media.Imaging.BitmapPalette palette) { }
        public WriteableBitmap(System.Windows.Media.Imaging.BitmapSource source) { }
        public System.IntPtr BackBuffer { get { throw null; } }
        public int BackBufferStride { get { throw null; } }
        public void AddDirtyRect(System.Windows.Int32Rect dirtyRect) { }
        public new System.Windows.Media.Imaging.WriteableBitmap Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        public new System.Windows.Media.Imaging.WriteableBitmap CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public void Lock() { }
        public bool TryLock(System.Windows.Duration timeout) { throw null; }
        public void Unlock() { }
        public void WritePixels(System.Windows.Int32Rect sourceRect, System.Array pixels, int stride, int offset) { }
        public void WritePixels(System.Windows.Int32Rect sourceRect, System.Array sourceBuffer, int sourceBufferStride, int destinationX, int destinationY) { }
        public void WritePixels(System.Windows.Int32Rect sourceRect, System.IntPtr buffer, int bufferSize, int stride) { }
        public void WritePixels(System.Windows.Int32Rect sourceRect, System.IntPtr sourceBuffer, int sourceBufferSize, int sourceBufferStride, int destinationX, int destinationY) { }
    }
}
namespace System.Windows.Media.Media3D
{
    public abstract partial class AffineTransform3D : System.Windows.Media.Media3D.Transform3D
    {
        internal AffineTransform3D() { }
        public override bool IsAffine { get { throw null; } }
        public new System.Windows.Media.Media3D.AffineTransform3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.AffineTransform3D CloneCurrentValue() { throw null; }
    }
    public sealed partial class AmbientLight : System.Windows.Media.Media3D.Light
    {
        public AmbientLight() { }
        public AmbientLight(System.Windows.Media.Color ambientColor) { }
        public new System.Windows.Media.Media3D.AmbientLight Clone() { throw null; }
        public new System.Windows.Media.Media3D.AmbientLight CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class AxisAngleRotation3D : System.Windows.Media.Media3D.Rotation3D
    {
        public static readonly System.Windows.DependencyProperty AngleProperty;
        public static readonly System.Windows.DependencyProperty AxisProperty;
        public AxisAngleRotation3D() { }
        public AxisAngleRotation3D(System.Windows.Media.Media3D.Vector3D axis, double angle) { }
        public double Angle { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Vector3D Axis { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.AxisAngleRotation3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.AxisAngleRotation3D CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public abstract partial class Camera : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        internal Camera() { }
        public static readonly System.Windows.DependencyProperty TransformProperty;
        public System.Windows.Media.Media3D.Transform3D Transform { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.Camera Clone() { throw null; }
        public new System.Windows.Media.Media3D.Camera CloneCurrentValue() { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class ContainerUIElement3D : System.Windows.UIElement3D
    {
        public ContainerUIElement3D() { }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Media.Media3D.Visual3DCollection Children { get { throw null; } }
        protected override int Visual3DChildrenCount { get { throw null; } }
        protected override System.Windows.Media.Media3D.Visual3D GetVisual3DChild(int index) { throw null; }
        protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
    }
    public sealed partial class DiffuseMaterial : System.Windows.Media.Media3D.Material
    {
        public static readonly System.Windows.DependencyProperty AmbientColorProperty;
        public static readonly System.Windows.DependencyProperty BrushProperty;
        public static readonly System.Windows.DependencyProperty ColorProperty;
        public DiffuseMaterial() { }
        public DiffuseMaterial(System.Windows.Media.Brush brush) { }
        public System.Windows.Media.Color AmbientColor { get { throw null; } set { } }
        public System.Windows.Media.Brush Brush { get { throw null; } set { } }
        public System.Windows.Media.Color Color { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.DiffuseMaterial Clone() { throw null; }
        public new System.Windows.Media.Media3D.DiffuseMaterial CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class DirectionalLight : System.Windows.Media.Media3D.Light
    {
        public static readonly System.Windows.DependencyProperty DirectionProperty;
        public DirectionalLight() { }
        public DirectionalLight(System.Windows.Media.Color diffuseColor, System.Windows.Media.Media3D.Vector3D direction) { }
        public System.Windows.Media.Media3D.Vector3D Direction { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.DirectionalLight Clone() { throw null; }
        public new System.Windows.Media.Media3D.DirectionalLight CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class EmissiveMaterial : System.Windows.Media.Media3D.Material
    {
        public static readonly System.Windows.DependencyProperty BrushProperty;
        public static readonly System.Windows.DependencyProperty ColorProperty;
        public EmissiveMaterial() { }
        public EmissiveMaterial(System.Windows.Media.Brush brush) { }
        public System.Windows.Media.Brush Brush { get { throw null; } set { } }
        public System.Windows.Media.Color Color { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.EmissiveMaterial Clone() { throw null; }
        public new System.Windows.Media.Media3D.EmissiveMaterial CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public partial class GeneralTransform2DTo3D : System.Windows.Freezable
    {
        internal GeneralTransform2DTo3D() { }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Windows.Media.Media3D.Point3D Transform(System.Windows.Point point) { throw null; }
        public bool TryTransform(System.Windows.Point inPoint, out System.Windows.Media.Media3D.Point3D result) { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public abstract partial class GeneralTransform3D : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        internal GeneralTransform3D() { }
        public abstract System.Windows.Media.Media3D.GeneralTransform3D Inverse { get; }
        public new System.Windows.Media.Media3D.GeneralTransform3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.GeneralTransform3D CloneCurrentValue() { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public System.Windows.Media.Media3D.Point3D Transform(System.Windows.Media.Media3D.Point3D point) { throw null; }
        public abstract System.Windows.Media.Media3D.Rect3D TransformBounds(System.Windows.Media.Media3D.Rect3D rect);
        public abstract bool TryTransform(System.Windows.Media.Media3D.Point3D inPoint, out System.Windows.Media.Media3D.Point3D result);
    }
    public sealed partial class GeneralTransform3DCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.GeneralTransform3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.GeneralTransform3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.GeneralTransform3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public GeneralTransform3DCollection() { }
        public GeneralTransform3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.GeneralTransform3D> collection) { }
        public GeneralTransform3DCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Media3D.GeneralTransform3D this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.GeneralTransform3D>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Media3D.GeneralTransform3D value) { }
        public void Clear() { }
        public new System.Windows.Media.Media3D.GeneralTransform3DCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Media3D.GeneralTransform3DCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Media3D.GeneralTransform3D value) { throw null; }
        public void CopyTo(System.Windows.Media.Media3D.GeneralTransform3D[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Media3D.GeneralTransform3D value) { throw null; }
        public void Insert(int index, System.Windows.Media.Media3D.GeneralTransform3D value) { }
        public bool Remove(System.Windows.Media.Media3D.GeneralTransform3D value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.GeneralTransform3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.GeneralTransform3D>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.GeneralTransform3D>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Media3D.GeneralTransform3D Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class GeneralTransform3DGroup : System.Windows.Media.Media3D.GeneralTransform3D
    {
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        public GeneralTransform3DGroup() { }
        public System.Windows.Media.Media3D.GeneralTransform3DCollection Children { get { throw null; } set { } }
        public override System.Windows.Media.Media3D.GeneralTransform3D Inverse { get { throw null; } }
        public new System.Windows.Media.Media3D.GeneralTransform3DGroup Clone() { throw null; }
        public new System.Windows.Media.Media3D.GeneralTransform3DGroup CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        public override System.Windows.Media.Media3D.Rect3D TransformBounds(System.Windows.Media.Media3D.Rect3D rect) { throw null; }
        public override bool TryTransform(System.Windows.Media.Media3D.Point3D inPoint, out System.Windows.Media.Media3D.Point3D result) { throw null; }
    }
    public partial class GeneralTransform3DTo2D : System.Windows.Freezable
    {
        internal GeneralTransform3DTo2D() { }
        protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
        protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
        public System.Windows.Point Transform(System.Windows.Media.Media3D.Point3D point) { throw null; }
        public System.Windows.Rect TransformBounds(System.Windows.Media.Media3D.Rect3D rect3D) { throw null; }
        public bool TryTransform(System.Windows.Media.Media3D.Point3D inPoint, out System.Windows.Point result) { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public abstract partial class Geometry3D : System.Windows.Media.Animation.Animatable
    {
        internal Geometry3D() { }
        public abstract System.Windows.Media.Media3D.Rect3D Bounds { get; }
        public new System.Windows.Media.Media3D.Geometry3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.Geometry3D CloneCurrentValue() { throw null; }
    }
    public sealed partial class GeometryModel3D : System.Windows.Media.Media3D.Model3D
    {
        public static readonly System.Windows.DependencyProperty BackMaterialProperty;
        public static readonly System.Windows.DependencyProperty GeometryProperty;
        public static readonly System.Windows.DependencyProperty MaterialProperty;
        public GeometryModel3D() { }
        public GeometryModel3D(System.Windows.Media.Media3D.Geometry3D geometry, System.Windows.Media.Media3D.Material material) { }
        public System.Windows.Media.Media3D.Material BackMaterial { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Geometry3D Geometry { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Material Material { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.GeometryModel3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.GeometryModel3D CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public abstract partial class HitTestParameters3D
    {
        internal HitTestParameters3D() { }
    }
    public abstract partial class Light : System.Windows.Media.Media3D.Model3D
    {
        internal Light() { }
        public static readonly System.Windows.DependencyProperty ColorProperty;
        public System.Windows.Media.Color Color { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.Light Clone() { throw null; }
        public new System.Windows.Media.Media3D.Light CloneCurrentValue() { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public abstract partial class Material : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        internal Material() { }
        public new System.Windows.Media.Media3D.Material Clone() { throw null; }
        public new System.Windows.Media.Media3D.Material CloneCurrentValue() { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public sealed partial class MaterialCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Material>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Material>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Material>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public MaterialCollection() { }
        public MaterialCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Material> collection) { }
        public MaterialCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Media3D.Material this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Material>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Media3D.Material value) { }
        public void Clear() { }
        public new System.Windows.Media.Media3D.MaterialCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Media3D.MaterialCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Media3D.Material value) { throw null; }
        public void CopyTo(System.Windows.Media.Media3D.Material[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.Media3D.MaterialCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Media3D.Material value) { throw null; }
        public void Insert(int index, System.Windows.Media.Media3D.Material value) { }
        public bool Remove(System.Windows.Media.Media3D.Material value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Material> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Material>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Material>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Media3D.Material Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class MaterialGroup : System.Windows.Media.Media3D.Material
    {
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        public MaterialGroup() { }
        public System.Windows.Media.Media3D.MaterialCollection Children { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.MaterialGroup Clone() { throw null; }
        public new System.Windows.Media.Media3D.MaterialGroup CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Matrix3DConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer))]
    public partial struct Matrix3D : System.IFormattable
    {
        public Matrix3D(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double offsetX, double offsetY, double offsetZ, double m44) { throw null; }
        public double Determinant { get { throw null; } }
        public bool HasInverse { get { throw null; } }
        public static System.Windows.Media.Media3D.Matrix3D Identity { get { throw null; } }
        public bool IsAffine { get { throw null; } }
        public bool IsIdentity { get { throw null; } }
        public double M11 { get { throw null; } set { } }
        public double M12 { get { throw null; } set { } }
        public double M13 { get { throw null; } set { } }
        public double M14 { get { throw null; } set { } }
        public double M21 { get { throw null; } set { } }
        public double M22 { get { throw null; } set { } }
        public double M23 { get { throw null; } set { } }
        public double M24 { get { throw null; } set { } }
        public double M31 { get { throw null; } set { } }
        public double M32 { get { throw null; } set { } }
        public double M33 { get { throw null; } set { } }
        public double M34 { get { throw null; } set { } }
        public double M44 { get { throw null; } set { } }
        public double OffsetX { get { throw null; } set { } }
        public double OffsetY { get { throw null; } set { } }
        public double OffsetZ { get { throw null; } set { } }
        public void Append(System.Windows.Media.Media3D.Matrix3D matrix) { }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Media.Media3D.Matrix3D value) { throw null; }
        public static bool Equals(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { throw null; }
        public override int GetHashCode() { throw null; }
        public void Invert() { }
        public static System.Windows.Media.Media3D.Matrix3D Multiply(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { throw null; }
        public static bool operator ==(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { throw null; }
        public static bool operator !=(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { throw null; }
        public static System.Windows.Media.Media3D.Matrix3D operator *(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { throw null; }
        public static System.Windows.Media.Media3D.Matrix3D Parse(string source) { throw null; }
        public void Prepend(System.Windows.Media.Media3D.Matrix3D matrix) { }
        public void Rotate(System.Windows.Media.Media3D.Quaternion quaternion) { }
        public void RotateAt(System.Windows.Media.Media3D.Quaternion quaternion, System.Windows.Media.Media3D.Point3D center) { }
        public void RotateAtPrepend(System.Windows.Media.Media3D.Quaternion quaternion, System.Windows.Media.Media3D.Point3D center) { }
        public void RotatePrepend(System.Windows.Media.Media3D.Quaternion quaternion) { }
        public void Scale(System.Windows.Media.Media3D.Vector3D scale) { }
        public void ScaleAt(System.Windows.Media.Media3D.Vector3D scale, System.Windows.Media.Media3D.Point3D center) { }
        public void ScaleAtPrepend(System.Windows.Media.Media3D.Vector3D scale, System.Windows.Media.Media3D.Point3D center) { }
        public void ScalePrepend(System.Windows.Media.Media3D.Vector3D scale) { }
        public void SetIdentity() { }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public System.Windows.Media.Media3D.Point3D Transform(System.Windows.Media.Media3D.Point3D point) { throw null; }
        public void Transform(System.Windows.Media.Media3D.Point3D[] points) { }
        public System.Windows.Media.Media3D.Point4D Transform(System.Windows.Media.Media3D.Point4D point) { throw null; }
        public void Transform(System.Windows.Media.Media3D.Point4D[] points) { }
        public System.Windows.Media.Media3D.Vector3D Transform(System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public void Transform(System.Windows.Media.Media3D.Vector3D[] vectors) { }
        public void Translate(System.Windows.Media.Media3D.Vector3D offset) { }
        public void TranslatePrepend(System.Windows.Media.Media3D.Vector3D offset) { }
    }
    public sealed partial class Matrix3DConverter : System.ComponentModel.TypeConverter
    {
        public Matrix3DConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class MatrixCamera : System.Windows.Media.Media3D.Camera
    {
        public static readonly System.Windows.DependencyProperty ProjectionMatrixProperty;
        public static readonly System.Windows.DependencyProperty ViewMatrixProperty;
        public MatrixCamera() { }
        public MatrixCamera(System.Windows.Media.Media3D.Matrix3D viewMatrix, System.Windows.Media.Media3D.Matrix3D projectionMatrix) { }
        public System.Windows.Media.Media3D.Matrix3D ProjectionMatrix { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Matrix3D ViewMatrix { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.MatrixCamera Clone() { throw null; }
        public new System.Windows.Media.Media3D.MatrixCamera CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class MatrixTransform3D : System.Windows.Media.Media3D.Transform3D
    {
        public static readonly System.Windows.DependencyProperty MatrixProperty;
        public MatrixTransform3D() { }
        public MatrixTransform3D(System.Windows.Media.Media3D.Matrix3D matrix) { }
        public override bool IsAffine { get { throw null; } }
        public System.Windows.Media.Media3D.Matrix3D Matrix { get { throw null; } set { } }
        public override System.Windows.Media.Media3D.Matrix3D Value { get { throw null; } }
        public new System.Windows.Media.Media3D.MatrixTransform3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.MatrixTransform3D CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class MeshGeometry3D : System.Windows.Media.Media3D.Geometry3D
    {
        public static readonly System.Windows.DependencyProperty NormalsProperty;
        public static readonly System.Windows.DependencyProperty PositionsProperty;
        public static readonly System.Windows.DependencyProperty TextureCoordinatesProperty;
        public static readonly System.Windows.DependencyProperty TriangleIndicesProperty;
        public MeshGeometry3D() { }
        public override System.Windows.Media.Media3D.Rect3D Bounds { get { throw null; } }
        public System.Windows.Media.Media3D.Vector3DCollection Normals { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Point3DCollection Positions { get { throw null; } set { } }
        public System.Windows.Media.PointCollection TextureCoordinates { get { throw null; } set { } }
        public System.Windows.Media.Int32Collection TriangleIndices { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.MeshGeometry3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.MeshGeometry3D CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public abstract partial class Model3D : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        internal Model3D() { }
        public static readonly System.Windows.DependencyProperty TransformProperty;
        public System.Windows.Media.Media3D.Rect3D Bounds { get { throw null; } }
        public System.Windows.Media.Media3D.Transform3D Transform { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.Model3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.Model3D CloneCurrentValue() { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public sealed partial class Model3DCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Model3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Model3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Model3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public Model3DCollection() { }
        public Model3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Model3D> collection) { }
        public Model3DCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Media3D.Model3D this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Model3D>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Media3D.Model3D value) { }
        public void Clear() { }
        public new System.Windows.Media.Media3D.Model3DCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Media3D.Model3DCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Media3D.Model3D value) { throw null; }
        public void CopyTo(System.Windows.Media.Media3D.Model3D[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.Media3D.Model3DCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Media3D.Model3D value) { throw null; }
        public void Insert(int index, System.Windows.Media.Media3D.Model3D value) { }
        public bool Remove(System.Windows.Media.Media3D.Model3D value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Model3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Model3D>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Model3D>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Media3D.Model3D Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class Model3DGroup : System.Windows.Media.Media3D.Model3D
    {
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        public Model3DGroup() { }
        public System.Windows.Media.Media3D.Model3DCollection Children { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.Model3DGroup Clone() { throw null; }
        public new System.Windows.Media.Media3D.Model3DGroup CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Model")]
    public sealed partial class ModelUIElement3D : System.Windows.UIElement3D
    {
        public static readonly System.Windows.DependencyProperty ModelProperty;
        public ModelUIElement3D() { }
        public System.Windows.Media.Media3D.Model3D Model { get { throw null; } set { } }
        protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public partial class ModelVisual3D : System.Windows.Media.Media3D.Visual3D, System.Windows.Markup.IAddChild
    {
        public static readonly System.Windows.DependencyProperty ContentProperty;
        public static readonly new System.Windows.DependencyProperty TransformProperty;
        public ModelVisual3D() { }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Media.Media3D.Visual3DCollection Children { get { throw null; } }
        public System.Windows.Media.Media3D.Model3D Content { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.Transform3D Transform { get { throw null; } set { } }
        protected sealed override int Visual3DChildrenCount { get { throw null; } }
        protected sealed override System.Windows.Media.Media3D.Visual3D GetVisual3DChild(int index) { throw null; }
        void System.Windows.Markup.IAddChild.AddChild(object value) { }
        void System.Windows.Markup.IAddChild.AddText(string text) { }
    }
    public sealed partial class OrthographicCamera : System.Windows.Media.Media3D.ProjectionCamera
    {
        public static readonly System.Windows.DependencyProperty WidthProperty;
        public OrthographicCamera() { }
        public OrthographicCamera(System.Windows.Media.Media3D.Point3D position, System.Windows.Media.Media3D.Vector3D lookDirection, System.Windows.Media.Media3D.Vector3D upDirection, double width) { }
        public double Width { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.OrthographicCamera Clone() { throw null; }
        public new System.Windows.Media.Media3D.OrthographicCamera CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class PerspectiveCamera : System.Windows.Media.Media3D.ProjectionCamera
    {
        public static readonly System.Windows.DependencyProperty FieldOfViewProperty;
        public PerspectiveCamera() { }
        public PerspectiveCamera(System.Windows.Media.Media3D.Point3D position, System.Windows.Media.Media3D.Vector3D lookDirection, System.Windows.Media.Media3D.Vector3D upDirection, double fieldOfView) { }
        public double FieldOfView { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.PerspectiveCamera Clone() { throw null; }
        public new System.Windows.Media.Media3D.PerspectiveCamera CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Point3DConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Point3DValueSerializer))]
    public partial struct Point3D : System.IFormattable
    {
        public Point3D(double x, double y, double z) { throw null; }
        public double X { get { throw null; } set { } }
        public double Y { get { throw null; } set { } }
        public double Z { get { throw null; } set { } }
        public static System.Windows.Media.Media3D.Point3D Add(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Media.Media3D.Point3D value) { throw null; }
        public static bool Equals(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Windows.Media.Media3D.Point3D Multiply(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Matrix3D matrix) { throw null; }
        public void Offset(double offsetX, double offsetY, double offsetZ) { }
        public static System.Windows.Media.Media3D.Point3D operator +(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public static bool operator ==(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { throw null; }
        public static explicit operator System.Windows.Media.Media3D.Point4D(System.Windows.Media.Media3D.Point3D point) { throw null; }
        public static explicit operator System.Windows.Media.Media3D.Vector3D(System.Windows.Media.Media3D.Point3D point) { throw null; }
        public static bool operator !=(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { throw null; }
        public static System.Windows.Media.Media3D.Point3D operator *(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Matrix3D matrix) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D operator -(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { throw null; }
        public static System.Windows.Media.Media3D.Point3D operator -(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public static System.Windows.Media.Media3D.Point3D Parse(string source) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D Subtract(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { throw null; }
        public static System.Windows.Media.Media3D.Point3D Subtract(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Point3DCollectionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer))]
    public sealed partial class Point3DCollection : System.Windows.Freezable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Point3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Point3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Point3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable
    {
        public Point3DCollection() { }
        public Point3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Point3D> collection) { }
        public Point3DCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Media3D.Point3D this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Point3D>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Media3D.Point3D value) { }
        public void Clear() { }
        public new System.Windows.Media.Media3D.Point3DCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Media3D.Point3DCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Media3D.Point3D value) { throw null; }
        public void CopyTo(System.Windows.Media.Media3D.Point3D[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.Media3D.Point3DCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Media3D.Point3D value) { throw null; }
        public void Insert(int index, System.Windows.Media.Media3D.Point3D value) { }
        public static System.Windows.Media.Media3D.Point3DCollection Parse(string source) { throw null; }
        public bool Remove(System.Windows.Media.Media3D.Point3D value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Point3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Point3D>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Point3D>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Media3D.Point3D Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class Point3DCollectionConverter : System.ComponentModel.TypeConverter
    {
        public Point3DCollectionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class Point3DConverter : System.ComponentModel.TypeConverter
    {
        public Point3DConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Point4DConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Point4DValueSerializer))]
    public partial struct Point4D : System.IFormattable
    {
        public Point4D(double x, double y, double z, double w) { throw null; }
        public double W { get { throw null; } set { } }
        public double X { get { throw null; } set { } }
        public double Y { get { throw null; } set { } }
        public double Z { get { throw null; } set { } }
        public static System.Windows.Media.Media3D.Point4D Add(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { throw null; }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Media.Media3D.Point4D value) { throw null; }
        public static bool Equals(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Windows.Media.Media3D.Point4D Multiply(System.Windows.Media.Media3D.Point4D point, System.Windows.Media.Media3D.Matrix3D matrix) { throw null; }
        public void Offset(double deltaX, double deltaY, double deltaZ, double deltaW) { }
        public static System.Windows.Media.Media3D.Point4D operator +(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { throw null; }
        public static bool operator ==(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { throw null; }
        public static bool operator !=(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { throw null; }
        public static System.Windows.Media.Media3D.Point4D operator *(System.Windows.Media.Media3D.Point4D point, System.Windows.Media.Media3D.Matrix3D matrix) { throw null; }
        public static System.Windows.Media.Media3D.Point4D operator -(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { throw null; }
        public static System.Windows.Media.Media3D.Point4D Parse(string source) { throw null; }
        public static System.Windows.Media.Media3D.Point4D Subtract(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public sealed partial class Point4DConverter : System.ComponentModel.TypeConverter
    {
        public Point4DConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class PointLight : System.Windows.Media.Media3D.PointLightBase
    {
        public PointLight() { }
        public PointLight(System.Windows.Media.Color diffuseColor, System.Windows.Media.Media3D.Point3D position) { }
        public new System.Windows.Media.Media3D.PointLight Clone() { throw null; }
        public new System.Windows.Media.Media3D.PointLight CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public abstract partial class PointLightBase : System.Windows.Media.Media3D.Light
    {
        internal PointLightBase() { }
        public static readonly System.Windows.DependencyProperty ConstantAttenuationProperty;
        public static readonly System.Windows.DependencyProperty LinearAttenuationProperty;
        public static readonly System.Windows.DependencyProperty PositionProperty;
        public static readonly System.Windows.DependencyProperty QuadraticAttenuationProperty;
        public static readonly System.Windows.DependencyProperty RangeProperty;
        public double ConstantAttenuation { get { throw null; } set { } }
        public double LinearAttenuation { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Point3D Position { get { throw null; } set { } }
        public double QuadraticAttenuation { get { throw null; } set { } }
        public double Range { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.PointLightBase Clone() { throw null; }
        public new System.Windows.Media.Media3D.PointLightBase CloneCurrentValue() { throw null; }
    }
    public abstract partial class ProjectionCamera : System.Windows.Media.Media3D.Camera
    {
        internal ProjectionCamera() { }
        public static readonly System.Windows.DependencyProperty FarPlaneDistanceProperty;
        public static readonly System.Windows.DependencyProperty LookDirectionProperty;
        public static readonly System.Windows.DependencyProperty NearPlaneDistanceProperty;
        public static readonly System.Windows.DependencyProperty PositionProperty;
        public static readonly System.Windows.DependencyProperty UpDirectionProperty;
        public double FarPlaneDistance { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Vector3D LookDirection { get { throw null; } set { } }
        public double NearPlaneDistance { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Point3D Position { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Vector3D UpDirection { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.ProjectionCamera Clone() { throw null; }
        public new System.Windows.Media.Media3D.ProjectionCamera CloneCurrentValue() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.QuaternionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.QuaternionValueSerializer))]
    public partial struct Quaternion : System.IFormattable
    {
        public Quaternion(double x, double y, double z, double w) { throw null; }
        public Quaternion(System.Windows.Media.Media3D.Vector3D axisOfRotation, double angleInDegrees) { throw null; }
        public double Angle { get { throw null; } }
        public System.Windows.Media.Media3D.Vector3D Axis { get { throw null; } }
        public static System.Windows.Media.Media3D.Quaternion Identity { get { throw null; } }
        public bool IsIdentity { get { throw null; } }
        public bool IsNormalized { get { throw null; } }
        public double W { get { throw null; } set { } }
        public double X { get { throw null; } set { } }
        public double Y { get { throw null; } set { } }
        public double Z { get { throw null; } set { } }
        public static System.Windows.Media.Media3D.Quaternion Add(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { throw null; }
        public void Conjugate() { }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Media.Media3D.Quaternion value) { throw null; }
        public static bool Equals(System.Windows.Media.Media3D.Quaternion quaternion1, System.Windows.Media.Media3D.Quaternion quaternion2) { throw null; }
        public override int GetHashCode() { throw null; }
        public void Invert() { }
        public static System.Windows.Media.Media3D.Quaternion Multiply(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { throw null; }
        public void Normalize() { }
        public static System.Windows.Media.Media3D.Quaternion operator +(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { throw null; }
        public static bool operator ==(System.Windows.Media.Media3D.Quaternion quaternion1, System.Windows.Media.Media3D.Quaternion quaternion2) { throw null; }
        public static bool operator !=(System.Windows.Media.Media3D.Quaternion quaternion1, System.Windows.Media.Media3D.Quaternion quaternion2) { throw null; }
        public static System.Windows.Media.Media3D.Quaternion operator *(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { throw null; }
        public static System.Windows.Media.Media3D.Quaternion operator -(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { throw null; }
        public static System.Windows.Media.Media3D.Quaternion Parse(string source) { throw null; }
        public static System.Windows.Media.Media3D.Quaternion Slerp(System.Windows.Media.Media3D.Quaternion from, System.Windows.Media.Media3D.Quaternion to, double t) { throw null; }
        public static System.Windows.Media.Media3D.Quaternion Slerp(System.Windows.Media.Media3D.Quaternion from, System.Windows.Media.Media3D.Quaternion to, double t, bool useShortestPath) { throw null; }
        public static System.Windows.Media.Media3D.Quaternion Subtract(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public sealed partial class QuaternionConverter : System.ComponentModel.TypeConverter
    {
        public QuaternionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class QuaternionRotation3D : System.Windows.Media.Media3D.Rotation3D
    {
        public static readonly System.Windows.DependencyProperty QuaternionProperty;
        public QuaternionRotation3D() { }
        public QuaternionRotation3D(System.Windows.Media.Media3D.Quaternion quaternion) { }
        public System.Windows.Media.Media3D.Quaternion Quaternion { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.QuaternionRotation3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.QuaternionRotation3D CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class RayHitTestParameters : System.Windows.Media.Media3D.HitTestParameters3D
    {
        public RayHitTestParameters(System.Windows.Media.Media3D.Point3D origin, System.Windows.Media.Media3D.Vector3D direction) { }
        public System.Windows.Media.Media3D.Vector3D Direction { get { throw null; } }
        public System.Windows.Media.Media3D.Point3D Origin { get { throw null; } }
    }
    public abstract partial class RayHitTestResult : System.Windows.Media.HitTestResult
    {
        internal RayHitTestResult() { }
        public abstract double DistanceToRayOrigin { get; }
        public System.Windows.Media.Media3D.Model3D ModelHit { get { throw null; } }
        public abstract System.Windows.Media.Media3D.Point3D PointHit { get; }
        public new System.Windows.Media.Media3D.Visual3D VisualHit { get { throw null; } }
    }
    public sealed partial class RayMeshGeometry3DHitTestResult : System.Windows.Media.Media3D.RayHitTestResult
    {
        internal RayMeshGeometry3DHitTestResult() { }
        public override double DistanceToRayOrigin { get { throw null; } }
        public System.Windows.Media.Media3D.MeshGeometry3D MeshHit { get { throw null; } }
        public override System.Windows.Media.Media3D.Point3D PointHit { get { throw null; } }
        public int VertexIndex1 { get { throw null; } }
        public int VertexIndex2 { get { throw null; } }
        public int VertexIndex3 { get { throw null; } }
        public double VertexWeight1 { get { throw null; } }
        public double VertexWeight2 { get { throw null; } }
        public double VertexWeight3 { get { throw null; } }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Rect3DConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Rect3DValueSerializer))]
    public partial struct Rect3D : System.IFormattable
    {
        public Rect3D(double x, double y, double z, double sizeX, double sizeY, double sizeZ) { throw null; }
        public Rect3D(System.Windows.Media.Media3D.Point3D location, System.Windows.Media.Media3D.Size3D size) { throw null; }
        public static System.Windows.Media.Media3D.Rect3D Empty { get { throw null; } }
        public bool IsEmpty { get { throw null; } }
        public System.Windows.Media.Media3D.Point3D Location { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Size3D Size { get { throw null; } set { } }
        public double SizeX { get { throw null; } set { } }
        public double SizeY { get { throw null; } set { } }
        public double SizeZ { get { throw null; } set { } }
        public double X { get { throw null; } set { } }
        public double Y { get { throw null; } set { } }
        public double Z { get { throw null; } set { } }
        public bool Contains(double x, double y, double z) { throw null; }
        public bool Contains(System.Windows.Media.Media3D.Point3D point) { throw null; }
        public bool Contains(System.Windows.Media.Media3D.Rect3D rect) { throw null; }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Media.Media3D.Rect3D value) { throw null; }
        public static bool Equals(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { throw null; }
        public override int GetHashCode() { throw null; }
        public void Intersect(System.Windows.Media.Media3D.Rect3D rect) { }
        public static System.Windows.Media.Media3D.Rect3D Intersect(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { throw null; }
        public bool IntersectsWith(System.Windows.Media.Media3D.Rect3D rect) { throw null; }
        public void Offset(double offsetX, double offsetY, double offsetZ) { }
        public static System.Windows.Media.Media3D.Rect3D Offset(System.Windows.Media.Media3D.Rect3D rect, double offsetX, double offsetY, double offsetZ) { throw null; }
        public static System.Windows.Media.Media3D.Rect3D Offset(System.Windows.Media.Media3D.Rect3D rect, System.Windows.Media.Media3D.Vector3D offsetVector) { throw null; }
        public void Offset(System.Windows.Media.Media3D.Vector3D offsetVector) { }
        public static bool operator ==(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { throw null; }
        public static bool operator !=(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { throw null; }
        public static System.Windows.Media.Media3D.Rect3D Parse(string source) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public void Union(System.Windows.Media.Media3D.Point3D point) { }
        public void Union(System.Windows.Media.Media3D.Rect3D rect) { }
        public static System.Windows.Media.Media3D.Rect3D Union(System.Windows.Media.Media3D.Rect3D rect, System.Windows.Media.Media3D.Point3D point) { throw null; }
        public static System.Windows.Media.Media3D.Rect3D Union(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { throw null; }
    }
    public sealed partial class Rect3DConverter : System.ComponentModel.TypeConverter
    {
        public Rect3DConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class RotateTransform3D : System.Windows.Media.Media3D.AffineTransform3D
    {
        public static readonly System.Windows.DependencyProperty CenterXProperty;
        public static readonly System.Windows.DependencyProperty CenterYProperty;
        public static readonly System.Windows.DependencyProperty CenterZProperty;
        public static readonly System.Windows.DependencyProperty RotationProperty;
        public RotateTransform3D() { }
        public RotateTransform3D(System.Windows.Media.Media3D.Rotation3D rotation) { }
        public RotateTransform3D(System.Windows.Media.Media3D.Rotation3D rotation, double centerX, double centerY, double centerZ) { }
        public RotateTransform3D(System.Windows.Media.Media3D.Rotation3D rotation, System.Windows.Media.Media3D.Point3D center) { }
        public double CenterX { get { throw null; } set { } }
        public double CenterY { get { throw null; } set { } }
        public double CenterZ { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Rotation3D Rotation { get { throw null; } set { } }
        public override System.Windows.Media.Media3D.Matrix3D Value { get { throw null; } }
        public new System.Windows.Media.Media3D.RotateTransform3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.RotateTransform3D CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public abstract partial class Rotation3D : System.Windows.Media.Animation.Animatable, System.IFormattable
    {
        internal Rotation3D() { }
        public static System.Windows.Media.Media3D.Rotation3D Identity { get { throw null; } }
        public new System.Windows.Media.Media3D.Rotation3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.Rotation3D CloneCurrentValue() { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public sealed partial class ScaleTransform3D : System.Windows.Media.Media3D.AffineTransform3D
    {
        public static readonly System.Windows.DependencyProperty CenterXProperty;
        public static readonly System.Windows.DependencyProperty CenterYProperty;
        public static readonly System.Windows.DependencyProperty CenterZProperty;
        public static readonly System.Windows.DependencyProperty ScaleXProperty;
        public static readonly System.Windows.DependencyProperty ScaleYProperty;
        public static readonly System.Windows.DependencyProperty ScaleZProperty;
        public ScaleTransform3D() { }
        public ScaleTransform3D(double scaleX, double scaleY, double scaleZ) { }
        public ScaleTransform3D(double scaleX, double scaleY, double scaleZ, double centerX, double centerY, double centerZ) { }
        public ScaleTransform3D(System.Windows.Media.Media3D.Vector3D scale) { }
        public ScaleTransform3D(System.Windows.Media.Media3D.Vector3D scale, System.Windows.Media.Media3D.Point3D center) { }
        public double CenterX { get { throw null; } set { } }
        public double CenterY { get { throw null; } set { } }
        public double CenterZ { get { throw null; } set { } }
        public double ScaleX { get { throw null; } set { } }
        public double ScaleY { get { throw null; } set { } }
        public double ScaleZ { get { throw null; } set { } }
        public override System.Windows.Media.Media3D.Matrix3D Value { get { throw null; } }
        public new System.Windows.Media.Media3D.ScaleTransform3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.ScaleTransform3D CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Size3DConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Size3DValueSerializer))]
    public partial struct Size3D : System.IFormattable
    {
        public Size3D(double x, double y, double z) { throw null; }
        public static System.Windows.Media.Media3D.Size3D Empty { get { throw null; } }
        public bool IsEmpty { get { throw null; } }
        public double X { get { throw null; } set { } }
        public double Y { get { throw null; } set { } }
        public double Z { get { throw null; } set { } }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Media.Media3D.Size3D value) { throw null; }
        public static bool Equals(System.Windows.Media.Media3D.Size3D size1, System.Windows.Media.Media3D.Size3D size2) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.Media3D.Size3D size1, System.Windows.Media.Media3D.Size3D size2) { throw null; }
        public static explicit operator System.Windows.Media.Media3D.Point3D(System.Windows.Media.Media3D.Size3D size) { throw null; }
        public static explicit operator System.Windows.Media.Media3D.Vector3D(System.Windows.Media.Media3D.Size3D size) { throw null; }
        public static bool operator !=(System.Windows.Media.Media3D.Size3D size1, System.Windows.Media.Media3D.Size3D size2) { throw null; }
        public static System.Windows.Media.Media3D.Size3D Parse(string source) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    public sealed partial class Size3DConverter : System.ComponentModel.TypeConverter
    {
        public Size3DConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class SpecularMaterial : System.Windows.Media.Media3D.Material
    {
        public static readonly System.Windows.DependencyProperty BrushProperty;
        public static readonly System.Windows.DependencyProperty ColorProperty;
        public static readonly System.Windows.DependencyProperty SpecularPowerProperty;
        public SpecularMaterial() { }
        public SpecularMaterial(System.Windows.Media.Brush brush, double specularPower) { }
        public System.Windows.Media.Brush Brush { get { throw null; } set { } }
        public System.Windows.Media.Color Color { get { throw null; } set { } }
        public double SpecularPower { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.SpecularMaterial Clone() { throw null; }
        public new System.Windows.Media.Media3D.SpecularMaterial CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class SpotLight : System.Windows.Media.Media3D.PointLightBase
    {
        public static readonly System.Windows.DependencyProperty DirectionProperty;
        public static readonly System.Windows.DependencyProperty InnerConeAngleProperty;
        public static readonly System.Windows.DependencyProperty OuterConeAngleProperty;
        public SpotLight() { }
        public SpotLight(System.Windows.Media.Color diffuseColor, System.Windows.Media.Media3D.Point3D position, System.Windows.Media.Media3D.Vector3D direction, double outerConeAngle, double innerConeAngle) { }
        public System.Windows.Media.Media3D.Vector3D Direction { get { throw null; } set { } }
        public double InnerConeAngle { get { throw null; } set { } }
        public double OuterConeAngle { get { throw null; } set { } }
        public new System.Windows.Media.Media3D.SpotLight Clone() { throw null; }
        public new System.Windows.Media.Media3D.SpotLight CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    [System.Windows.LocalizabilityAttribute(System.Windows.LocalizationCategory.None, Readability = System.Windows.Readability.Unreadable)]
    public abstract partial class Transform3D : System.Windows.Media.Media3D.GeneralTransform3D
    {
        internal Transform3D() { }
        public static System.Windows.Media.Media3D.Transform3D Identity { get { throw null; } }
        public override System.Windows.Media.Media3D.GeneralTransform3D Inverse { get { throw null; } }
        public abstract bool IsAffine { get; }
        public abstract System.Windows.Media.Media3D.Matrix3D Value { get; }
        public new System.Windows.Media.Media3D.Transform3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.Transform3D CloneCurrentValue() { throw null; }
        public new System.Windows.Media.Media3D.Point3D Transform(System.Windows.Media.Media3D.Point3D point) { throw null; }
        public void Transform(System.Windows.Media.Media3D.Point3D[] points) { }
        public System.Windows.Media.Media3D.Point4D Transform(System.Windows.Media.Media3D.Point4D point) { throw null; }
        public void Transform(System.Windows.Media.Media3D.Point4D[] points) { }
        public System.Windows.Media.Media3D.Vector3D Transform(System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public void Transform(System.Windows.Media.Media3D.Vector3D[] vectors) { }
        public override System.Windows.Media.Media3D.Rect3D TransformBounds(System.Windows.Media.Media3D.Rect3D rect) { throw null; }
        public override bool TryTransform(System.Windows.Media.Media3D.Point3D inPoint, out System.Windows.Media.Media3D.Point3D result) { throw null; }
    }
    public sealed partial class Transform3DCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Transform3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Transform3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Transform3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        public Transform3DCollection() { }
        public Transform3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Transform3D> collection) { }
        public Transform3DCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Media3D.Transform3D this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Transform3D>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Media3D.Transform3D value) { }
        public void Clear() { }
        public new System.Windows.Media.Media3D.Transform3DCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Media3D.Transform3DCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Media3D.Transform3D value) { throw null; }
        public void CopyTo(System.Windows.Media.Media3D.Transform3D[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override bool FreezeCore(bool isChecking) { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.Media3D.Transform3DCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Media3D.Transform3D value) { throw null; }
        public void Insert(int index, System.Windows.Media.Media3D.Transform3D value) { }
        public bool Remove(System.Windows.Media.Media3D.Transform3D value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Transform3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Transform3D>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Transform3D>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Media3D.Transform3D Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class Transform3DGroup : System.Windows.Media.Media3D.Transform3D
    {
        public static readonly System.Windows.DependencyProperty ChildrenProperty;
        public Transform3DGroup() { }
        public System.Windows.Media.Media3D.Transform3DCollection Children { get { throw null; } set { } }
        public override bool IsAffine { get { throw null; } }
        public override System.Windows.Media.Media3D.Matrix3D Value { get { throw null; } }
        public new System.Windows.Media.Media3D.Transform3DGroup Clone() { throw null; }
        public new System.Windows.Media.Media3D.Transform3DGroup CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    public sealed partial class TranslateTransform3D : System.Windows.Media.Media3D.AffineTransform3D
    {
        public static readonly System.Windows.DependencyProperty OffsetXProperty;
        public static readonly System.Windows.DependencyProperty OffsetYProperty;
        public static readonly System.Windows.DependencyProperty OffsetZProperty;
        public TranslateTransform3D() { }
        public TranslateTransform3D(double offsetX, double offsetY, double offsetZ) { }
        public TranslateTransform3D(System.Windows.Media.Media3D.Vector3D offset) { }
        public double OffsetX { get { throw null; } set { } }
        public double OffsetY { get { throw null; } set { } }
        public double OffsetZ { get { throw null; } set { } }
        public override System.Windows.Media.Media3D.Matrix3D Value { get { throw null; } }
        public new System.Windows.Media.Media3D.TranslateTransform3D Clone() { throw null; }
        public new System.Windows.Media.Media3D.TranslateTransform3D CloneCurrentValue() { throw null; }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Vector3DConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Vector3DValueSerializer))]
    public partial struct Vector3D : System.IFormattable
    {
        public Vector3D(double x, double y, double z) { throw null; }
        public double Length { get { throw null; } }
        public double LengthSquared { get { throw null; } }
        public double X { get { throw null; } set { } }
        public double Y { get { throw null; } set { } }
        public double Z { get { throw null; } set { } }
        public static System.Windows.Media.Media3D.Point3D Add(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Point3D point) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D Add(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        public static double AngleBetween(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D CrossProduct(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D Divide(System.Windows.Media.Media3D.Vector3D vector, double scalar) { throw null; }
        public static double DotProduct(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        public override bool Equals(object o) { throw null; }
        public bool Equals(System.Windows.Media.Media3D.Vector3D value) { throw null; }
        public static bool Equals(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        public override int GetHashCode() { throw null; }
        public static System.Windows.Media.Media3D.Vector3D Multiply(double scalar, System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D Multiply(System.Windows.Media.Media3D.Vector3D vector, double scalar) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D Multiply(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Matrix3D matrix) { throw null; }
        public void Negate() { }
        public void Normalize() { }
        public static System.Windows.Media.Media3D.Point3D operator +(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Point3D point) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D operator +(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D operator /(System.Windows.Media.Media3D.Vector3D vector, double scalar) { throw null; }
        public static bool operator ==(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        public static explicit operator System.Windows.Media.Media3D.Point3D(System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public static explicit operator System.Windows.Media.Media3D.Size3D(System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public static bool operator !=(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D operator *(double scalar, System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D operator *(System.Windows.Media.Media3D.Vector3D vector, double scalar) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D operator *(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Matrix3D matrix) { throw null; }
        public static System.Windows.Media.Media3D.Point3D operator -(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Point3D point) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D operator -(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D operator -(System.Windows.Media.Media3D.Vector3D vector) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D Parse(string source) { throw null; }
        public static System.Windows.Media.Media3D.Point3D Subtract(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Point3D point) { throw null; }
        public static System.Windows.Media.Media3D.Vector3D Subtract(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { throw null; }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Vector3DCollectionConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer))]
    public sealed partial class Vector3DCollection : System.Windows.Freezable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Vector3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Vector3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Vector3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable
    {
        public Vector3DCollection() { }
        public Vector3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Vector3D> collection) { }
        public Vector3DCollection(int capacity) { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Media3D.Vector3D this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Vector3D>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Media3D.Vector3D value) { }
        public void Clear() { }
        public new System.Windows.Media.Media3D.Vector3DCollection Clone() { throw null; }
        protected override void CloneCore(System.Windows.Freezable source) { }
        public new System.Windows.Media.Media3D.Vector3DCollection CloneCurrentValue() { throw null; }
        protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
        public bool Contains(System.Windows.Media.Media3D.Vector3D value) { throw null; }
        public void CopyTo(System.Windows.Media.Media3D.Vector3D[] array, int index) { }
        protected override System.Windows.Freezable CreateInstanceCore() { throw null; }
        protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
        protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
        public System.Windows.Media.Media3D.Vector3DCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Media3D.Vector3D value) { throw null; }
        public void Insert(int index, System.Windows.Media.Media3D.Vector3D value) { }
        public static System.Windows.Media.Media3D.Vector3DCollection Parse(string source) { throw null; }
        public bool Remove(System.Windows.Media.Media3D.Vector3D value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Vector3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Vector3D>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        string System.IFormattable.ToString(string format, System.IFormatProvider provider) { throw null; }
        public override string ToString() { throw null; }
        public string ToString(System.IFormatProvider provider) { throw null; }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Vector3D>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Media3D.Vector3D Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
    public sealed partial class Vector3DCollectionConverter : System.ComponentModel.TypeConverter
    {
        public Vector3DCollectionConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public sealed partial class Vector3DConverter : System.ComponentModel.TypeConverter
    {
        public Vector3DConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Visual")]
    public sealed partial class Viewport2DVisual3D : System.Windows.Media.Media3D.Visual3D
    {
        public static readonly System.Windows.DependencyProperty CacheModeProperty;
        public static readonly System.Windows.DependencyProperty GeometryProperty;
        public static readonly System.Windows.DependencyProperty IsVisualHostMaterialProperty;
        public static readonly System.Windows.DependencyProperty MaterialProperty;
        public static readonly System.Windows.DependencyProperty VisualProperty;
        public Viewport2DVisual3D() { }
        public System.Windows.Media.CacheMode CacheMode { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Geometry3D Geometry { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Material Material { get { throw null; } set { } }
        public System.Windows.Media.Visual Visual { get { throw null; } set { } }
        protected override int Visual3DChildrenCount { get { throw null; } }
        public static bool GetIsVisualHostMaterial(System.Windows.Media.Media3D.Material element) { throw null; }
        protected override System.Windows.Media.Media3D.Visual3D GetVisual3DChild(int index) { throw null; }
        public static void SetIsVisualHostMaterial(System.Windows.Media.Media3D.Material element, bool value) { }
    }
    [System.Windows.Markup.ContentPropertyAttribute("Children")]
    public sealed partial class Viewport3DVisual : System.Windows.Media.Visual
    {
        public static readonly System.Windows.DependencyProperty CameraProperty;
        public static readonly System.Windows.DependencyProperty ViewportProperty;
        public Viewport3DVisual() { }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get { throw null; } set { } }
        [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
        public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get { throw null; } set { } }
        public System.Windows.Media.Media3D.Camera Camera { get { throw null; } set { } }
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public System.Windows.Media.Media3D.Visual3DCollection Children { get { throw null; } }
        public System.Windows.Media.Geometry Clip { get { throw null; } set { } }
        public System.Windows.Rect ContentBounds { get { throw null; } }
        public System.Windows.Rect DescendantBounds { get { throw null; } }
        public System.Windows.Vector Offset { get { throw null; } set { } }
        public double Opacity { get { throw null; } set { } }
        public System.Windows.Media.Brush OpacityMask { get { throw null; } set { } }
        public System.Windows.DependencyObject Parent { get { throw null; } }
        public System.Windows.Media.Transform Transform { get { throw null; } set { } }
        public System.Windows.Rect Viewport { get { throw null; } set { } }
        public void HitTest(System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.HitTestParameters hitTestParameters) { }
        public System.Windows.Media.HitTestResult HitTest(System.Windows.Point point) { throw null; }
        protected override System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { throw null; }
    }
    public abstract partial class Visual3D : System.Windows.DependencyObject, System.Windows.Media.Animation.IAnimatable
    {
        internal Visual3D() { }
        public static readonly System.Windows.DependencyProperty TransformProperty;
        public bool HasAnimatedProperties { get { throw null; } }
        public System.Windows.Media.Media3D.Transform3D Transform { get { throw null; } set { } }
        protected virtual int Visual3DChildrenCount { get { throw null; } }
        protected System.Windows.Media.Media3D.Model3D Visual3DModel { get { throw null; } set { } }
        protected void AddVisual3DChild(System.Windows.Media.Media3D.Visual3D child) { }
        public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock) { }
        public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
        public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation) { }
        public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
        public System.Windows.DependencyObject FindCommonVisualAncestor(System.Windows.DependencyObject otherVisual) { throw null; }
        public object GetAnimationBaseValue(System.Windows.DependencyProperty dp) { throw null; }
        protected virtual System.Windows.Media.Media3D.Visual3D GetVisual3DChild(int index) { throw null; }
        public bool IsAncestorOf(System.Windows.DependencyObject descendant) { throw null; }
        public bool IsDescendantOf(System.Windows.DependencyObject ancestor) { throw null; }
        protected internal virtual void OnVisualChildrenChanged(System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved) { }
        protected internal virtual void OnVisualParentChanged(System.Windows.DependencyObject oldParent) { }
        protected void RemoveVisual3DChild(System.Windows.Media.Media3D.Visual3D child) { }
        public System.Windows.Media.Media3D.GeneralTransform3D TransformToAncestor(System.Windows.Media.Media3D.Visual3D ancestor) { throw null; }
        public System.Windows.Media.Media3D.GeneralTransform3DTo2D TransformToAncestor(System.Windows.Media.Visual ancestor) { throw null; }
        public System.Windows.Media.Media3D.GeneralTransform3D TransformToDescendant(System.Windows.Media.Media3D.Visual3D descendant) { throw null; }
    }
    public sealed partial class Visual3DCollection : System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Visual3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Visual3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Visual3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        internal Visual3DCollection() { }
        public int Count { get { throw null; } }
        public System.Windows.Media.Media3D.Visual3D this[int index] { get { throw null; } set { } }
        bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Visual3D>.IsReadOnly { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object System.Collections.IList.this[int index] { get { throw null; } set { } }
        public void Add(System.Windows.Media.Media3D.Visual3D value) { }
        public void Clear() { }
        public bool Contains(System.Windows.Media.Media3D.Visual3D value) { throw null; }
        public void CopyTo(System.Windows.Media.Media3D.Visual3D[] array, int index) { }
        public System.Windows.Media.Media3D.Visual3DCollection.Enumerator GetEnumerator() { throw null; }
        public int IndexOf(System.Windows.Media.Media3D.Visual3D value) { throw null; }
        public void Insert(int index, System.Windows.Media.Media3D.Visual3D value) { }
        public bool Remove(System.Windows.Media.Media3D.Visual3D value) { throw null; }
        public void RemoveAt(int index) { }
        System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Visual3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Visual3D>.GetEnumerator() { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object value) { throw null; }
        bool System.Collections.IList.Contains(object value) { throw null; }
        int System.Collections.IList.IndexOf(object value) { throw null; }
        void System.Collections.IList.Insert(int index, object value) { }
        void System.Collections.IList.Remove(object value) { }
        public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Visual3D>, System.Collections.IEnumerator, System.IDisposable
        {
            public System.Windows.Media.Media3D.Visual3D Current { get { throw null; } }
            object System.Collections.IEnumerator.Current { get { throw null; } }
            public bool MoveNext() { throw null; }
            public void Reset() { }
            void System.IDisposable.Dispose() { }
        }
    }
}
namespace System.Windows.Media.Media3D.Converters
{
    public partial class Matrix3DValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public Matrix3DValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class Point3DCollectionValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public Point3DCollectionValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class Point3DValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public Point3DValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class Point4DValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public Point4DValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class QuaternionValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public QuaternionValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class Rect3DValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public Rect3DValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class Size3DValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public Size3DValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class Vector3DCollectionValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public Vector3DCollectionValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
    public partial class Vector3DValueSerializer : System.Windows.Markup.ValueSerializer
    {
        public Vector3DValueSerializer() { }
        public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
        public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { throw null; }
    }
}
namespace System.Windows.Media.TextFormatting
{
    public partial struct CharacterBufferRange : System.IEquatable<System.Windows.Media.TextFormatting.CharacterBufferRange>
    {
        [System.CLSCompliantAttribute(false)]
        public unsafe CharacterBufferRange(char* unsafeCharacterString, int characterLength) { throw null; }
        public CharacterBufferRange(char[] characterArray, int offsetToFirstChar, int characterLength) { throw null; }
        public CharacterBufferRange(string characterString, int offsetToFirstChar, int characterLength) { throw null; }
        public System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { throw null; } }
        public static System.Windows.Media.TextFormatting.CharacterBufferRange Empty { get { throw null; } }
        public int Length { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.Media.TextFormatting.CharacterBufferRange value) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.TextFormatting.CharacterBufferRange left, System.Windows.Media.TextFormatting.CharacterBufferRange right) { throw null; }
        public static bool operator !=(System.Windows.Media.TextFormatting.CharacterBufferRange left, System.Windows.Media.TextFormatting.CharacterBufferRange right) { throw null; }
    }
    public partial struct CharacterBufferReference : System.IEquatable<System.Windows.Media.TextFormatting.CharacterBufferReference>
    {
        [System.CLSCompliantAttribute(false)]
        public unsafe CharacterBufferReference(char* unsafeCharacterString, int characterLength) { throw null; }
        public CharacterBufferReference(char[] characterArray, int offsetToFirstChar) { throw null; }
        public CharacterBufferReference(string characterString, int offsetToFirstChar) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.Media.TextFormatting.CharacterBufferReference value) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.TextFormatting.CharacterBufferReference left, System.Windows.Media.TextFormatting.CharacterBufferReference right) { throw null; }
        public static bool operator !=(System.Windows.Media.TextFormatting.CharacterBufferReference left, System.Windows.Media.TextFormatting.CharacterBufferReference right) { throw null; }
    }
    public partial struct CharacterHit : System.IEquatable<System.Windows.Media.TextFormatting.CharacterHit>
    {
        public CharacterHit(int firstCharacterIndex, int trailingLength) { throw null; }
        public int FirstCharacterIndex { get { throw null; } }
        public int TrailingLength { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.Media.TextFormatting.CharacterHit obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.TextFormatting.CharacterHit left, System.Windows.Media.TextFormatting.CharacterHit right) { throw null; }
        public static bool operator !=(System.Windows.Media.TextFormatting.CharacterHit left, System.Windows.Media.TextFormatting.CharacterHit right) { throw null; }
    }
    public partial class CultureSpecificCharacterBufferRange
    {
        public CultureSpecificCharacterBufferRange(System.Globalization.CultureInfo culture, System.Windows.Media.TextFormatting.CharacterBufferRange characterBufferRange) { }
        public System.Windows.Media.TextFormatting.CharacterBufferRange CharacterBufferRange { get { throw null; } }
        public System.Globalization.CultureInfo CultureInfo { get { throw null; } }
    }
    public sealed partial class IndexedGlyphRun
    {
        internal IndexedGlyphRun() { }
        public System.Windows.Media.GlyphRun GlyphRun { get { throw null; } }
        public int TextSourceCharacterIndex { get { throw null; } }
        public int TextSourceLength { get { throw null; } }
    }
    [System.FlagsAttribute]
    public enum InvertAxes
    {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
        Both = 3,
    }
    public partial struct MinMaxParagraphWidth : System.IEquatable<System.Windows.Media.TextFormatting.MinMaxParagraphWidth>
    {
        public double MaxWidth { get { throw null; } }
        public double MinWidth { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public bool Equals(System.Windows.Media.TextFormatting.MinMaxParagraphWidth value) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(System.Windows.Media.TextFormatting.MinMaxParagraphWidth left, System.Windows.Media.TextFormatting.MinMaxParagraphWidth right) { throw null; }
        public static bool operator !=(System.Windows.Media.TextFormatting.MinMaxParagraphWidth left, System.Windows.Media.TextFormatting.MinMaxParagraphWidth right) { throw null; }
    }
    public sealed partial class TextBounds
    {
        internal TextBounds() { }
        public System.Windows.FlowDirection FlowDirection { get { throw null; } }
        public System.Windows.Rect Rectangle { get { throw null; } }
        public System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextRunBounds> TextRunBounds { get { throw null; } }
    }
    public partial class TextCharacters : System.Windows.Media.TextFormatting.TextRun
    {
        [System.CLSCompliantAttribute(false)]
        public unsafe TextCharacters(char* unsafeCharacterString, int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
        public TextCharacters(char[] characterArray, int offsetToFirstChar, int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
        public TextCharacters(string characterString, int offsetToFirstChar, int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
        public TextCharacters(string characterString, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
        public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { throw null; } }
        public sealed override int Length { get { throw null; } }
        public sealed override System.Windows.Media.TextFormatting.TextRunProperties Properties { get { throw null; } }
    }
    public sealed partial class TextCollapsedRange
    {
        internal TextCollapsedRange() { }
        public int Length { get { throw null; } }
        public int TextSourceCharacterIndex { get { throw null; } }
        public double Width { get { throw null; } }
    }
    public abstract partial class TextCollapsingProperties
    {
        protected TextCollapsingProperties() { }
        public abstract System.Windows.Media.TextFormatting.TextCollapsingStyle Style { get; }
        public abstract System.Windows.Media.TextFormatting.TextRun Symbol { get; }
        public abstract double Width { get; }
    }
    public enum TextCollapsingStyle
    {
        TrailingCharacter = 0,
        TrailingWord = 1,
    }
    public abstract partial class TextEmbeddedObject : System.Windows.Media.TextFormatting.TextRun
    {
        protected TextEmbeddedObject() { }
        public abstract System.Windows.LineBreakCondition BreakAfter { get; }
        public abstract System.Windows.LineBreakCondition BreakBefore { get; }
        public abstract bool HasFixedSize { get; }
        public abstract System.Windows.Rect ComputeBoundingBox(bool rightToLeft, bool sideways);
        public abstract void Draw(System.Windows.Media.DrawingContext drawingContext, System.Windows.Point origin, bool rightToLeft, bool sideways);
        public abstract System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics Format(double remainingParagraphWidth);
    }
    public partial class TextEmbeddedObjectMetrics
    {
        public TextEmbeddedObjectMetrics(double width, double height, double baseline) { }
        public double Baseline { get { throw null; } }
        public double Height { get { throw null; } }
        public double Width { get { throw null; } }
    }
    public partial class TextEndOfLine : System.Windows.Media.TextFormatting.TextRun
    {
        public TextEndOfLine(int length) { }
        public TextEndOfLine(int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
        public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { throw null; } }
        public sealed override int Length { get { throw null; } }
        public sealed override System.Windows.Media.TextFormatting.TextRunProperties Properties { get { throw null; } }
    }
    public partial class TextEndOfParagraph : System.Windows.Media.TextFormatting.TextEndOfLine
    {
        public TextEndOfParagraph(int length) : base(default(int)) { }
        public TextEndOfParagraph(int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) : base(default(int)) { }
    }
    public partial class TextEndOfSegment : System.Windows.Media.TextFormatting.TextRun
    {
        public TextEndOfSegment(int length) { }
        public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { throw null; } }
        public sealed override int Length { get { throw null; } }
        public sealed override System.Windows.Media.TextFormatting.TextRunProperties Properties { get { throw null; } }
    }
    public abstract partial class TextFormatter : System.IDisposable
    {
        protected TextFormatter() { }
        public static System.Windows.Media.TextFormatting.TextFormatter Create() { throw null; }
        public static System.Windows.Media.TextFormatting.TextFormatter Create(System.Windows.Media.TextFormattingMode textFormattingMode) { throw null; }
        public virtual void Dispose() { }
        public abstract System.Windows.Media.TextFormatting.TextLine FormatLine(System.Windows.Media.TextFormatting.TextSource textSource, int firstCharIndex, double paragraphWidth, System.Windows.Media.TextFormatting.TextParagraphProperties paragraphProperties, System.Windows.Media.TextFormatting.TextLineBreak previousLineBreak);
        public abstract System.Windows.Media.TextFormatting.TextLine FormatLine(System.Windows.Media.TextFormatting.TextSource textSource, int firstCharIndex, double paragraphWidth, System.Windows.Media.TextFormatting.TextParagraphProperties paragraphProperties, System.Windows.Media.TextFormatting.TextLineBreak previousLineBreak, System.Windows.Media.TextFormatting.TextRunCache textRunCache);
        public abstract System.Windows.Media.TextFormatting.MinMaxParagraphWidth FormatMinMaxParagraphWidth(System.Windows.Media.TextFormatting.TextSource textSource, int firstCharIndex, System.Windows.Media.TextFormatting.TextParagraphProperties paragraphProperties);
        public abstract System.Windows.Media.TextFormatting.MinMaxParagraphWidth FormatMinMaxParagraphWidth(System.Windows.Media.TextFormatting.TextSource textSource, int firstCharIndex, System.Windows.Media.TextFormatting.TextParagraphProperties paragraphProperties, System.Windows.Media.TextFormatting.TextRunCache textRunCache);
        internal abstract System.Windows.Media.TextFormatting.TextLine RecreateLine(System.Windows.Media.TextFormatting.TextSource textSource, int firstCharIndex, int lineLength, double paragraphWidth, System.Windows.Media.TextFormatting.TextParagraphProperties paragraphProperties, System.Windows.Media.TextFormatting.TextLineBreak previousLineBreak, System.Windows.Media.TextFormatting.TextRunCache textRunCache);
    }
    public partial class TextHidden : System.Windows.Media.TextFormatting.TextRun
    {
        public TextHidden(int length) { }
        public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { throw null; } }
        public sealed override int Length { get { throw null; } }
        public sealed override System.Windows.Media.TextFormatting.TextRunProperties Properties { get { throw null; } }
    }
    public abstract partial class TextLine : System.IDisposable
    {
        protected TextLine() { }
        protected TextLine(double pixelsPerDip) { }
        public abstract double Baseline { get; }
        public abstract int DependentLength { get; }
        public abstract double Extent { get; }
        public abstract bool HasCollapsed { get; }
        public abstract bool HasOverflowed { get; }
        public abstract double Height { get; }
        public virtual bool IsTruncated { get { throw null; } }
        public abstract int Length { get; }
        public abstract double MarkerBaseline { get; }
        public abstract double MarkerHeight { get; }
        public abstract int NewlineLength { get; }
        public abstract double OverhangAfter { get; }
        public abstract double OverhangLeading { get; }
        public abstract double OverhangTrailing { get; }
        public double PixelsPerDip { get { throw null; } set { } }
        public abstract double Start { get; }
        public abstract double TextBaseline { get; }
        public abstract double TextHeight { get; }
        public abstract int TrailingWhitespaceLength { get; }
        public abstract double Width { get; }
        public abstract double WidthIncludingTrailingWhitespace { get; }
        public abstract System.Windows.Media.TextFormatting.TextLine Collapse(params System.Windows.Media.TextFormatting.TextCollapsingProperties[] collapsingPropertiesList);
        public abstract void Dispose();
        public abstract void Draw(System.Windows.Media.DrawingContext drawingContext, System.Windows.Point origin, System.Windows.Media.TextFormatting.InvertAxes inversion);
        public abstract System.Windows.Media.TextFormatting.CharacterHit GetBackspaceCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit);
        public abstract System.Windows.Media.TextFormatting.CharacterHit GetCharacterHitFromDistance(double distance);
        public abstract double GetDistanceFromCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit);
        public abstract System.Collections.Generic.IEnumerable<System.Windows.Media.TextFormatting.IndexedGlyphRun> GetIndexedGlyphRuns();
        public abstract System.Windows.Media.TextFormatting.CharacterHit GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit);
        public abstract System.Windows.Media.TextFormatting.CharacterHit GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit);
        public abstract System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextBounds> GetTextBounds(int firstTextSourceCharacterIndex, int textLength);
        public abstract System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextCollapsedRange> GetTextCollapsedRanges();
        public abstract System.Windows.Media.TextFormatting.TextLineBreak GetTextLineBreak();
        public abstract System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextSpan<System.Windows.Media.TextFormatting.TextRun>> GetTextRunSpans();
    }
    public sealed partial class TextLineBreak : System.IDisposable
    {
        internal TextLineBreak() { }
        public System.Windows.Media.TextFormatting.TextLineBreak Clone() { throw null; }
        public void Dispose() { }
        ~TextLineBreak() { }
    }
    public abstract partial class TextMarkerProperties
    {
        protected TextMarkerProperties() { }
        public abstract double Offset { get; }
        public abstract System.Windows.Media.TextFormatting.TextSource TextSource { get; }
    }
    public abstract partial class TextModifier : System.Windows.Media.TextFormatting.TextRun
    {
        protected TextModifier() { }
        public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { throw null; } }
        public abstract System.Windows.FlowDirection FlowDirection { get; }
        public abstract bool HasDirectionalEmbedding { get; }
        public abstract System.Windows.Media.TextFormatting.TextRunProperties ModifyProperties(System.Windows.Media.TextFormatting.TextRunProperties properties);
    }
    public abstract partial class TextParagraphProperties
    {
        protected TextParagraphProperties() { }
        public virtual bool AlwaysCollapsible { get { throw null; } }
        public virtual double DefaultIncrementalTab { get { throw null; } }
        public abstract System.Windows.Media.TextFormatting.TextRunProperties DefaultTextRunProperties { get; }
        public abstract bool FirstLineInParagraph { get; }
        public abstract System.Windows.FlowDirection FlowDirection { get; }
        public abstract double Indent { get; }
        public abstract double LineHeight { get; }
        public virtual double ParagraphIndent { get { throw null; } }
        public virtual System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextTabProperties> Tabs { get { throw null; } }
        public abstract System.Windows.TextAlignment TextAlignment { get; }
        public virtual System.Windows.TextDecorationCollection TextDecorations { get { throw null; } }
        public abstract System.Windows.Media.TextFormatting.TextMarkerProperties TextMarkerProperties { get; }
        public abstract System.Windows.TextWrapping TextWrapping { get; }
    }
    public abstract partial class TextRun
    {
        protected TextRun() { }
        public abstract System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get; }
        public abstract int Length { get; }
        public abstract System.Windows.Media.TextFormatting.TextRunProperties Properties { get; }
    }
    public sealed partial class TextRunBounds
    {
        internal TextRunBounds() { }
        public int Length { get { throw null; } }
        public System.Windows.Rect Rectangle { get { throw null; } }
        public System.Windows.Media.TextFormatting.TextRun TextRun { get { throw null; } }
        public int TextSourceCharacterIndex { get { throw null; } }
    }
    public sealed partial class TextRunCache
    {
        public TextRunCache() { }
        public void Change(int textSourceCharacterIndex, int addition, int removal) { }
        public void Invalidate() { }
    }
    public abstract partial class TextRunProperties
    {
        protected TextRunProperties() { }
        public abstract System.Windows.Media.Brush BackgroundBrush { get; }
        public virtual System.Windows.BaselineAlignment BaselineAlignment { get { throw null; } }
        public abstract System.Globalization.CultureInfo CultureInfo { get; }
        public abstract double FontHintingEmSize { get; }
        public abstract double FontRenderingEmSize { get; }
        public abstract System.Windows.Media.Brush ForegroundBrush { get; }
        public virtual System.Windows.Media.NumberSubstitution NumberSubstitution { get { throw null; } }
        public double PixelsPerDip { get { throw null; } set { } }
        public abstract System.Windows.TextDecorationCollection TextDecorations { get; }
        public abstract System.Windows.Media.TextEffectCollection TextEffects { get; }
        public abstract System.Windows.Media.Typeface Typeface { get; }
        public virtual System.Windows.Media.TextFormatting.TextRunTypographyProperties TypographyProperties { get { throw null; } }
    }
    public abstract partial class TextRunTypographyProperties
    {
        protected TextRunTypographyProperties() { }
        public abstract int AnnotationAlternates { get; }
        public abstract System.Windows.FontCapitals Capitals { get; }
        public abstract bool CapitalSpacing { get; }
        public abstract bool CaseSensitiveForms { get; }
        public abstract bool ContextualAlternates { get; }
        public abstract bool ContextualLigatures { get; }
        public abstract int ContextualSwashes { get; }
        public abstract bool DiscretionaryLigatures { get; }
        public abstract bool EastAsianExpertForms { get; }
        public abstract System.Windows.FontEastAsianLanguage EastAsianLanguage { get; }
        public abstract System.Windows.FontEastAsianWidths EastAsianWidths { get; }
        public abstract System.Windows.FontFraction Fraction { get; }
        public abstract bool HistoricalForms { get; }
        public abstract bool HistoricalLigatures { get; }
        public abstract bool Kerning { get; }
        public abstract bool MathematicalGreek { get; }
        public abstract System.Windows.FontNumeralAlignment NumeralAlignment { get; }
        public abstract System.Windows.FontNumeralStyle NumeralStyle { get; }
        public abstract bool SlashedZero { get; }
        public abstract bool StandardLigatures { get; }
        public abstract int StandardSwashes { get; }
        public abstract int StylisticAlternates { get; }
        public abstract bool StylisticSet1 { get; }
        public abstract bool StylisticSet10 { get; }
        public abstract bool StylisticSet11 { get; }
        public abstract bool StylisticSet12 { get; }
        public abstract bool StylisticSet13 { get; }
        public abstract bool StylisticSet14 { get; }
        public abstract bool StylisticSet15 { get; }
        public abstract bool StylisticSet16 { get; }
        public abstract bool StylisticSet17 { get; }
        public abstract bool StylisticSet18 { get; }
        public abstract bool StylisticSet19 { get; }
        public abstract bool StylisticSet2 { get; }
        public abstract bool StylisticSet20 { get; }
        public abstract bool StylisticSet3 { get; }
        public abstract bool StylisticSet4 { get; }
        public abstract bool StylisticSet5 { get; }
        public abstract bool StylisticSet6 { get; }
        public abstract bool StylisticSet7 { get; }
        public abstract bool StylisticSet8 { get; }
        public abstract bool StylisticSet9 { get; }
        public abstract System.Windows.FontVariants Variants { get; }
        protected void OnPropertiesChanged() { }
    }
    public partial class TextSimpleMarkerProperties : System.Windows.Media.TextFormatting.TextMarkerProperties
    {
        public TextSimpleMarkerProperties(System.Windows.TextMarkerStyle style, double offset, int autoNumberingIndex, System.Windows.Media.TextFormatting.TextParagraphProperties textParagraphProperties) { }
        public sealed override double Offset { get { throw null; } }
        public sealed override System.Windows.Media.TextFormatting.TextSource TextSource { get { throw null; } }
    }
    public abstract partial class TextSource
    {
        protected TextSource() { }
        public double PixelsPerDip { get { throw null; } set { } }
        public abstract System.Windows.Media.TextFormatting.TextSpan<System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange> GetPrecedingText(int textSourceCharacterIndexLimit);
        public abstract int GetTextEffectCharacterIndexFromTextSourceCharacterIndex(int textSourceCharacterIndex);
        public abstract System.Windows.Media.TextFormatting.TextRun GetTextRun(int textSourceCharacterIndex);
    }
    public partial class TextSpan<T>
    {
        public TextSpan(int length, T value) { }
        public int Length { get { throw null; } }
        public T Value { get { throw null; } }
    }
    public enum TextTabAlignment
    {
        Left = 0,
        Center = 1,
        Right = 2,
        Character = 3,
    }
    public partial class TextTabProperties
    {
        public TextTabProperties(System.Windows.Media.TextFormatting.TextTabAlignment alignment, double location, int tabLeader, int aligningChar) { }
        public int AligningCharacter { get { throw null; } }
        public System.Windows.Media.TextFormatting.TextTabAlignment Alignment { get { throw null; } }
        public double Location { get { throw null; } }
        public int TabLeader { get { throw null; } }
    }
    public partial class TextTrailingCharacterEllipsis : System.Windows.Media.TextFormatting.TextCollapsingProperties
    {
        public TextTrailingCharacterEllipsis(double width, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
        public sealed override System.Windows.Media.TextFormatting.TextCollapsingStyle Style { get { throw null; } }
        public sealed override System.Windows.Media.TextFormatting.TextRun Symbol { get { throw null; } }
        public sealed override double Width { get { throw null; } }
    }
    public partial class TextTrailingWordEllipsis : System.Windows.Media.TextFormatting.TextCollapsingProperties
    {
        public TextTrailingWordEllipsis(double width, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
        public sealed override System.Windows.Media.TextFormatting.TextCollapsingStyle Style { get { throw null; } }
        public sealed override System.Windows.Media.TextFormatting.TextRun Symbol { get { throw null; } }
        public sealed override double Width { get { throw null; } }
    }
}
namespace System.Windows.Navigation
{
    public static partial class BaseUriHelper
    {
        public static readonly System.Windows.DependencyProperty BaseUriProperty;
        public static System.Uri GetBaseUri(System.Windows.DependencyObject element) { throw null; }
    }
}
namespace System.Windows.Resources
{
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly, AllowMultiple = true)]
    public sealed partial class AssemblyAssociatedContentFileAttribute : System.Attribute
    {
        public AssemblyAssociatedContentFileAttribute(string relativeContentFilePath) { }
        public string RelativeContentFilePath { get { throw null; } }
    }
}
