<Project>
  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>
  <PropertyGroup>
    <!-- Get the Visual Studio version: -->
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">16.0</VisualStudioVersion>
    <!-- Keep the next element all on one line: -->
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <!-- This is what will cause the templates to be transformed when the project is built (default is false) -->
    <TransformOnBuild>true</TransformOnBuild>
    <!-- Set to false to transform files even if the output appears to be up-to-date (default is true)  -->
    <TransformOutOfDateOnly>false</TransformOutOfDateOnly>
  </PropertyGroup>
  <Import Project="$(VSToolsPath)\TextTemplating\Microsoft.TextTemplating.targets" />
  <!-- ugly workaround. can be removed once the below issue is addressed: -->
  <!-- https://github.com/dotnet/xliff-tasks/issues/75 -->

  <UsingTask TaskName="Microsoft.VisualStudio.TextTemplating.Build.Tasks.TransformTemplates" AssemblyFile="$(VSToolsPath)\TextTemplating\Microsoft.TextTemplating.Build.Tasks.dll" />

  <Target Name="ExecuteTransformations" DependsOnTargets="CreateT4ItemLists">

    <Microsoft.VisualStudio.TextTemplating.Build.Tasks.TransformTemplates
      TemplatesToProcess="@(T4TransformInputs)"
      IncludeFolders="$(IncludeFolders)"
      DirectiveProcessors="@(DirectiveProcessor)"
      AssemblyReferences="@(T4AssemblyReference)"
      ReferencePaths="@(T4ReferencePath)"
      TrackerLogDirectory="$(TrackerLogDirectory)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="$(TransformOutOfDateOnly)"
      OverwriteReadOnlyOutputFiles="$(OverwriteReadOnlyOutputFiles)"
      ParameterValues="@(T4ParameterValues)"
      >

      <!-- List of output files that were generated by the task.
      If a read-only version of the file was overwritten by the task, the
      task item for that file will have the following metadata entry:
        <ReadOnlyFileOverwritten>true<ReadOnlyFileOverwritten>
      -->
      <Output ItemName="GeneratedFiles" TaskParameter="GeneratedFiles"/>

      <!-- List of output files that could not be generated because the file file
      already exists and is read-only. -->
      <Output ItemName="NonGeneratedFiles" TaskParameter="NonGeneratedFiles"/>
    </Microsoft.VisualStudio.TextTemplating.Build.Tasks.TransformTemplates>

    <PropertyGroup>
      <!-- Unless another namespace has been specified, use the project namespace as the
      default namespace from pre-processed files. -->
      <PreprocessTemplateDefaultNamespace Condition=" $(PreprocessTemplateDefaultNamespace)=='' ">$(RootNamespace)</PreprocessTemplateDefaultNamespace>
    </PropertyGroup>

    <PreprocessTemplates
      DefaultNamespace="$(PreprocessTemplateDefaultNamespace)"
      TemplatesToProcess="@(T4PreprocessInputs)"
      IncludeFolders="$(IncludeFolders)"
      DirectiveProcessors="@(DirectiveProcessor)"
      AssemblyReferences="@(T4AssemblyReference)"
      ReferencePaths="@(T4ReferencePath)"
      TrackerLogDirectory="$(TrackerLogDirectory)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="$(TransformOutOfDateOnly)"
      OverwriteReadOnlyOutputFiles="$(OverwriteReadOnlyOutputFiles)"
      ParameterValues="@(T4ParameterValues)"
      >

      <!-- List of output files that were generated by the task.
      If a read-only version of the file was overwritten by the task, the
      task item for that file will have the following metadata entry:
        <ReadOnlyFileOverwritten>true<ReadOnlyFileOverwritten>
      -->
      <Output ItemName="GeneratedFiles" TaskParameter="GeneratedFiles"/>

      <!-- List of output files that could not be generated because the file file
      already exists and is read-only. -->
      <Output ItemName="NonGeneratedFiles" TaskParameter="NonGeneratedFiles"/>

      <!-- List of assemblies that are required to run the processed code. -->
      <Output ItemName="T4RequiredAssemblies" TaskParameter="RequiredAssemblies"/>
    </PreprocessTemplates>
  </Target>
  <!-- End workaround -->
</Project>