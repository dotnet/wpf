

<!--=================================================================
Licensed to the .NET Foundation under one or more agreements.
The .NET Foundation licenses this file to you under the MIT license.
See the LICENSE file in the project root for more information.

This file was generated from individual xaml files found
   in wcp\themes\xaml\, please do not edit it directly.

To generate this file, bcz in Wcp\Themes\Generator and copy
   the generated theme files from the output directory to
   the corresponding themes\ folder.

To automatically copy the files, set the environment variable
   set THEMEXAML_AUTOUPDATE=1

==================================================================-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:classic="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"

                    xmlns:controls="clr-namespace:System.Windows.Controls"
                    xmlns:ribbon="clr-namespace:System.Windows.Controls.Ribbon"
                    xmlns:primitives="clr-namespace:System.Windows.Controls.Ribbon.Primitives"
                    xmlns:shell="clr-namespace:System.Windows.Shell;assembly=PresentationFramework"
                    xmlns:windows="clr-namespace:System.Windows;assembly=PresentationFramework"
                    xmlns:coreInternal="clr-namespace:MS.Internal;assembly=PresentationCore"







                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <!--=================================================================
            RibbonControl
        ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonControl}" TargetType="{x:Type ribbon:RibbonControl}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MinWidth.RibbonControlLengthUnitType}" Value="Pixel">
                <Setter Property="MinWidth" Value="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MinWidth.Value}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MaxWidth.RibbonControlLengthUnitType}" Value="Pixel">
                <Setter Property="MaxWidth" Value="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.MaxWidth.Value}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.RibbonControlLengthUnitType}" Value="Pixel">
                <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.Value}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.RibbonControlLengthUnitType}" Value="Auto">
                <Setter Property="Width" Value="Auto"/>
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonControl}">
                    <ribbon:RibbonContentPresenter x:Name="PART_ContentPresenter" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
   <!--=================================================================
                RibbonContextualTabGroupItemsControl
            ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonContextualTabGroupItemsControl}"  TargetType="{x:Type ribbon:RibbonContextualTabGroupItemsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonContextualTabGroupItemsControl}">
                    <Border Background="{TemplateBinding Background}">
                        <ItemsPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--=================================================================
                RibbonContextualTabGroup
        ==================================================================-->

    <RadialGradientBrush x:Key="&#272;" GradientOrigin="0.5,1" Center="0.5,1" RadiusY="1">
        <GradientStop Offset="0" Color="#FFFFFFFF" />
        <GradientStop Offset="1" Color="#77FFFFFF"/>
    </RadialGradientBrush>
    
    <Style x:Key="{x:Type ribbon:RibbonContextualTabGroup}" TargetType="{x:Type ribbon:RibbonContextualTabGroup}">

        <Setter Property="Height" Value="{Binding Path=(SystemParameters.WindowCaptionHeight)}" />



        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonContextualTabGroup}">
                <ControlTemplate.Resources>
                    <DataTemplate DataType="{x:Type system:String}">
                        <TextBlock Text="{TemplateBinding Content}" TextTrimming="CharacterEllipsis"/>
                    </DataTemplate>
                </ControlTemplate.Resources>
                <Border x:Name="OuterBorder"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2,2,0,0"

                        RenderOptions.ClearTypeHint="Enabled"

                        >
                        <Border x:Name="InnerBorder"
                                Background="{StaticResource &#272;}"
                                BorderBrush="{TemplateBinding Background}"
                                BorderThickness="1,1,1,2"
                                CornerRadius="2,2,0,0">
                            <ContentPresenter ContentSource="Header" VerticalAlignment="Center" Margin="2,0,2,0"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="InnerBorder" Property="BorderThickness" Value="2,2,2,3" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

  

    <!--=================================================================
            RibbonSeparator
        =================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonSeparator}" TargetType="{x:Type ribbon:RibbonSeparator}">
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                    <Border x:Name="MainBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                            <TextBlock x:Name="Text" 
                                       Text="{TemplateBinding Label}" />
                    </Border>
                    <ControlTemplate.Triggers>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Label" Value="{x:Null}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                            <StackPanel>
                                <Line x:Name="Line"
                                      X1="0" 
                                      Y1="0" 
                                      X2="1" 
                                      Y2="0" 
                                      Stroke="{TemplateBinding BorderBrush}" 
                                      StrokeThickness="1" 
                                      Stretch="Fill" />
                                <Line x:Name="HighlightLine"
                                      X1="0" 
                                      Y1="0" 
                                      X2="1" 
                                      Y2="0"
                                      Stroke="White" 
                                      StrokeThickness="1"
                                      Stretch="Fill" />
                            </StackPanel>
                            <ControlTemplate.Triggers>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                    <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" />
                                    <Setter TargetName="HighlightLine" Property="Stroke" Value="Transparent" />
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--=================================================================
            Shared Theme Resources
        ==================================================================-->

<!-- Ribbon Visual States -->
<LinearGradientBrush x:Key="&#219;" StartPoint="0,0" EndPoint="0,1" >
    <GradientStop Offset="0" Color="#FFFEFBF4" />
    <GradientStop Offset="0.19" Color="#FFFDE7CE" />
    <GradientStop Offset="0.39" Color="#FFFDDEB8" />
    <GradientStop Offset="0.39" Color="#FFFFCE6B" />
    <GradientStop Offset="0.79" Color="#FFFFDE9A" />
    <GradientStop Offset="1" Color="#FFFFEBAA" />
</LinearGradientBrush>
<SolidColorBrush x:Key="&#218;" Color="#FFFFB700" />
<LinearGradientBrush x:Key="&#221;" StartPoint="0,0" EndPoint="0,1" >
    <GradientStop Offset="0" Color="#FFE3C085" />
    <GradientStop Offset="0.19" Color="#FFF4CC89" />
    <GradientStop Offset="0.36" Color="#FFF5C777" />
    <GradientStop Offset="0.36" Color="#FFF5BB56" />
    <GradientStop Offset="0.79" Color="#FFF4CE9A" />
    <GradientStop Offset="1" Color="#FFF3E28D" />
</LinearGradientBrush>
<SolidColorBrush x:Key="&#220;" Color="#FFC29B29" />
<LinearGradientBrush x:Key="&#222;" StartPoint="0,0" EndPoint="0,1" >
    <GradientStop Offset="0" Color="#FFFFDCA0" />
    <GradientStop Offset="0.18" Color="#FFFFD692" />
    <GradientStop Offset="0.39" Color="#FFFFC45D" />
    <GradientStop Offset="1" Color="#FFFFD178" />
</LinearGradientBrush>

<SolidColorBrush x:Key="&#235;" Color="#80FFFFFF"  />
<SolidColorBrush x:Key="&#237;" Color="#B8FFFFFF" />
<SolidColorBrush x:Key="&#265;" Color="#EEFFFFFF"  />

<!-- We use this brush to achieve the exact same gray foreground color for disabled text as Win7 ribbon. 
     However, since this is not from SystemColors, we still need to use triggers to set the disabled
     foreground color to SystemColors.GrayTextBrushKey when in high-contrast. -->
<SolidColorBrush x:Key="&#203;" Color="#FF9E9E9E" />

<!--RibbonToggleButton and RibbonRadioButton-->

<LinearGradientBrush x:Key="&#258;" StartPoint="0,0" EndPoint="0,1" >
    <GradientStop Offset="0" Color="#FFE7CBAD" />
    <GradientStop Offset="0.1" Color="#FFF7D7B5" />
    <GradientStop Offset="0.36" Color="#FFFFD38C" />
    <GradientStop Offset="0.36" Color="#FFFFC75A" />
    <GradientStop Offset="1" Color="#FFFFEFA5" />
</LinearGradientBrush>

<!-- RibbonGalleryItem and RibbonToggleButton -->
    
<LinearGradientBrush x:Key="&#271;" StartPoint="0,0" EndPoint="0,1" >
    <GradientStop Offset="0" Color="#40FFFEFE" />
    <GradientStop Offset="0.39" Color="#40FFFEFE" />
    <GradientStop Offset="0.39" Color="#20FFCE68" />
    <GradientStop Offset="0.69" Color="#20FFCE68" />
    <GradientStop Offset="1" Color="#10FFFFFF" />
</LinearGradientBrush>

<!-- RibbonComboBox -->
<system:Double x:Key="&#261;">20.0</system:Double>

<system:Double x:Key="&#262;">22.0</system:Double>

<!-- Ribbon, RibbonGroup -->
<system:Double x:Key="&#223;">91.0</system:Double>
<system:Double x:Key="&#225;">94.0</system:Double>

<!-- RibbonToolTip -->
<system:Int32 x:Key="&#205;">900</system:Int32>
<system:Int32 x:Key="&#206;">20000</system:Int32>
<system:Int32 x:Key="&#207;">0</system:Int32>

<!-- RibbonToolTip, RibbonMenuItem -->
<Color x:Key="&#214;">#71000000</Color>

<BooleanToVisibilityConverter x:Key="&#224;" />

<!-- Generic Ribbon Resources -->
<Geometry x:Key="&#208;">M 0 0 L 2.5 3 L 5 0 Z</Geometry>
<Geometry x:Key="&#239;">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
<Geometry x:Key="&#241;">M10,1.2L4.5,7.3 1.5,5 1.5,7.5 4.5,10 4.5,10 10,4Z</Geometry>
<Geometry x:Key="&#240;">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

<!-- RibbonDropDownButton -->
<SolidColorBrush x:Key="&#209;" Color="#F0FFFFFF" />
    
<!-- DropDown controls -->
<SolidColorBrush x:Key="&#210;" Color="#FFE5EFF9" />
<SolidColorBrush x:Key="&#295;" Color="#FF6C747D" />
<DrawingBrush x:Key="&#296;"
              Viewbox="0,0,3,3"
              Viewport="0,0,3,3"
              TileMode="Tile"
              ViewportUnits="Absolute"
              ViewboxUnits="Absolute">
    <DrawingBrush.Drawing>
        <DrawingGroup>
            <DrawingGroup.Children>
                <GeometryDrawing Brush="{StaticResource &#295;}"
                                 Geometry="M 0,0 L 2,0 L 2,2 L 0,2 z "/>
            </DrawingGroup.Children>
        </DrawingGroup>
    </DrawingBrush.Drawing>
</DrawingBrush>

<!-- Used in DropDown controls that can resize both Horizontally and Vertically -->
<Style x:Key="&#211;" TargetType="{x:Type Thumb}">
    <Setter Property="Width" Value="11"/>
    <Setter Property="Height" Value="11"/>
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="Cursor" Value="SizeNWSE"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
                <Border Background="Transparent">
                    <Path Margin="0,0,2,2" 
                          Data="M 9,0 L 11,0 L 11,11 L 0,11 L 0,9 L 3,9 L 3,6 L 6,6 L 6,3 L 9,3 z"
                          Fill="{StaticResource &#296;}">
                    </Path>
                </Border>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Style.Triggers>
        <Trigger Property="FlowDirection" Value="RightToLeft">
            <Setter Property="Cursor" Value="SizeNESW" />
        </Trigger>
    </Style.Triggers>
</Style>
    
<Style x:Key="&#243;" TargetType="{x:Type Thumb}">
    <Setter Property="Width" Value="11"/>
    <Setter Property="Height" Value="11"/>
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Cursor" Value="SizeNESW"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
                <Border Background="Transparent">
                    <Path Margin="2,0,0,2" 
                          Data="M 0,0 L 2,0 L 2,3 L 5,3 L 5,6 L 8,6 L 8,9 L 11,9 L 11,11 L 0,11 z"
                          Fill="{StaticResource &#296;}">
                    </Path>
                </Border>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Style.Triggers>
        <Trigger Property="FlowDirection" Value="RightToLeft">
            <Setter Property="Cursor" Value="SizeNWSE" />
        </Trigger>
    </Style.Triggers>
</Style>
    
<Style x:Key="&#213;" TargetType="{x:Type Thumb}">
    <Setter Property="Width" Value="11"/>
    <Setter Property="Height" Value="11"/>
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Right" />
    <Setter Property="Cursor" Value="SizeNESW"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
                <Border Background="Transparent">
                    <Path Margin="0,2,2,0"
                          Data="M 0,0 L 0,3 L 3,3 L 3,6 L 6,6 L 6,9 L 9,9 L 9,11 L 11,11 L 11,0 z"
                          Fill="{StaticResource &#296;}">
                    </Path>
                </Border>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Style.Triggers>
        <Trigger Property="FlowDirection" Value="RightToLeft">
            <Setter Property="Cursor" Value="SizeNWSE" />
        </Trigger>
    </Style.Triggers>
</Style>

<!-- Used in DropDown controls that can resize only Vertically -->
<Style x:Key="&#212;" TargetType="{x:Type Thumb}">
    <Setter Property="Height" Value="11"/>
    <Setter Property="Cursor" Value="SizeNS"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
                <Border Background="Transparent">
                    <Path Margin="0,0,2,2" HorizontalAlignment="Center" VerticalAlignment="Bottom" Fill="{StaticResource &#296;}">
                        <Path.Data>
                            <RectangleGeometry Rect="0,0,11,3" />
                        </Path.Data>
                    </Path>
                </Border>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>


<!--=================================================================
            RibbonTabHeader
    ==================================================================-->
<SolidColorBrush x:Key="&#299;" Color="#88FFFFFF" />

<LinearGradientBrush x:Key="&#300;" StartPoint="0,0" EndPoint="0,1" >
    <GradientStop Color="#AAFFFFFF" Offset="0" />
    <GradientStop Color="#FFFFFF" Offset="1.0" />
</LinearGradientBrush>

<Style x:Key="{x:Type ribbon:RibbonTabHeader}"  TargetType="{x:Type ribbon:RibbonTabHeader}">
    <Setter Property="Margin" Value="0,1,0,0" />
    <Setter Property="Padding" Value="9,1,9,0" />
    <Setter Property="MinHeight" Value="22"/>
    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.Background}" />
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
    <Setter Property="CheckedBackground" Value="{StaticResource &#300;}"/>
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}"/>
    <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonTabHeader}">
                <Grid x:Name="MainGrid"
                      SnapsToDevicePixels="True">
                    <Border x:Name="PART_OuterBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1,1,1,0"
                            CornerRadius="3,3,0,0"
                            Margin="2,-1,2.5,0">
                        <Border x:Name="InnerBorder"

                                RenderOptions.ClearTypeHint="Enabled"

                                BorderThickness="1,1,1,0"
                                CornerRadius="3,3,0,0"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter ContentSource="Content" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        </Border>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                    </Trigger>

                    <!-- Put this first so we don't override more specific High Contrast triggers -->

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                        <Setter TargetName="PART_OuterBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="PART_OuterBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                    </DataTrigger>

                    <!-- Selected border -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="False" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="False" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{x:Null}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{x:Null}" />
                    </MultiDataTrigger>
                    
                    <!-- HighContrast border -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{x:Null}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="False" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{x:Null}" />
                    </MultiDataTrigger>
                    
                    <!-- MouseOver border-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    
                    <!-- Focused border -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    
                    <!-- Contextual Border -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />                            
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ContextualTabGroup.Background}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ContextualTabGroup.Background}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ContextualTabGroup.Background}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="False" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ContextualTabGroup.Background}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsContextualTab}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="False" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ContextualTabGroup.Background}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#299;}" />
                    </MultiDataTrigger>
                    
                    <!-- Highcontrast background -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="False"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </MultiDataTrigger>
                    
                    <!-- Selected Background-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                    </MultiDataTrigger>
                    
                    <!-- Explicit Default Background-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="Background" Value="Transparent" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="Background" Value="Transparent" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsMinimized}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.IsDropDownOpen}" Value="False"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                    </MultiDataTrigger>
                    
                    <!-- Foreground Triggers -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsRibbonTabSelected}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>

                    <!-- Other Triggers -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding ElementName=MainGrid, Path=IsMouseOver}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Style.Triggers>
        <Trigger Property="IsRibbonTabSelected" Value="True">
            <Setter Property="TabIndex" Value="-1"/>
        </Trigger>
    </Style.Triggers>
</Style>

<!--=================================================================
            HorizontalScrollViewer
    ==================================================================-->

<Style x:Key="&#301;" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="Width" Value="14"/>
    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ribbon:RibbonControlService.Ribbon).Background}"/>
    <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ribbon:RibbonControlService.Ribbon).BorderBrush}"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Border Name="OuterBorder" CornerRadius="3,0,0,3" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                    <Border Name="InnerBorder" CornerRadius="3,0,0,3" Background="#80FFFFFF">
                        <Path Name="GlyphPath" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="#808080" Data="M 4,0 L 0,3.5 L 4,7"/>
                    </Border>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="HorizontalContentAlignment" Value="Right">
                        <Setter TargetName="GlyphPath" Property="Data" Value="M 0,0 L 4,3.5 L 0,7"/>
                        <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0,3,3,0"/>
                        <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0,3,3,0"/>
                    </Trigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ribbon:RibbonControlService.Ribbon).MouseOverBackground}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=(ribbon:RibbonControlService.Ribbon).PressedBackground}"/>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                        <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0"/>
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0"/>
                        <Setter TargetName="InnerBorder" Property="Background" Value="Transparent"/>
                        <Setter TargetName="GlyphPath" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

<primitives:RibbonScrollButtonVisibilityConverter x:Key="&#302;"/>

<ControlTemplate x:Key="&#303;" TargetType="{x:Type ScrollViewer}">
    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <ScrollContentPresenter  Margin="{TemplateBinding Padding}" x:Name="PART_ScrollContentPresenter" Grid.ColumnSpan="3"  Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" />
        <RepeatButton
                                      Style="{StaticResource &#301;}"
                                      HorizontalContentAlignment="Left"
                                      Grid.Column="0"
                                      Command="{x:Static ScrollBar.LineLeftCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="false">
            <RepeatButton.Visibility>
                <MultiBinding FallbackValue="Visibility.Collapsed"
                                              Converter="{StaticResource &#302;}"
                                              ConverterParameter="0">
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ComputedHorizontalScrollBarVisibility"/>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="HorizontalOffset"/>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ExtentWidth"/>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ViewportWidth"/>
                </MultiBinding>
            </RepeatButton.Visibility>
        </RepeatButton>
        <RepeatButton
                                      Style="{StaticResource &#301;}"
                                      HorizontalContentAlignment="Right"
                                      Grid.Column="2"
                                      Command="{x:Static ScrollBar.LineRightCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="false">
            <RepeatButton.Visibility>
                <MultiBinding FallbackValue="Visibility.Collapsed"
                                              Converter="{StaticResource &#302;}"
                                              ConverterParameter="100">
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ComputedHorizontalScrollBarVisibility"/>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="HorizontalOffset"/>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ExtentWidth"/>
                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ViewportWidth"/>
                </MultiBinding>
            </RepeatButton.Visibility>
        </RepeatButton>
    </Grid>
</ControlTemplate>

<Style x:Key="&#298;"
       TargetType="{x:Type ScrollViewer}"
       BasedOn="{x:Null}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
    <Setter Property="CanContentScroll" Value="True"/>
    <Setter Property="Template" Value="{StaticResource &#303;}"/>
</Style>
 

    <!--=================================================================
        RibbonToggleButton
        ==================================================================-->

    <ControlTemplate x:Key="&#294;" TargetType="{x:Type ribbon:RibbonToggleButton}">
        <Grid x:Name="MainGrid"
              SnapsToDevicePixels="True">
            <Border x:Name="OuterBorder"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}" />
            <Border x:Name="MiddleBorder"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    Background="Transparent"
                    BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding BorderThickness}" >
                <Border x:Name="InnerBorder"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                    <StackPanel x:Name="StackPanel"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <Image x:Name="PART_Image"
                               Source="{TemplateBinding LargeImageSource}"
                               Width="32"
                               Height="32"
                               Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}}"
                               RenderOptions.BitmapScalingMode="NearestNeighbor"
                               VerticalAlignment="Center"
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        <Grid x:Name="Grid"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center">
                            <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                      Text="{TemplateBinding Label}"
                                                      TextAlignment="Center"
                                                      VerticalAlignment="Top"
                                                      HorizontalAlignment="Center"
                                                      LineHeight="13px"
                                                      LineStackingStrategy="BlockLineHeight"
                                                      HasTwoLines="{TemplateBinding ribbon:RibbonTwoLineText.HasTwoLines}"
                                                      PathData="{TemplateBinding ribbon:RibbonTwoLineText.PathData}"
                                                      PathFill="{TemplateBinding Foreground}"
                                                      Margin="1,1,1,0" />
                        </Grid>
                    </StackPanel>
                </Border>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            
            <!-- Large Variant -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                <Setter Property="MinWidth" Value="44"/>
                <Setter Property="Height" Value="66"/>
                <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
            </DataTrigger>

            <!-- Medium or Small Variant -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small">
                <Setter Property="Height" Value="{StaticResource &#262;}"/>
                <Setter TargetName="PART_Image" Property="Margin" Value="1,0,1,0" />
                <Setter TargetName="PART_Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                <Setter TargetName="PART_Image" Property="Width" Value="16" />
                <Setter TargetName="PART_Image" Property="Height" Value="16" />
                <Setter TargetName="TwoLineText" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="1" />
                <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Height" Value="Auto"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" >
                <Setter TargetName="TwoLineText" Property="Text" Value="{x:Null}" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="0" />
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" >
                <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <!-- IsMouseOver -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
            </Trigger>

            <!-- IsFocused -->
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
            </Trigger>

            <!-- IsEnabled -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{StaticResource &#203;}"/>
            </Trigger>

            <!-- IsChecked -->
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#258;}" />
            </Trigger>

            <!-- IsPressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"  />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
            </Trigger>

            <!-- (IsMouseOver || IsKeyboardFocused) && (IsChecked || IsPressed) -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MiddleBorder" Property="Background" Value="{StaticResource &#271;}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MiddleBorder" Property="Background" Value="{StaticResource &#271;}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MiddleBorder" Property="Background" Value="{StaticResource &#271;}" />
            </MultiTrigger>

            <!-- IsInControlGroup -->
            <Trigger Property="IsInControlGroup" Value="True">
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
            </Trigger>

            <!-- HighContrast -->

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <!-- In the scenario where this control is part of RibbonSplitButton's or some other control's template,
                 we need to handle TemplatedParent's IsMouseOver state similarly to how we handle our own IsMouseOver state. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, FallbackValue=false}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                <Setter TargetName="TwoLineText" Property="PathFill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type ribbon:RibbonToggleButton}" TargetType="{x:Type ribbon:RibbonToggleButton}" >
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="Template" Value="{StaticResource &#294;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}"
                        Left="1"
                        Top="1"
                        Right="1"
                        Bottom="2" />
        </Style.Resources>
    </Style>




    <!-- RibbonTextBox -->
    <SolidColorBrush x:Key="&#264;" Color="#90B1BBC6" />
    <SolidColorBrush x:Key="&#263;" Color="#90DEDEDE" />


    <!--=================================================================
                RibbonTextBox
        ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonTextBox}" TargetType="{x:Type ribbon:RibbonTextBox}">
        <Setter Property="Background" Value="{StaticResource &#265;}"/>
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="TextBoxWidth" Value="80" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="MouseOverBackground" Value="White" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="FocusedBackground" Value="White" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonTextBox}">
                    <Border x:Name="MainBorder" Margin="1">
                        <Grid Margin="1,0,1,0"
                              SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition x:Name="OuterTextColumn"  Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Image x:Name="Image"
                                   Source="{TemplateBinding LargeImageSource}"
                                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   Margin="1"
                                   Width="32"
                                   Height="32" />
                            <Grid x:Name="Grid"
                                  Grid.Row="1"
                                  Grid.Column="1"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center">
                                <Grid Name="InnerGrid"
                                      VerticalAlignment="Top"
                                      HorizontalAlignment="Center"
                                      Margin="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition x:Name="TextColumn" Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="TwoLineTextPanel"
                                          Grid.Column="0"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center">
                                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                                  Text="{TemplateBinding Label}"
                                                                  TextAlignment="Center"
                                                                  LineHeight="13px"
                                                                  LineStackingStrategy="BlockLineHeight"
                                                                  Margin="2,0,2,0" />
                                        <Rectangle x:Name="FocusVisual"
                                                   Margin="1"
                                                   StrokeThickness="1"
                                                   Stroke="Black"
                                                   StrokeDashArray="1 2"
                                                   Visibility="Collapsed"/>
                                    </Grid>
                                    <Border x:Name="Border"
                                            Grid.Column="1"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            Background="{TemplateBinding Background}"
                                            Height="{StaticResource &#261;}"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Margin="2,0,2,0">
                                        <!--Note: ScrollViewer picks up HorizontalContentAlignment from the template and applies it to the hosted
                                        TextBox in 4.0, don't set it on the template, we want the default value - Left-->
                                    <ScrollViewer x:Name="PART_ContentHost"
                                                  Margin="0,1,0,1" 
                                                  Width="{TemplateBinding TextBoxWidth}"
                                                  VerticalAlignment="Center" />
                                    </Border>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Star Variant -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}" Value="True">
                            <Setter TargetName="TextColumn" Property="Width" Value="*"/>
                            <Setter TargetName="OuterTextColumn" Property="Width" Value="*"/>
                            <Setter TargetName="PART_ContentHost" Property="Width" Value="Auto"/>
                            <Setter TargetName="Border" Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="Grid" Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="InnerGrid" Property="HorizontalAlignment" Value="Stretch"/>
                        </DataTrigger>
                        
                        
                        <!-- Large Variant -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                            <Setter Property="MinWidth" Value="44"/>
                            <Setter Property="Height" Value="66"/>
                            <Setter TargetName="Image" Property="Height" Value="32" />
                            <Setter TargetName="Image" Property="Width" Value="32" />
                            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                        </DataTrigger>

                        <!-- Medium or Small Variant -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small">
                            <Setter Property="Height" Value="{StaticResource &#262;}"/>
                            <Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                            <Setter TargetName="Image" Property="Height" Value="16" />
                            <Setter TargetName="Image" Property="Width" Value="16" />
                            <Setter TargetName="Image" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="Image" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,1,0" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                            <Setter TargetName="Image" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="Image" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="InnerGrid" Property="Margin" Value="0"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" >
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" >
                            <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        
                        <!-- IsMouseOver -->
                        <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiDataTrigger>

                        <!-- IsKeyboardFocused -->
                        <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                        </MultiDataTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiDataTrigger>

                        <Trigger Property="ShowKeyboardCues" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!-- IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource &#263;}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource &#264;}"/>
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                        </Trigger>
                        
                        <!-- IsInControlGroup -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
                        </Trigger>

                        <!-- HighContrast -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <!-- This is a hack for v3.0 to set the caret color to something visible in high contrast. Switch to using CaretBrush in v4 -->
                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                            <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                            <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                        Height="{Binding ElementName=PART_ContentHost,Path=ActualHeight}"
                                        Width="{Binding ElementName=PART_ContentHost,Path=ActualWidth}"
                                        Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:Ribbon}},Path=Background}" />
                                    <Rectangle x:Name="OverlayRect"
                                        Height="{Binding ElementName=PART_ContentHost,Path=ActualHeight}"
                                        Width="{Binding ElementName=PART_ContentHost,Path=ActualWidth}"
                                        Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonTextBox}},Path=Background}" />
                                </Canvas>
                                <ContentPresenter Content="{Binding}" />
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}},Path=(ScrollViewer.CanContentScroll)}"
                                         Value="false">
                                    <Setter TargetName="OpaqueRect" 
                                            Property="Canvas.Top" 
                                            Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OpaqueRect" 
                                            Property="Canvas.Left" 
                                            Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                    <Setter TargetName="OverlayRect" 
                                            Property="Canvas.Top" 
                                            Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OverlayRect" 
                                            Property="Canvas.Left" 
                                            Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                    <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>

    </Style>

    <!--RibbonToolTip-->
    <LinearGradientBrush x:Key="&#202;" StartPoint="0,0" EndPoint="0,1" >
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#CAFFFFFF" Offset="0"/>
            <GradientStop Color="#20FFFFFF" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!--=================================================================
            RibbonToolTip
        =================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonToolTip}" TargetType="{x:Type ribbon:RibbonToolTip}">
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter Property="HasDropShadow" Value="{DynamicResource {x:Static SystemParameters.DropShadowKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="5,5,5,4" />
        <Setter Property="Placement" Value="Mouse" />
        <Setter Property="Width" Value="318" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonToolTip}">
                    
                    <classic:SystemDropShadowChrome x:Name="Shadow" 
                                                    Color="Transparent" 
                                                    SnapsToDevicePixels="True" 
                                                    CornerRadius="2"

                                                    RenderOptions.ClearTypeHint="Enabled"

                                                    >
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                MinHeight="50"
                                CornerRadius="2">
                             <Border x:Name="InnerBorder"
                                     Background="{StaticResource &#202;}"
                                     BorderThickness="0"
                                     BorderBrush="Transparent"
                                     HorizontalAlignment="Stretch"
                                     VerticalAlignment="Stretch"
                                     Padding="{TemplateBinding Padding}"
                                     CornerRadius="2">
                                <StackPanel>
                                    <Grid x:Name="Header" >
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <TextBlock x:Name="Title"
                                                   Text="{TemplateBinding Title}"
                                                   FontWeight="Bold"
                                                   TextWrapping="Wrap"
                                                   Grid.ColumnSpan="2" />
                                        <Image x:Name="Image"
                                               Margin="7,9,6,4"
                                               Source="{TemplateBinding ImageSource}"
                                               Grid.Row="1"
                                               Stretch="None"
                                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                        <TextBlock x:Name="Description"
                                                   Margin="8,8,0,0"
                                                   Text="{TemplateBinding Description}"
                                                   Grid.Row="1"
                                                   Grid.Column="1"
                                                   TextWrapping="Wrap"
                                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  />
                                    </Grid>
                                    <ribbon:RibbonSeparator x:Name="Separator"
                                                            Margin="0,6,0,0"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            Visibility="Collapsed" />
                                    <Grid x:Name="Footer"
                                          Margin="0,4,0,0"
                                          Visibility="Collapsed">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <Image x:Name="FooterImage"
                                               Margin="0,0,7,0"
                                               Stretch="None"
                                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               Source="{TemplateBinding FooterImageSource}" />
                                        <TextBlock x:Name="FooterTitle"
                                                   Text="{TemplateBinding FooterTitle}"
                                                   FontWeight="Bold"
                                                   TextWrapping="Wrap"
                                                   Grid.Column="1" />
                                        <TextBlock x:Name="FooterDescription"
                                                   Margin="0,0,6,0"
                                                   Text="{TemplateBinding FooterDescription}"
                                                   TextWrapping="Wrap"
                                                   Grid.Column="1"
                                                   Grid.Row="1" />
                                    </Grid>
                                </StackPanel>
                            </Border>
                        </Border>
                    </classic:SystemDropShadowChrome>
                    
                    <ControlTemplate.Triggers>
                        
                        <Trigger Property="HasHeader" Value="False">
                            <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ImageSource" Value="{x:Null}">
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Description" Property="Grid.Column" Value="0" />
                            <Setter TargetName="Description" Property="Grid.ColumnSpan" Value="2" />
                            <Setter Property="Width" Value="210" />
                        </Trigger>
                        <Trigger Property="HasFooter" Value="True">
                            <Setter TargetName="Separator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Footer" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="FooterDescription" Value="{x:Null}">
                            <Setter TargetName="FooterDescription" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Property="Color"  Value="{StaticResource &#214;}"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}" />
                            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="Shadow" Property="Color"  Value="Transparent"/>
                        </DataTrigger>
                        <Trigger Property="IsPlacementTargetInRibbonGroup" Value="True">
                            <Setter Property="Placement" Value="Custom" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ImageSource" Value="{x:Null}" />
                                <Condition Property="Description" Value="{x:Null}" />
                                <Condition Property="HasFooter" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="MinHeight" Value="0" />
                            <Setter TargetName="Title" Property="FontWeight" Value="Normal" />
                            <Setter TargetName="Description" Property="Visibility" Value="Collapsed" />
                            <Setter Property="Width" Value="Auto" />
                        </MultiTrigger>                      
                    </ControlTemplate.Triggers>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>




<!--=================================================================
            RibbonTwoLineText
        ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonTwoLineText}" TargetType="{x:Type ribbon:RibbonTwoLineText}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonTwoLineText}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <TextBlock Name="PART_TextBlock1" 
                                   BaselineOffset="{TemplateBinding BaselineOffset}"
                                   LineHeight="{TemplateBinding LineHeight}"
                                   LineStackingStrategy="{TemplateBinding LineStackingStrategy}"
                                   Padding="{TemplateBinding Padding}"
                                   TextAlignment="{TemplateBinding TextAlignment}" 
                                   TextDecorations="{TemplateBinding TextDecorations}"
                                   TextEffects="{TemplateBinding TextEffects}"
                                   TextTrimming="None"
                                   TextWrapping="NoWrap"
                                   VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                   Grid.Row="0" />
                            <DockPanel Grid.Row="1" 
                                       HorizontalAlignment="{TemplateBinding HorizontalAlignment}" >
                                <Grid x:Name="pathGrid"
                                      MinHeight="{TemplateBinding LineHeight}"
                                      Margin="2,0,0,0"
                                      DockPanel.Dock="Right">
                                    <Path Name="PART_Path" 
                                          VerticalAlignment="Center" 
                                          Data="{TemplateBinding PathData}"
                                          Fill="{TemplateBinding PathFill}"
                                          Stroke="{TemplateBinding PathStroke}"/>
                                </Grid>
                                <TextBlock Name="PART_TextBlock2" 
                                           Margin="0,0,2,0"
                                           BaselineOffset="{TemplateBinding BaselineOffset}"
                                           LineHeight="{TemplateBinding LineHeight}"
                                           LineStackingStrategy="{TemplateBinding LineStackingStrategy}"
                                           Padding="{TemplateBinding Padding}"
                                           TextAlignment="{TemplateBinding TextAlignment}" 
                                           TextDecorations="{TemplateBinding TextDecorations}"
                                           TextEffects="{TemplateBinding TextEffects}" 
                                           TextTrimming="{TemplateBinding TextTrimming}"
                                           TextWrapping="NoWrap"
                                           VerticalAlignment="{TemplateBinding VerticalAlignment}" 
                                           DockPanel.Dock="Left"/>
                            </DockPanel>
                        </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="PathData" Value="{x:Null}">
                            <Setter TargetName="pathGrid" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="PART_TextBlock2" Property="Margin" Value="0" />
                        </Trigger>
                </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
<!--=================================================================
            RibbonQuickAccessToolBar
    ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonQuickAccessToolBar}" TargetType="{x:Type ribbon:RibbonQuickAccessToolBar}">
        <Setter Property="shell:WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.CaptionHeightKey}}" />
        <Setter Property="Margin" Value="3,-0.5,3,-1.4"/>
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonQuickAccessToolBar}">

                        <Grid SnapsToDevicePixels="True" Margin="{TemplateBinding Margin}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="1" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Grid.Effect>
                                <DropShadowEffect Color="White" BlurRadius="15.0" ShadowDepth="0"/>
                            </Grid.Effect>

                            <primitives:RibbonQuickAccessToolBarPanel IsItemsHost="true" Name="PART_MainPanel" Grid.Column="0"/>
                            
                            <ContentPresenter Name="MainCustomizeMenuHost"
                                              Grid.Column="2"
                                              Content="{Binding Path=CustomizeMenuButton, RelativeSource={RelativeSource TemplatedParent}}"/>

                            <Grid x:Name="OverflowButtonHost" Grid.Column="2" Visibility="Collapsed">
                                <!-- Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level. -->
                                <ribbon:RibbonToggleButton x:Name="PART_OverflowButton"
                                                           Style="{StaticResource {x:Type ribbon:RibbonToggleButton}}"
                                                           Width="12"
                                                           IsChecked="{Binding Path=IsOverflowOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                                           ClickMode="Press"
                                                           KeyTip="00">
                                    <ribbon:RibbonToggleButton.ControlSizeDefinition>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
                                    </ribbon:RibbonToggleButton.ControlSizeDefinition>
                                </ribbon:RibbonToggleButton>
                                <Path HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Margin="1,0,0,0"
                                      IsHitTestVisible="False"
                                      Width="7" 
                                      Height="5" 
                                      Fill="{TemplateBinding Foreground}" 
                                      Stretch="Fill" 
                                      Stroke="{TemplateBinding Foreground}"
                                      Data="M0,0 L2,2 0,4 M4,0 L6,2 4,4" />
                                <Popup x:Name="PART_OverflowPopup"
                                       AllowsTransparency="true"
                                       Placement="Bottom"
                                       IsOpen="{Binding Path=IsOverflowOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                       Focusable="false"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <classic:SystemDropShadowChrome Name="Shdw"
                                                                    Color="Transparent"
                                                                    Focusable="true"
                                                                    FocusVisualStyle="{x:Null}"

                                                                    RenderOptions.ClearTypeHint="Enabled"

                                    >
                                        <Border x:Name="PopupBorder"
                                                Background="{TemplateBinding Background}"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                CornerRadius="2"
                                                BorderThickness="1"
                                                Padding="2">
                                            <DockPanel>
                                                <primitives:RibbonQuickAccessToolBarOverflowPanel
                                                    Name="PART_OverflowPanel"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                                                <ContentPresenter Name="OverflowCustomizeMenuHost" DockPanel.Dock="Right" />
                                            </DockPanel>
                                        </Border>
                                    </classic:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                        </Grid>
                    <ControlTemplate.Triggers>
                        <!-- Show QuickAccessToolbar on bottom -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ribbon:Ribbon}, Path=ShowQuickAccessToolBarOnTop}" Value="false">
                            <Setter TargetName="PART_MainPanel" Property="Margin" Value="2,0,2,0" />
                        </DataTrigger>
                        <Trigger Property="HasOverflowItems" Value="true">
                            <Setter TargetName="OverflowButtonHost" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="MainCustomizeMenuHost" Property="Content" Value="{x:Null}"/>
                            <Setter TargetName="OverflowCustomizeMenuHost" Property="Content" Value="{Binding Path=CustomizeMenuButton, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger SourceName="PART_OverflowPopup" Property="Popup.IsOpen" Value="False">
                            <Setter TargetName="PART_OverflowPopup" Property="PopupAnimation" Value="None" />
                        </Trigger>


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="PART_OverflowPopup" Property="PopupAnimation"  Value="None" />
                            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter TargetName="PopupBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="Shdw" Property="CornerRadius" Value="0"/>
                        </DataTrigger>
                        <Trigger SourceName="PART_OverflowPopup" Property="Popup.HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="Color" Value="{StaticResource &#214;}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>


            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                <Setter Property="Margin" Value="4,0,6,0"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=WindowChromeGeneric}" x:Shared="False"/>

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=WindowChromeAeroLiteWithGlass}" x:Shared="False" NonClientFrameEdges="Bottom"/>

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=WindowChromeAeroLiteBasic}" x:Shared="False" />

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=WindowChromeAeroWithGlass}" x:Shared="False" NonClientFrameEdges="Bottom"/>

    <shell:WindowChrome x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=WindowChromeAeroBasic}" x:Shared="False" CornerRadius="9,9,0,0"/>

    <LinearGradientBrush EndPoint="0,0" StartPoint="1,0" x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=ActiveCaptionGradient}" x:Shared="False">
        <GradientStop Color="{DynamicResource {x:Static SystemColors.GradientActiveCaptionColorKey}}" Offset="0"/>
        <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush EndPoint="0,0" StartPoint="1,0" x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=InactiveCaptionGradient}" x:Shared="False">
        <GradientStop Color="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionColorKey}}" Offset="0"/>
        <GradientStop Color="{DynamicResource {x:Static SystemColors.InactiveCaptionColorKey}}" Offset="1"/>
    </LinearGradientBrush>


<!--=================================================================
        RibbonWindow
    ==================================================================-->

    <primitives:RibbonWindowSmallIconConverter x:Key="&#304;"/>
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonWindowStyle}" TargetType="{x:Type ribbon:RibbonWindow}">
        <Setter Property="shell:WindowChrome.WindowChrome" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=WindowChromeGeneric}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="0"/>

    <!--=================================================================
            Classic (the default template)
        ==================================================================-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonWindow}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type Button}" x:Key="&#305;">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Grid Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                                            <Border x:Name="OuterTopLeftBorder" BorderThickness="1,1,0,0" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                            <Border x:Name="OuterBottomRightBorder" BorderThickness="0,0,1,1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                            <Border x:Name="InnerTopLeftBorder" BorderThickness="1,1,0,0" Margin="1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                                            <Border x:Name="InnerBottomRightBorder" BorderThickness="0,0,1,1" Margin="1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                            <ContentPresenter HorizontalAlignment="Center"
                                                              VerticalAlignment="Center"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter TargetName="OuterTopLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                                                <Setter TargetName="OuterBottomRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
                                                <Setter TargetName="InnerTopLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                                <Setter TargetName="InnerBottomRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>

                    <Grid>
                        <Border Name="NonClientAreaBorder"

                                BorderThickness="{Binding Path=(SystemParameters.WindowNonClientFrameThickness)}"



                                BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                            <Border Name="PART_ClientAreaBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"/>
                        </Border>

                        <Border BorderThickness="1,1,0,0"
                                BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>

                        <Border BorderThickness="0,0,1,1"
                                BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>

                        <Border Name="WindowHighlightBorder"
                                BorderThickness="1,1,0,0"
                                Margin="1"
                                BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>

                        <Border Name="WindowShadowBorder"
                                BorderThickness="0,0,1,1"
                                Margin="1"
                                BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>

                        <Border Name="MiddleBorder"
                                BorderThickness="1"
                                Margin="2"
                                BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"/>

                        <Grid Name="ButtonPanel"
                              Margin="{Binding Path=(shell:WindowChrome.WindowChrome).ResizeBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                              Height="{Binding Path=(shell:WindowChrome.WindowChrome).CaptionHeight, RelativeSource={RelativeSource TemplatedParent}}"
                              Background="{DynamicResource {ComponentResourceKey ResourceId=ActiveCaptionGradient, TypeInTargetAssembly={x:Type ribbon:Ribbon}}}"
                              VerticalAlignment="Top">
                            <Image Name="PART_Icon"
                                   shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                   Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Icon, Converter={StaticResource &#304;}}"

                                   Width="{Binding Path=(SystemParameters.SmallIconWidth)}"
                                   Height="{Binding Path=(SystemParameters.SmallIconHeight)}"




                                   Margin="3,0,0,0"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"/>


                            <Grid HorizontalAlignment="Right"
                                  Height="{Binding Path=(SystemParameters.WindowCaptionButtonHeight)}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="{Binding Path=(SystemParameters.WindowCaptionButtonWidth)}"/>
                                    <ColumnDefinition Width="{Binding Path=(SystemParameters.WindowCaptionButtonWidth)}"/>
                                    <ColumnDefinition Width="2"/>
                                    <ColumnDefinition Width="{Binding Path=(SystemParameters.WindowCaptionButtonWidth)}"/>
                                </Grid.ColumnDefinitions>
                                <Border Grid.Column="0"
                                        Margin="4,2,-4,3"
                                        Padding="0,0,2,0">
                                    <Button Name="PART_MinimizeWindowButton"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Command="windows:SystemCommands.MinimizeWindowCommand"
                                            Focusable="False"
                                            Style="{StaticResource &#305;}">
                                        <Path x:Name="MinimizeWindowButtonGlyph"
                                              Stroke="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                              StrokeThickness="2">
                                            <Path.Data>
                                                <PathGeometry>
                                                    <PathFigure StartPoint="0,6">
                                                        <LineSegment Point="6,6"/>
                                                    </PathFigure>
                                                </PathGeometry>
                                            </Path.Data>
                                        </Path>
                                    </Button>
                                </Border>
                                <Border Grid.Column="1"
                                        Margin="2,2,-2,3"
                                        Padding="0,0,2,0">
                                    <Grid>
                                        <Button Name="PART_RestoreWindowButton"
                                                shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                                Command="windows:SystemCommands.RestoreWindowCommand"
                                                Focusable="False"
                                                Style="{StaticResource &#305;}"
                                                Visibility="Collapsed">
                                            <Path x:Name="RestoreWindowButtonGlyph"
                                                  Stroke="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                                  StrokeThickness="1">
                                                <Path.Data>
                                                    <PathGeometry>
                                                        <PathFigure StartPoint="0,3" IsClosed="False">
                                                            <LineSegment Point="0,8" />
                                                            <LineSegment Point="5,8" />
                                                            <LineSegment Point="5,3" />
                                                            <LineSegment Point="0,3" />
                                                            <LineSegment Point="0,4" />
                                                            <LineSegment Point="5,4" />
                                                            <LineSegment Point="5,5" />
                                                            <LineSegment Point="7,5" />
                                                            <LineSegment Point="7,0" />
                                                            <LineSegment Point="2,0" />
                                                            <LineSegment Point="2,1" />
                                                            <LineSegment Point="7,1" />
                                                        </PathFigure>
                                                        <PathFigure StartPoint="2,1" IsClosed="False">
                                                            <LineSegment Point="2,3" />
                                                        </PathFigure>
                                                    </PathGeometry>
                                                </Path.Data>
                                            </Path>
                                        </Button>
                                        <Button Name="PART_MaximizeWindowButton"
                                                shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                                Command="windows:SystemCommands.MaximizeWindowCommand"
                                                Focusable="False"
                                                Style="{StaticResource &#305;}">
                                            <Path x:Name="MaximizeWindowButtonGlyph"
                                                  Stroke="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                                  StrokeThickness="1">
                                                <Path.Data>
                                                    <PathGeometry>
                                                        <PathFigure StartPoint="0,0" IsClosed="False">
                                                            <LineSegment Point="0,8" />
                                                            <LineSegment Point="8,8" />
                                                            <LineSegment Point="8,0" />
                                                            <LineSegment Point="0,0" />
                                                        </PathFigure>
                                                        <PathFigure StartPoint="0.5,1">
                                                            <LineSegment Point="7.5,1" />
                                                        </PathFigure>
                                                    </PathGeometry>
                                                </Path.Data>
                                            </Path>
                                        </Button>
                                    </Grid>
                                </Border>
                                <Border Grid.Column="3"
                                        Margin="0,2,0,3"
                                        Padding="0,0,2,0">
                                    <Button Name="PART_CloseWindowButton"
                                            shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                            Command="windows:SystemCommands.CloseWindowCommand"
                                            Focusable="False"
                                            Style="{StaticResource &#305;}">
                                        <Path x:Name="CloseWindowButtonGlyph"
                                              Stroke="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                                              StrokeThickness="1.5">
                                            <Path.Data>
                                                <PathGeometry>
                                                    <PathFigure StartPoint="0,0">
                                                        <LineSegment Point="8,7"/>
                                                    </PathFigure>
                                                    <PathFigure StartPoint="8,0">
                                                        <LineSegment Point="0,7"/>
                                                    </PathFigure>
                                                </PathGeometry>
                                            </Path.Data>
                                        </Path>
                                    </Button>
                                </Border>
                            </Grid>


















































































































                        </Grid>

                        <Border BorderThickness="{Binding Path=(shell:WindowChrome.WindowChrome).ResizeBorderThickness, RelativeSource={RelativeSource TemplatedParent}}">
                          <Grid>
                            <AdornerDecorator>
                                <ContentPresenter Name="PART_RootContentPresenter"/>
                            </AdornerDecorator>
                            <ResizeGrip x:Name="WindowResizeGrip"
                                        shell:WindowChrome.ResizeGripDirection="BottomRight"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Bottom"
                                        Visibility="Collapsed"
                                        IsTabStop="false"/>
                          </Grid>
                        </Border>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="ButtonPanel" Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=InactiveCaptionGradient, TypeInTargetAssembly={x:Type ribbon:Ribbon}}}"/>
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InactiveBorderBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_MaximizeWindowButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_RestoreWindowButton" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="PART_MinimizeWindowButton" Property="Width" Value="18"/>
                            <Setter TargetName="PART_MaximizeWindowButton" Property="Width" Value="18"/>
                            <Setter TargetName="PART_RestoreWindowButton" Property="Width" Value="18"/>
                            <Setter TargetName="PART_CloseWindowButton" Property="Width" Value="18"/>
                        </DataTrigger>
                        <Trigger Property="Icon" Value="{x:Null}">

                            <Setter TargetName="PART_Icon" Property="Source" Value="/System.Windows.Controls.Ribbon;component/Images/DefaultSystemIcon.png"/>



                        </Trigger>
                        <MultiTrigger>
                            <!-- There may be perf implications b/c of the following conditions.  We may cause
                                                         an extra layout to happen when WindowState changes to Minimized and ResizeMode
                                                         is set to CanResizeWithGrip.
                                                         NavigationWindow's style requires the ResizeMode condition tag even though
                                                         Window's style already takes care of this condition.
                                                         -->
                            <MultiTrigger.Conditions>
                                <Condition Property="Window.ResizeMode"
                                           Value="CanResizeWithGrip"/>
                                <Condition Property="Window.WindowState"
                                           Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip"
                                    Property="Visibility"
                                    Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



<!--=================================================================
        Ribbon
    ==================================================================-->
<SolidColorBrush x:Key="&#216;" Color="#60FFFFFF"/>
<SolidColorBrush x:Key="&#200;" Color="#DFE9F5" />
<SolidColorBrush x:Key="&#201;" Color="#B9C9DA" />
<LinearGradientBrush x:Key="&#217;" StartPoint="0.5,0.0" EndPoint="0.5,1.0" >
    <GradientStop Color="#EEFFFFFF" Offset="0.0"/>
    <GradientStop Color="#BBFFFFFF" Offset="0.1"/>
    <GradientStop Color="#05FFFFFF" Offset="0.5"/>
    <GradientStop Color="#20FFFFFF" Offset="1.0"/>
</LinearGradientBrush>

<Style x:Key="{x:Type ribbon:Ribbon}"  TargetType="{x:Type ribbon:Ribbon}">
    <Style.Resources>
        <PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">Fade</PopupAnimation>
    </Style.Resources>   
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Background" Value="{StaticResource &#200;}" />
    <Setter Property="BorderBrush" Value="{StaticResource &#201;}" />
    <Setter Property="MouseOverBorderBrush" Value="{StaticResource &#218;}" />
    <Setter Property="MouseOverBackground" Value="{StaticResource &#219;}" />
    <Setter Property="PressedBorderBrush" Value="{StaticResource &#220;}" />
    <Setter Property="PressedBackground" Value="{StaticResource &#221;}" />
    <Setter Property="CheckedBorderBrush" Value="{StaticResource &#220;}" />
    <Setter Property="CheckedBackground" Value="{StaticResource &#222;}" />
    <Setter Property="FocusedBorderBrush" Value="{StaticResource &#218;}" />
    <Setter Property="FocusedBackground" Value="{StaticResource &#219;}" />
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:Ribbon}">

                <Grid SnapsToDevicePixels="True" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <!-- Ribbon Background -->
                    <Border Name="BackgroundBorder" Grid.Row="1" Grid.ColumnSpan="3" Grid.RowSpan="3" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"/>

                    <!-- Popup hosting the groups when IsMinimized=true -->
                    <Border Grid.ColumnSpan="3" Grid.Row="1">
                        <Popup x:Name="PART_ITEMSPRESENTERPOPUP" 
                               AllowsTransparency="True" 
                               IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" >
                            <classic:SystemDropShadowChrome Name="Shdw" Focusable="True" FocusVisualStyle="{x:Null}" Color="Transparent" Margin="0,0,5,5"

                                RenderOptions.ClearTypeHint="Enabled"

                            >
                                <Border Name="CollapsedPopupBackgroundBorder"  Background="{TemplateBinding Background}">
                                    <ContentControl x:Name="popupItemsPresenterHost" Margin="0,1,0,0" Focusable="False" 
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Border>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Border>

                    <ContentControl x:Name="mainItemsPresenterHost" Grid.ColumnSpan="3" Grid.Row="2" Focusable="False">
                        <Border x:Name="groupsBorder"
                                    Background="{StaticResource &#217;}" 
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1,0,1,1"
                                    Height="{StaticResource &#223;}"
                                    SnapsToDevicePixels="True">
                            <Border BorderThickness="0,0,0,1" Margin="0,0,0,1" BorderBrush="{StaticResource &#216;}" SnapsToDevicePixels="True">
                                <ItemsPresenter Name="ItemsPresenter" />
                            </Border>
                        </Border>
                    </ContentControl>
                    
                    <!-- QuickAccessToolbar bottom placeholder -->
                    <Border x:Name="QatBottomHost" Grid.Row="3" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter x:Name="QatBottomHostContentPresenter" HorizontalAlignment="Left" VerticalAlignment="Center" IsHitTestVisible="True"/>
                    </Border>

                    <!-- TitleBar -->
                    <Border Name="titleBarBackground"
                                  Grid.ColumnSpan="3"
                                  Background="{StaticResource &#217;}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="0,0,0,1"
                                  Visibility="Collapsed"/>

                    <DockPanel Grid.Column="0" Grid.ColumnSpan="3" Height="{Binding Path=(SystemParameters.WindowCaptionHeight)}" LastChildFill="True">



                        <!-- This makes sure that the title and QAT does not overlap the close minimize and restore buttons. -->
                        <ContentControl x:Name="windowButtonPlaceHolder"

                                        Width="{Binding Path=(SystemParameters.WindowCaptionButtonWidth)}"



                                        Visibility="{TemplateBinding IsHostedInRibbonWindow, Converter={StaticResource &#224;}}"
                                        IsHitTestVisible="False" 
                                        DockPanel.Dock="Right" 
                                        Focusable="False"
                                        Margin="3,0,0,0"/>
                        <ContentControl x:Name="windowIconPadding"

                                        Width="{Binding Path=(SystemParameters.SmallIconWidth)}"



                                        Margin="0,0,3,0"
                                        IsHitTestVisible="False" 
                                        DockPanel.Dock="Left" 
                                        Focusable="False"/>
                        <primitives:RibbonTitlePanel x:Name="PART_TitlePanel">
                            <Grid x:Name="QatTopHost">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Border x:Name="QatTopHostLeftBorder"
                                        Grid.Column="0"
                                        Margin="8,2,0,2"
                                        Width="3"
                                        Background="#77222222"
                                        BorderBrush="#66CCCCCC"
                                        BorderThickness="1,0,1,0.9"
                                        CornerRadius="0,0,2,2"/>
                                
                                <ContentPresenter x:Name="QatTopHostContentPresenter" 
                                                  Grid.Column="1"
                                                  Content="{TemplateBinding QuickAccessToolBar}" 
                                                  IsHitTestVisible="True"/>

                                <Border x:Name="QatTopHostRightBorder"
                                        Grid.Column="2"
                                        Margin="0,2,1,2"
                                        Width="3"
                                        Background="#77222222"
                                        BorderBrush="#66CCCCCC"
                                        BorderThickness="1,0,1,0.9"
                                        CornerRadius="0,0,2,2"/>
                                
                            </Grid>
                            <ContentPresenter x:Name="PART_TitleHost"
                                              ContentSource="Title"
                                              ContentTemplate="{TemplateBinding TitleTemplate}" 
                                              TextBlock.FontSize="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}"
                                              TextBlock.FontFamily="{DynamicResource {x:Static SystemFonts.CaptionFontFamilyKey}}"
                                              TextBlock.FontWeight="{DynamicResource {x:Static SystemFonts.CaptionFontWeightKey}}"
                                              TextElement.Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="3,0"

                                              MinHeight="{Binding Path=(SystemParameters.WindowCaptionHeight)}"



                                              MinWidth="75"
                                              IsHitTestVisible="False">
                                <ContentPresenter.Resources>
                                    <!-- Glowing effect around Title in Aero glass theme -->
                                    <DataTemplate DataType="{x:Type system:String}">
                                        <TextBlock x:Name="titleTextBlock" 
                                                   Margin="0,-2,0,0"
                                                   Text="{TemplateBinding Content}"
                                                   TextTrimming="CharacterEllipsis"
                                                   HorizontalAlignment="{TemplateBinding HorizontalAlignment}"/>
                                        <DataTemplate.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>

                                                    <Condition Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}" Value="True"/>



                                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ribbon:Ribbon}, Path=IsHostedInRibbonWindow}" Value="True" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="titleTextBlock" Property="TextBlock.Effect">
                                                    <Setter.Value>
                                                        <DropShadowEffect Color="White" BlurRadius="5.0" ShadowDepth="0"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </MultiDataTrigger>

                                            <DataTrigger Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}" Value="False">



                                                <Setter TargetName="titleTextBlock" Property="Margin" Value="0" />
                                                <Setter TargetName="titleTextBlock" Property="VerticalAlignment" Value="Center" />
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                                <Setter TargetName="titleTextBlock" Property="Margin" Value="0,1,0,0" />
                                            </DataTrigger>
                                            <!-- The Title is drawn slightly differently in AeroLite. -->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>

                                                    <Condition Binding="{Binding Path=(SystemParameters.UxThemeName)}" Value="AeroLite"/>
                                                    <Condition Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}" Value="False"/>




                                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ribbon:Ribbon}, Path=IsHostedInRibbonWindow}" Value="True" />
                                                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ribbon:RibbonWindow}, Path=WindowState}" Value="Normal"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="titleTextBlock" Property="Margin" Value="0,0,0,7"/>
                                            </MultiDataTrigger>

                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                            <ribbon:RibbonContextualTabGroupItemsControl x:Name="PART_ContextualTabGroupItemsControl" 
                                                                               IsHitTestVisible="True"
                                                                               shell:WindowChrome.IsHitTestVisibleInChrome="True"
                                                                               HorizontalAlignment="Center" />
                        </primitives:RibbonTitlePanel>
                    </DockPanel>

                    <!-- Application Menu -->
                    <ContentPresenter x:Name="applicationMenu" Grid.Row="1" Content="{TemplateBinding ApplicationMenu}" VerticalAlignment="Top" />
                    
                    <ribbon:RibbonTabHeaderItemsControl 
                            x:Name="TabHeaderItemsControl" 
                            VerticalAlignment="Top" 
                            HorizontalAlignment="Left" 
                            Grid.Row="1" 
                            Grid.Column="1" 
                            Margin="1,1,1,0"/>

                    <!-- HelpPane appears to the right of TabsPanel -->
                    <ContentPresenter x:Name="PART_HelpPane" 
                                      ContentSource="HelpPaneContent" 
                                      ContentTemplate="{TemplateBinding HelpPaneContentTemplate}" 
                                      Grid.Column="2" 
                                      Grid.Row="1" 
                                      HorizontalAlignment="Right" 
                                      VerticalAlignment="Top"/>

                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsCollapsed" Value="true">
                        <Setter Property="Visibility"  Value="Collapsed" TargetName="applicationMenu"/>
                        <Setter Property="Visibility"  Value="Collapsed" TargetName="QatBottomHost"/>
                        <Setter Property="Visibility"  Value="Collapsed" TargetName="QatTopHost"/>
                        <Setter Property="Visibility"  Value="Collapsed" TargetName="mainItemsPresenterHost"/>
                        <Setter Property="Visibility"  Value="Collapsed" TargetName="TabHeaderItemsControl"/>
                        <Setter Property="Visibility"  Value="Collapsed" TargetName="PART_HelpPane"/>
                        <Setter Property="Visibility"  Value="Collapsed" TargetName="PART_ContextualTabGroupItemsControl" />
                        <Setter Property="MinWidth" Value="0" TargetName="PART_TitleHost" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsCollapsed" Value="True" />
                            <Condition Property="IsHostedInRibbonWindow" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility" Value="Collapsed"/>
                    </MultiTrigger>
                    <Trigger Property="ShowQuickAccessToolBarOnTop" Value="false">
                        <Setter Property="Content"  Value="{x:Null}" TargetName="QatTopHostContentPresenter"/>
                        <Setter Property="Visibility"  Value="Collapsed" TargetName="QatTopHost"/>
                        <Setter Property="Content"  Value="{Binding Path=QuickAccessToolBar,RelativeSource={RelativeSource TemplatedParent}}" TargetName="QatBottomHostContentPresenter"/>
                        <Setter Property="BorderThickness" Value="0,0,0,1" TargetName="BackgroundBorder"/>
                    </Trigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=QuickAccessToolBar.HasItems}" Value="False"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=QuickAccessToolBar.CustomizeMenuButton}" Value="{x:Null}"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="QatTopHost"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="QatBottomHost"/>
                    </MultiDataTrigger>
                    <Trigger Property="IsMinimized" Value="True">
                        <Setter Property="Content"  Value="{x:Null}" TargetName="mainItemsPresenterHost"/>
                        <Setter Property="Visibility"  Value="Collapsed" TargetName="mainItemsPresenterHost"/>
                        <Setter Property="Content"  Value="{Binding ElementName=groupsBorder}" TargetName="popupItemsPresenterHost"/>
                        <Setter Property="BorderThickness" Value="0,0,0,1" TargetName="BackgroundBorder"/>
                    </Trigger>
                    <Trigger Property="WindowIconVisibility" Value="Collapsed">
                        <Setter Property="Visibility" Value="Collapsed" TargetName="windowIconPadding"/>
                        <Setter TargetName="QatTopHostLeftBorder" Property="Visibility" Value="Collapsed"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMinimized" Value="true" />
                            <Condition Property="ShowQuickAccessToolBarOnTop" Value="false" />
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderThickness" Value="0,1,0,0" TargetName="QatBottomHost"/>
                    </MultiTrigger>
                    <Trigger Property="IsHostedInRibbonWindow" Value="False">
                        <Setter TargetName="BackgroundBorder" Property="Grid.Row" Value="0" />
                        <Setter TargetName="BackgroundBorder" Property="Grid.RowSpan" Value="4" />
                        <Setter TargetName="titleBarBackground" Property="Visibility" Value="Visible" />
                        <Setter TargetName="windowIconPadding" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="QatTopHostLeftBorder" Property="Visibility" Value="Collapsed"/>
                    </Trigger>
                    <Trigger Property="IsDropDownOpen" Value="True">
                        <Setter Property="BorderThickness" Value="0" TargetName="BackgroundBorder"/>
                    </Trigger>
                    <Trigger SourceName="PART_ITEMSPRESENTERPOPUP" Property="Popup.HasDropShadow" Value="true">
                        <Setter TargetName="Shdw" Property="Color" Value="{StaticResource &#214;}"/>
                    </Trigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ribbon:RibbonWindow}, Path=IsActive}" Value="False"/>

                            <Condition Binding="{Binding Path=(SystemParameters.IsGlassEnabled)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHostedInRibbonWindow}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_TitleHost" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}" />
                    </MultiDataTrigger>


                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                        <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        <Setter TargetName="groupsBorder" Property="Background" Value="Transparent"/>
                        <Setter TargetName="groupsBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        <Setter TargetName="groupsBorder" Property="Height" Value="{StaticResource &#225;}"/>
                        <Setter TargetName="QatBottomHost" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        <Setter TargetName="titleBarBackground" Property="Background" Value="Transparent"/>
                        <Setter TargetName="titleBarBackground" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        <Setter TargetName="CollapsedPopupBackgroundBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        <Setter TargetName="PART_ITEMSPRESENTERPOPUP" Property="PopupAnimation" Value="None" />
                        <Setter TargetName="QatTopHostLeftBorder" Property="Margin" Value="10,1,2,2"/>
                        <Setter TargetName="QatTopHostLeftBorder" Property="Width" Value="1"/>
                        <Setter TargetName="QatTopHostLeftBorder" Property="BorderThickness" Value="0"/>
                        <Setter TargetName="QatTopHostLeftBorder" Property="CornerRadius" Value="0"/>
                        <Setter TargetName="QatTopHostLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                        <Setter TargetName="QatTopHostRightBorder" Property="Margin" Value="0,1,2,2"/>
                        <Setter TargetName="QatTopHostRightBorder" Property="Width" Value="1"/>
                        <Setter TargetName="QatTopHostRightBorder" Property="BorderThickness" Value="0"/>
                        <Setter TargetName="QatTopHostRightBorder" Property="CornerRadius" Value="0"/>
                        <Setter TargetName="QatTopHostRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"/>
                    </DataTrigger>

                    <!-- The Title & separators that surround the QAT are drawn slightly differently in Aero. -->

                    <DataTrigger Binding="{Binding Path=(SystemParameters.UxThemeName)}" Value="Aero">



                        <Setter TargetName="QatTopHost" Property="Margin" Value="0,-3,0,0"/>
                        <Setter TargetName="QatTopHostLeftBorder" Property="Margin" Value="3,3,0,5"/>
                        <Setter TargetName="QatTopHostLeftBorder" Property="Background" Value="#81444444"/>
                        <Setter TargetName="QatTopHostLeftBorder" Property="BorderBrush" Value="#69EEEEEE"/>
                        <Setter TargetName="QatTopHostRightBorder" Property="Margin" Value="0,3,1,5"/>
                        <Setter TargetName="QatTopHostRightBorder" Property="Background" Value="#81444444"/>
                        <Setter TargetName="QatTopHostRightBorder" Property="BorderBrush" Value="#69EEEEEE"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.UxThemeName)}" Value="Aero"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ribbon:RibbonWindow}, Path=WindowState}" Value="Maximized"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="QatTopHost" Property="Margin" Value="0"/>
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

    <!--=================================================================
            RibbonApplicationMenuItem
        ==================================================================-->

<ControlTemplate x:Key="&#238;" TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
    <Border x:Name="Border"
            Background="{TemplateBinding Background}"
            BorderThickness="{TemplateBinding BorderThickness}"
            BorderBrush="{TemplateBinding BorderBrush}"
            CornerRadius="2"
            SnapsToDevicePixels="True">
        <Grid Margin="1">
            <Grid.ColumnDefinitions>
                <!--Icon or check mark column-->
                <ColumnDefinition Width="Auto"
                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                <!--Header column-->
                <ColumnDefinition Width="*"
                                  MinWidth="44" />
                <!--Submenu arrow column-->
                <ColumnDefinition Width="22" />
            </Grid.ColumnDefinitions>

            <Image x:Name="Image"
                   Margin="6,4,6,4"
                   Width="32"
                   Height="32"
                   Source="{TemplateBinding ImageSource}"                    
                   VerticalAlignment="Center"
                   HorizontalAlignment="Center"
                   RenderOptions.BitmapScalingMode="NearestNeighbor" />
            <Border x:Name="CheckMarkBorder"
                    Background="{TemplateBinding CheckedBackground}"
                    BorderBrush="{TemplateBinding CheckedBorderBrush}"
                    BorderThickness="1"
                    Visibility="Hidden"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Margin="1"
                    Width="30"
                    Height="30"
                    CornerRadius="2">
                <Path x:Name="CheckMark"
                      Margin="4,0,6,0"
                      Visibility="Hidden"
                      VerticalAlignment="Center"
                      HorizontalAlignment="Center"
                      Fill="{TemplateBinding Foreground}"
                      FlowDirection="LeftToRight"
                      Data="{StaticResource &#239;}" >
                    <Path.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                    </Path.RenderTransform>
                </Path>
            </Border>

            <ContentPresenter Grid.Column="1"
                              ContentSource="Header"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Left"                             
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"/>

            <Path x:Name="Arrow"
                  Visibility="{TemplateBinding HasItems,Converter={StaticResource &#224;}}"
                  Grid.Column="2"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  Data="{StaticResource &#240;}" />

            <!-- Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance. 
                 This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is 
                 important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562 -->

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   Placement="Relative"
                   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                   Focusable="False"
                   SnapsToDevicePixels="True">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                Color="Transparent"
                                                controls:KeyTipService.IsKeyTipScope="True"

                                                RenderOptions.ClearTypeHint="Enabled"

                >
                    <Grid>
                        <Border x:Name="PopupBorder"
                                BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
                                Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                        <Border x:Name="PopupOverlayBorder"
                                BorderBrush="{StaticResource &#235;}"
                                Background="{StaticResource &#237;}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">
                            <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                                <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                              CanContentScroll="True"
                                              HorizontalScrollBarVisibility="Disabled"
                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="BackgroundCanvas"
                                            Height="0"
                                            Width="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                            <Rectangle x:Name="OpaqueRect"
                                                    Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                    Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                            <Rectangle x:Name="OverlayRect"
                                                    Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                    Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                        </Canvas>

                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                Margin="2"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" />

                                    </Grid>

                                </ScrollViewer>
                                <Border Name="ResizeControl"
                                        Grid.Row="1"
                                        Visibility="Collapsed"
                                        Background="{StaticResource &#210;}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0">
                                    <Thumb x:Name="PART_ResizeThumb"  
                                           Style="{StaticResource &#211;}"/>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
    </Border>
    <ControlTemplate.Triggers>

        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="IsCheckable" Value="True">
            <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="Border" Property="CornerRadius" Value="0" />
            <Setter TargetName="Border" Property="Background" Value="Transparent" />
            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsPressed ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="Border" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="&#242;" TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
        <Border x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                CornerRadius="2">
            <Grid Margin="1">
                <Grid.ColumnDefinitions>
                    <!--Icon or check mark column-->
                    <ColumnDefinition Width="44" 
                                      SharedSizeGroup="MenuItemIconColumnGroup" />
                    <!--Header column-->
                    <ColumnDefinition Width="*" />
                    <!--Submenu arrow column-->
                    <ColumnDefinition Width="22" />
                </Grid.ColumnDefinitions>

                <Image x:Name="Image"
                       Margin="6,4,6,4"
                       Width="32"
                       Height="32"
                       Source="{TemplateBinding ImageSource}"
                       VerticalAlignment="Center"
                       HorizontalAlignment="Center"
                       RenderOptions.BitmapScalingMode="NearestNeighbor" />
                <Border x:Name="CheckMarkBorder"
                        Background="{TemplateBinding CheckedBackground}"
                        BorderBrush="{TemplateBinding CheckedBorderBrush}"
                        BorderThickness="1"
                        Visibility="Hidden"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        Margin="1"
                        Width="30"
                        Height="30"
                        CornerRadius="2">
                    <Path x:Name="CheckMark"
                          Margin="4,0,6,0"
                          Visibility="Hidden"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Data="{StaticResource &#239;}" >
                        <Path.RenderTransform>
                            <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                        </Path.RenderTransform>
                    </Path>
                </Border>

                <ContentPresenter Grid.Column="1"
                                  ContentSource="Header"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Left"                             
                                  Margin="{TemplateBinding Padding}"
                                  RecognizesAccessKey="True"/>

                <Path x:Name="Arrow"
                      Visibility="{TemplateBinding HasItems,Converter={StaticResource &#224;}}"
                      Grid.Column="2"
                      VerticalAlignment="Center"
                      HorizontalAlignment="Center"
                      Fill="{TemplateBinding Foreground}"
                      Data="{StaticResource &#240;}" />
            </Grid>
        </Border>
        <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   VerticalOffset="-1"
                   Placement="Custom"
                   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                   Focusable="False"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                                Color="Transparent"
                                                controls:KeyTipService.IsKeyTipScope="True"

                                                RenderOptions.ClearTypeHint="Enabled"

            >
                <Grid>
                    <Border x:Name="PopupBorder"
                                BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
                                Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                    <Border x:Name="PopupOverlayBorder"
                                BorderBrush="{StaticResource &#235;}"
                                Background="{StaticResource &#237;}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                              CanContentScroll="True"
                                              HorizontalScrollBarVisibility="Disabled"
                                             Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Height="0"
                                            Width="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                    Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                    Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                    Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                    Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                        <Rectangle x:Name="InnerOverlayRect"
                                                    Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                    Fill="{StaticResource &#209;}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                        Margin="2"
                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        Grid.IsSharedSizeScope="True" />

                                </Grid>

                            </ScrollViewer>
                            <Border Name="ResizeControl"
                                        Grid.Row="1"
                                        Visibility="Collapsed"
                                        Background="{StaticResource &#210;}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0">
                                <Thumb x:Name="PART_ResizeThumb"  
                                           Style="{StaticResource &#211;}"/>
                            </Border>
                        </Grid>
                    </Border>
                </Grid>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>

       <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
        </MultiTrigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="IsCheckable" Value="True">
            <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="Border" Property="CornerRadius" Value="0" />
            <Setter TargetName="Border" Property="Background" Value="Transparent" />
            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsPressed ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="&#244;" TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
        <Border x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                CornerRadius="2">
            <Grid Margin="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="24"
                                      Width="Auto"
                                      SharedSizeGroup="MenuItemIconColumnGroup" />
                    <ColumnDefinition Width="4" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="37" />
                    <ColumnDefinition Width="17" />
                </Grid.ColumnDefinitions>

                <Image x:Name="Image"
                       Margin="1"
                       Width="16"
                       Height="16"
                       Source="{TemplateBinding ImageSource}"
                       VerticalAlignment="Center"
                       HorizontalAlignment="Center"
                       RenderOptions.BitmapScalingMode="NearestNeighbor" />
                <Border x:Name="CheckMarkBorder"
                        Background="{TemplateBinding CheckedBackground}"
                        BorderBrush="{TemplateBinding CheckedBorderBrush}"
                        BorderThickness="1"
                        Visibility="Hidden"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        Margin="1"
                        Width="20"
                        Height="20"
                        CornerRadius="2">
                    <Path x:Name="CheckMark"
                          Margin="4,0,6,0"
                          Visibility="Hidden"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          Fill="{TemplateBinding Foreground}"
                          FlowDirection="LeftToRight"
                          Data="{StaticResource &#239;}" />
                </Border>

                <ContentPresenter Grid.Column="2"
                                  ContentSource="Header"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Left"                             
                                  Margin="{TemplateBinding Padding}"
                                  RecognizesAccessKey="True"/>
                <Path x:Name="Arrow"
                      Visibility="{TemplateBinding HasItems,Converter={StaticResource &#224;}}"
                      Grid.Column="5"
                      VerticalAlignment="Center"
                      Margin="4,0,0,0"
                      Fill="{TemplateBinding Foreground}"
                      Data="{StaticResource &#240;}" />
            </Grid>
        </Border>
        <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   VerticalOffset="-1"
                   Placement="Custom"
                   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                   Focusable="False"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                   SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"

                                            RenderOptions.ClearTypeHint="Enabled"

                                            >
                <Grid>
                    <Border x:Name="PopupBorder"
                                BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
                                Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />
                    <Border x:Name="PopupOverlayBorder"
                                BorderBrush="{StaticResource &#235;}"
                                Background="{StaticResource &#237;}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2">

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                              CanContentScroll="True"
                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Height="0"
                                            Width="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                    Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                    Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                    Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                    Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                        <Rectangle x:Name="InnerOverlayRect"
                                                    Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                    Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                    Fill="{StaticResource &#209;}"
                                                    RadiusX="2"
                                                    RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                                    Margin="2"
                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    Grid.IsSharedSizeScope="True" />

                                </Grid>

                            </ScrollViewer>
                            <Border Name="ResizeControl"
                                        Grid.Row="1"
                                        Visibility="Collapsed"
                                        Background="{StaticResource &#210;}"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0">
                                <Thumb x:Name="PART_ResizeThumb"  
                                           Style="{StaticResource &#211;}"/>
                            </Border>
                        </Grid>
                    </Border>
                </Grid>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>

        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
        </MultiTrigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="IsCheckable" Value="True">
            <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="Border" Property="CornerRadius" Value="0" />
            <Setter TargetName="Border" Property="Background" Value="Transparent" />
            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsPressed ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<Style x:Key="{x:Type ribbon:RibbonApplicationMenuItem}" TargetType="{x:Type ribbon:RibbonApplicationMenuItem}">
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Padding" Value="3,2,3,2" />
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
    <!-- FocusedBorderBrush and FocusedBackground are used when the control is added to QAT -->
    <Setter Property="ribbon:RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="ribbon:RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="Template" Value="{StaticResource &#238;}" />
    <Style.Triggers>
        <Trigger Property="Level" Value="Middle">
            <Setter Property="Template" Value="{StaticResource &#242;}" />
        </Trigger>

        <Trigger Property="Level" Value="Sub">
            <Setter Property="Template" Value="{StaticResource &#244;}" />
        </Trigger>
    </Style.Triggers>
</Style>

 
    <!--=================================================================
            RibbonButton
        ==================================================================-->

    <ControlTemplate x:Key="&#254;" TargetType="{x:Type ribbon:RibbonButton}">
        <Border x:Name="OuterBorder"
                CornerRadius="{TemplateBinding CornerRadius}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                SnapsToDevicePixels="True">
            <Border x:Name="InnerBorder"
                    BorderBrush="Transparent"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                <StackPanel x:Name="StackPanel">
                    <Image x:Name="PART_Image"
                           Source="{TemplateBinding LargeImageSource}"
                           Width="32"
                           Height="32"
                           Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}}"
                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                           VerticalAlignment="Center"
                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    <Grid x:Name="Grid"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center">
                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                  Text="{TemplateBinding Label}"
                                                  TextAlignment="Center"
                                                  VerticalAlignment="Top"
                                                  HorizontalAlignment="Center"
                                                  LineHeight="13px"
                                                  LineStackingStrategy="BlockLineHeight"
                                                  Margin="1,1,1,0" />
                    </Grid>
                </StackPanel>
            </Border>
        </Border>

        <ControlTemplate.Triggers>

            <!-- Large Variant -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                <Setter Property="MinWidth" Value="44"/>
                <Setter Property="Height" Value="66"/>
                <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
            </DataTrigger>

            <!-- Medium or Small Variant -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small">
                <Setter Property="Height" Value="22"/>
                <Setter TargetName="PART_Image" Property="Margin" Value="1,0,1,0" />
                <Setter TargetName="PART_Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                <Setter TargetName="PART_Image" Property="Width" Value="16" />
                <Setter TargetName="PART_Image" Property="Height" Value="16" />
                <Setter TargetName="TwoLineText" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="TwoLineText" Property="Margin" Value="1" />
                <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Height" Value="Auto"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" >
                <Setter TargetName="TwoLineText" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" >
                <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            
            <!-- IsMouseOver -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
            </Trigger>

            <!-- IsFocused -->
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
            </Trigger>

            <!-- IsPressed -->
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"  />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
            </Trigger>

            <!-- IsInControlGroup -->
            <Trigger Property="IsInControlGroup" Value="True">
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
            </Trigger>

            <!-- IsEnabled -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
            </Trigger>

            <!-- Override potential app-level brushes in HighContrast. -->

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
            </DataTrigger>

            <!-- In the scenario where this control is part of RibbonSplitButton's or some other control's template,
                 we need to handle TemplatedParent's IsMouseOver state similarly to how we handle our own IsMouseOver state. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsMouseOver}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, FallbackValue=false}" Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                </MultiDataTrigger.Conditions>
                <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </MultiDataTrigger>
         </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type ribbon:RibbonButton}" TargetType="{x:Type ribbon:RibbonButton}" >
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="Template" Value="{StaticResource &#254;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}"
                        Left="1"
                        Top="1"
                        Right="1"
                        Bottom="2" />
        </Style.Resources>
    </Style>




    <!--=================================================================
            RibbonControlGroup
        ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonControlGroup}" TargetType="{x:Type ribbon:RibbonControlGroup}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonControlGroup}">
                    <Border x:Name="MainBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1,1,0,1"
                            CornerRadius="2"
                            SnapsToDevicePixels="True">
                        <ItemsPresenter />
                    </Border>
                    
                    <ControlTemplate.Triggers>
                        <!-- HighContrast -->


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="0" />
                        </DataTrigger>
                        
                    </ControlTemplate.Triggers>
                    
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RibbonCheckBox -->
    <SolidColorBrush x:Key="&#266;" Color="#FFB5BEDE" />
    <LinearGradientBrush x:Key="&#267;" StartPoint="0,0" EndPoint="1,1" >
        <GradientStop Offset="0" Color="#FFE7E7F7" />
        <GradientStop Offset="1" Color="White" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="&#268;" StartPoint="0,0" EndPoint="1,1" >
        <GradientStop Offset="0" Color="#80F7F7FF" />
        <GradientStop Offset="1" Color="#F0F7F7FF" />
    </LinearGradientBrush>

    <!-- HighContrast -->
    <LinearGradientBrush x:Key="&#269;" StartPoint="0,0" EndPoint="1,1" x:Shared="False" >
        <GradientStop Offset="0" Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}" />
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static SystemColors.ControlDarkColorKey}}" />
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static SystemColors.ControlLightLightColorKey}}" />
        <GradientStop Offset="1" Color="{DynamicResource {x:Static SystemColors.ControlLightLightColorKey}}" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="&#270;" StartPoint="0,0" EndPoint="1,1" x:Shared="False" >
        <GradientStop Offset="0" Color="{DynamicResource {x:Static SystemColors.ControlDarkDarkColorKey}}" />
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static SystemColors.ControlDarkDarkColorKey}}" />
        <GradientStop Offset="0.5" Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}" />
        <GradientStop Offset="1" Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}" />
    </LinearGradientBrush>

    <!--=================================================================
        RibbonCheckBox
        ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonCheckBox}" TargetType="{x:Type ribbon:RibbonCheckBox}">
        <Setter Property="Background" Value="{StaticResource &#267;}" />
        <Setter Property="BorderBrush" Value="{StaticResource &#266;}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBackground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonCheckBox}">
                    <Border x:Name="MainBorder" Margin="1">
                        <StackPanel x:Name="StackPanel"
                                    Background="Transparent"
                                    Orientation="Vertical"
                                    Margin="1"
                                    SnapsToDevicePixels="True">
                            <Image x:Name="Image"
                                   Source="{TemplateBinding LargeImageSource}"
                                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                                   Height="32"
                                   Width="32"
                                   Margin="1"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                            <Grid x:Name="Grid"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="Center">
                                  <Grid VerticalAlignment="Top"
                                        HorizontalAlignment="Center"
                                        Margin="1">
                                    <Grid.ColumnDefinitions>
                                      <ColumnDefinition Width="Auto" />
                                      <ColumnDefinition Width="Auto" />
                                      <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid Grid.Column="0"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center">
                                        <Border x:Name="PART_CheckBorder"
                                                Background="White"
                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                Height="13"
                                                Width="13">
                                            <Grid>
                                                <Border x:Name="MiddleBorder"
                                                        BorderBrush="{TemplateBinding BorderBrush}"
                                                        Background="{TemplateBinding Background}"
                                                        BorderThickness="1"
                                                        Margin="1" />
                                                <Border x:Name="InnerBorder"
                                                        Background="Transparent"
                                                        BorderBrush="{StaticResource &#268;}"
                                                        BorderThickness="1"
                                                        Margin="1" />
                                                <Path x:Name="CheckMark"
                                                      Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"
                                                      Fill="{TemplateBinding Foreground}"
                                                      StrokeThickness="0.4"
                                                      Data="{StaticResource &#239;}"
                                                      FlowDirection="LeftToRight"
                                                      Opacity="0" />
                                            </Grid>
                                        </Border>
                                    </Grid>
                                    <Image x:Name="SmallImage"
                                           Grid.Column="1"
                                           Source="{TemplateBinding SmallImageSource}"
                                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                                           Height="16"
                                           Width="16"
                                           Margin="2,0,1,0"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           Visibility="Collapsed" />
                                    <Grid x:Name="TwoLineTextPanel"
                                          Grid.Column="2"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center">
                                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                                  Text="{TemplateBinding Label}"
                                                                  TextAlignment="Center"
                                                                  LineHeight="13px"
                                                                  LineStackingStrategy="BlockLineHeight"
                                                                  Margin="5,0,5,0" />
                                        <Rectangle x:Name="FocusVisual"
                                                   Margin="1"
                                                   StrokeThickness="1"
                                                   Stroke="Black"
                                                   StrokeDashArray="1 2"
                                                   Visibility="Collapsed"/>
                                    </Grid>
                                </Grid>
                            </Grid>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Large Variant -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                            <Setter Property="MinWidth" Value="44" />
                            <Setter Property="Height" Value="66"/>
                            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                        </DataTrigger>

                        <!-- Medium or Small Variant -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small">
                            <Setter Property="MinWidth" Value="22"/>
                            <Setter Property="Height" Value="{StaticResource &#262;}"/>
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SmallImage" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,2,0" />
                            <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Height" Value="Auto"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" >
                            <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" >
                            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SmallImage" Property="Visibility" Value="Collapsed" />
                            <Setter Property="Height" Value="{StaticResource &#262;}"/>
                        </DataTrigger>

                        <!-- IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="SmallImage" Property="Opacity" Value="0.5" />
                            <Setter TargetName="PART_CheckBorder" Property="Opacity" Value="0.5" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                        </Trigger>



                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{StaticResource &#269;}" />
                            <Setter TargetName="PART_CheckBorder" Property="Background" Value="{StaticResource &#270;}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
                            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        </DataTrigger>

                        <!-- IsMouseOver -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        </MultiDataTrigger>

                        <!-- IsChecked -->
                        <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                        </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.ExitActions>
                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                        </MultiDataTrigger>

                        <!-- IsFocused -->
                        <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                        </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                        </MultiDataTrigger>

                        <Trigger Property="ShowKeyboardCues" Value="True">
                            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!-- IsPressed -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_CheckBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                        </MultiDataTrigger>

                        <!-- (IsMouseOver || IsKeyboardFocused) && (IsChecked || IsPressed) -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#271;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#271;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#271;}" />
                        </MultiTrigger>

                        <!-- IsInControlGroup -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CheckMark" Property="Opacity" Value="1" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--=================================================================
            RibbonFilterMenuButton
            ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonFilterMenuButton}" TargetType="{x:Type ribbon:RibbonFilterMenuButton}" >
        <Style.Resources>
            <SolidColorBrush x:Key="&#273;" Color="#959595"/>
            <SolidColorBrush x:Key="&#274;" Color="#FFD232"/>    
        </Style.Resources>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{StaticResource &#273;}"/>
        <Setter Property="MouseOverBorderBrush" Value="{x:Null}"/>
        <Setter Property="MouseOverBackground" Value="{x:Null}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="6,0,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonFilterMenuButton}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="&#275;" TargetType="{x:Type ribbon:RibbonToggleButton}">
                            <Grid SnapsToDevicePixels="True">
                                <Border x:Name="OuterBorder"
                                    CornerRadius="2,2,0,0"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid Margin="{TemplateBinding Padding}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <ribbon:RibbonMenuItem x:Name="PART_CurrentFilterItem"
                                                               IsHitTestVisible="False"
                                                               Focusable="False">
                                            <ribbon:RibbonMenuItem.Template>
                                                <ControlTemplate TargetType="{x:Type ribbon:RibbonMenuItem}">
                                                    <Border Background="{TemplateBinding Background}"
                                                            BorderBrush="{TemplateBinding BorderBrush}"
                                                            BorderThickness="{TemplateBinding BorderThickness}">
                                                        <ContentPresenter ContentSource="Header" />
                                                    </Border>
                                                </ControlTemplate>
                                            </ribbon:RibbonMenuItem.Template>
                                        </ribbon:RibbonMenuItem>
                                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                                  Grid.Column="1"
                                                                  VerticalAlignment="Top"
                                                                  HorizontalAlignment="Left"
                                                                  LineHeight="13px"
                                                                  LineStackingStrategy="BlockLineHeight"
                                                                  PathData="{TemplateBinding ribbon:RibbonTwoLineText.PathData}"
                                                                  PathFill="{TemplateBinding Foreground}"
                                                                  PathStroke="{TemplateBinding Foreground}"
                                                                  Margin="1" />
                                    </Grid>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <!-- Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level. -->
                        <ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
                                                   Style="{x:Null}"
                                                   ribbon:RibbonTwoLineText.PathData="{StaticResource &#208;}"
                                                   Label="{TemplateBinding Label}"
                                                   LargeImageSource="{TemplateBinding LargeImageSource}"
                                                   SmallImageSource="{TemplateBinding SmallImageSource}"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   BorderBrush="{TemplateBinding BorderBrush}"
                                                   BorderThickness="1"
                                                   Background="{TemplateBinding Background}"
                                                   MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                   MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                   CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                   CheckedBackground="{TemplateBinding PressedBackground}"
                                                   FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
                                                   FocusedBackground="{TemplateBinding FocusedBackground}"
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   Padding="{TemplateBinding Padding}"
                                                   ClickMode="Press"
                                                   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                                   Template="{StaticResource &#275;}"/>

                        <!-- We only want the style-level setting of Foreground=White to apply to the RibbonToggleButton part;
                             the filter menu items should not be affected by this setting.  So, we ancestor-bind the Foreground they
                             will inherit to be the ancestor RibbonGallery's Foreground.  This only works if the RibbonFilterMenuButton
                             is used within a RibbonGallery.  If it's used outside of a RibbonGallery, all the filter menu items will
                             have White Foreground by default. -->
                        <Popup x:Name="PART_Popup"
                               TextElement.Foreground="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ribbon:RibbonGallery}}, Path=Foreground}"
                               HorizontalOffset="1"
                               VerticalOffset="-1"
                               AllowsTransparency="True"
                               Placement="Bottom"
                               IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                               Focusable="False"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                            <classic:SystemDropShadowChrome Name="Shadow" Color="Transparent" controls:KeyTipService.IsKeyTipScope="True"

                               RenderOptions.ClearTypeHint="Enabled"

                            >
                                <Border Name="MenuBorder"
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="2">
                                    <Border x:Name="SubMenuInnerBorder"
                                            Background="{StaticResource &#209;}"
                                            BorderThickness="0"
                                            CornerRadius="2">
                                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                        Margin="1"
                                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="BackgroundCanvas"
                                                        Height="0"
                                                        Width="0"
                                                        HorizontalAlignment="Left"
                                                        VerticalAlignment="Top">
                                                    <Rectangle x:Name="OpaqueRect"
                                                               Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                               Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                               Fill="{Binding ElementName=MenuBorder,Path=Background}"
                                                               RadiusX="2"
                                                               RadiusY="2" />
                                                    <Rectangle x:Name="OverlayRect"
                                                               Height="{Binding ElementName=SubMenuInnerBorder,Path=ActualHeight}"
                                                               Width="{Binding ElementName=SubMenuInnerBorder,Path=ActualWidth}"
                                                               Fill="{Binding ElementName=SubMenuInnerBorder,Path=Background}"
                                                               RadiusX="2"
                                                               RadiusY="2" />
                                                </Canvas>

                                                <ItemsPresenter x:Name="ItemsPresenter"
                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        Grid.IsSharedSizeScope="True" />

                                            </Grid>

                                        </ScrollViewer>
                                    </Border>
                                </Border>
                            </classic:SystemDropShadowChrome>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger SourceName="PART_SubMenuScrollViewer"
                                 Property="ScrollViewer.CanContentScroll"
                                 Value="false">
                            <Setter TargetName="OpaqueRect" 
                                    Property="Canvas.Top" 
                                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect" 
                                    Property="Canvas.Left" 
                                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                            <Setter TargetName="OverlayRect" 
                                    Property="Canvas.Top" 
                                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OverlayRect" 
                                    Property="Canvas.Left" 
                                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>

                        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <!-- HighContrast -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
                            <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
                            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                            <Setter TargetName="SubMenuInnerBorder" Property="Background"  Value="Transparent" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>

            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource &#274;}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource &#274;}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            </MultiDataTrigger>
    </Style.Triggers>
    </Style>

    <!--=================================================================
            RibbonGallery
        ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonGallery}"  TargetType="{x:Type ribbon:RibbonGallery}">
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.Background}" />
        <Setter Property="BorderThickness" Value="0,1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedItem}" />
        <Setter Property="PreviewCommandParameter" Value="{Binding RelativeSource={RelativeSource Self}, Path=HighlightedItem}" />
        
        <Setter Property="ItemsPanel">
            <Setter.Value>
              <ItemsPanelTemplate>
                <primitives:RibbonGalleryCategoriesPanel Name="ItemsHostPanel" IsItemsHost="True"/>
              </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonGallery}">
                    <Border x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <Border x:Name="InnerBorder"
                                Background="{StaticResource &#209;}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid x:Name="FilterHost">
                                    <ContentPresenter x:Name="PART_FilterContentPane"
                                                      ContentSource="FilterPaneContent"/>
                                    <ribbon:RibbonFilterMenuButton x:Name="PART_FilterMenuButton"
                                                                   Style="{TemplateBinding FilterMenuButtonStyle}"
                                                                   ItemContainerStyleSelector="{TemplateBinding FilterItemContainerStyleSelector}"
                                                                   ItemTemplateSelector="{TemplateBinding FilterItemTemplateSelector}"
                                                                   HorizontalContentAlignment="Left"
                                                                   Visibility="Collapsed"/>
                                </Grid>
                                <ScrollViewer x:Name="PART_ScrollViewer" 
                                              Grid.Row="1" 
                                              Padding="{TemplateBinding Padding}" 
                                              Focusable="False">

                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="BackgroundCanvas"
                                                    Height="0"
                                                    Width="0"
                                                    HorizontalAlignment="Left"
                                                    VerticalAlignment="Top">
                                                <Rectangle x:Name="OpaqueRect"
                                                           Height="{Binding ElementName=Border,Path=ActualHeight}"
                                                           Width="{Binding ElementName=Border,Path=ActualWidth}"
                                                           Fill="{Binding ElementName=Border,Path=Background}" />
                                                <Rectangle x:Name="OverlayRect"
                                                           Height="{Binding ElementName=Border,Path=ActualHeight}"
                                                           Width="{Binding ElementName=Border,Path=ActualWidth}"
                                                           Fill="{StaticResource &#209;}" />
                                            </Canvas>

                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                            KeyboardNavigation.DirectionalNavigation="Continue"
                                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                                    </Grid>

                                </ScrollViewer>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger SourceName="PART_ScrollViewer"
                                 Property="ScrollViewer.CanContentScroll"
                                 Value="false">
                            <Setter TargetName="OpaqueRect" 
                                    Property="Canvas.Top" 
                                    Value="{Binding ElementName=PART_ScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OpaqueRect" 
                                    Property="Canvas.Left" 
                                    Value="{Binding ElementName=PART_ScrollViewer, Path=HorizontalOffset}" />
                            <Setter TargetName="OverlayRect" 
                                    Property="Canvas.Top" 
                                    Value="{Binding ElementName=PART_ScrollViewer, Path=VerticalOffset}" />
                            <Setter TargetName="OverlayRect" 
                                    Property="Canvas.Left" 
                                    Value="{Binding ElementName=PART_ScrollViewer, Path=HorizontalOffset}" />
                        </Trigger>




















                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="CanUserFilter" Value="False">
                            <Setter TargetName="FilterHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="FilterPaneContent" Value="{x:Null}"/>
                                <Condition Property="FilterPaneContentTemplate" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_FilterMenuButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_FilterContentPane" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                            <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--=================================================================
            RibbonGalleryCategory
        ==================================================================-->
    <SolidColorBrush x:Key="&#276;" Color="#0C000000" />

    <Style x:Key="{x:Type ribbon:RibbonGalleryCategory}"  TargetType="{x:Type ribbon:RibbonGalleryCategory}">
        <Setter Property="Background" Value="{StaticResource &#276;}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment"
                        Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment"
                        Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <primitives:RibbonGalleryItemsPanel Name ="ItemsHostPanel" IsItemsHost="True"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonGalleryCategory}">
                    <Grid x:Name="MainGrid"
                          SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border x:Name="HeaderBorder" 
                                CornerRadius="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"                               
                                Visibility="{TemplateBinding HeaderVisibility}">

                            <ContentPresenter x:Name="PART_Header"
                                              ContentSource="Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" 
                                        Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                        </Trigger>


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            <Setter TargetName="HeaderBorder" Property="CornerRadius" Value="0"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--=================================================================
            RibbonGalleryItem
        ==================================================================-->
    <SolidColorBrush x:Key="&#277;" Color="#30FFFFFF" />
    <!-- Instead of using RibbonSharedResources.RibbonDisabledForegroundBrushKey, we need a slightly darker color to signify
         disabled TextElement.Foreground since the 0.5 Opacity setting will diminish Foreground's darkness. -->
    <SolidColorBrush x:Key="&#278;" Color="#FF3F3F3F" />
    
    <Style x:Key="{x:Type ribbon:RibbonGalleryItem}"  TargetType="{x:Type ribbon:RibbonGalleryItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.CheckedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="HorizontalContentAlignment"
                    Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment"
                    Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="0"/>

        <!--=================================================================
                Classic (the default template)
            ==================================================================-->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonGalleryItem}">
                    <Grid x:Name="MainGrid" 
                          SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder"
                                CornerRadius="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <Border x:Name="InnerBorder"
                                    CornerRadius="2"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="{TemplateBinding BorderThickness}" >
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Margin="2"
                                                  RecognizesAccessKey="True"/>
                            </Border>
                        </Border>
                        <Border x:Name="PressedStateOverlay"
                                CornerRadius="2"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#278;}" />
                        </Trigger>

                        <!-- HighContrast -->

                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="PressedStateOverlay" Property="CornerRadius" Value="0" />
                        </DataTrigger>

                        <!-- Highlighted -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </MultiDataTrigger>
                        
                        <!-- IsPressed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"  />
                            <Setter TargetName="PressedStateOverlay" Property="Background" Value="{StaticResource &#277;}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <Setter TargetName="PressedStateOverlay" Property="Background" Value="{StaticResource &#277;}" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </MultiDataTrigger>

                        <!-- IsSelected -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"  />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </MultiDataTrigger>
                        <!-- IsHighlighted + IsSelected -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#271;}" />
                        </MultiTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

<!--=================================================================
            RibbonGroup
    ==================================================================-->
    
<SolidColorBrush x:Key="&#279;" Color="#50FFFFFF"/>

<RadialGradientBrush x:Key="&#280;" GradientOrigin="0.5,1" Center="0.5,0.5"  RadiusX="1" RadiusY="0.5">
    <GradientStop Offset="0" Color="#30FFFFFF"/>
    <GradientStop Offset="1" Color="#08808080"/>
</RadialGradientBrush>

<RadialGradientBrush x:Key="&#281;" GradientOrigin="0.5,0.95" Center="0.5,1"  RadiusX="0.9" RadiusY="0.5">
    <GradientStop Offset="0" Color="#AAFFFFFF"/>
    <GradientStop Offset="1" Color="#40BBBBBB"/>
</RadialGradientBrush>

<SolidColorBrush x:Key="&#282;" Color="#40FFFFFF" />

<LinearGradientBrush x:Key="&#283;" StartPoint="0,0" EndPoint="0,1" >
    <GradientStop Color="#88FFFFFF" Offset="0.0"/>
    <GradientStop Color="#88DBE7F4" Offset="1.0"/>
</LinearGradientBrush>
<SolidColorBrush x:Key="&#284;" Color="#AEBECF" />
<SolidColorBrush x:Key="&#285;" Color="#FCFCFC" />

<LinearGradientBrush x:Key="&#286;" StartPoint="0.0,0.5" EndPoint="1.0,0.5">
    <GradientStop Color="#01FFFFFF" Offset="0.0"></GradientStop>
    <GradientStop Color="#80FFFFFF" Offset="0.5"></GradientStop>
    <GradientStop Color="#01FFFFFF" Offset="1.0"></GradientStop>
</LinearGradientBrush>

<LinearGradientBrush x:Key="&#287;" StartPoint="0,0" EndPoint="0,1" >
    <GradientStop Color="#F5F9FD" Offset="0" />
    <GradientStop Color="#EDF1F5" Offset="1" />
</LinearGradientBrush>
    
<LinearGradientBrush x:Key="&#288;" StartPoint="0,0" EndPoint="1,1">
    <GradientStop Offset="0" Color="#80FFFFFF"/>
    <GradientStop Offset="0.5" Color="#60FFFFFF"/>
    <GradientStop Offset="1" Color="#40808080"/>
</LinearGradientBrush>
<LinearGradientBrush x:Key="&#289;" StartPoint="0,0" EndPoint="1,1">
    <GradientStop Offset="0" Color="#80808080"/>
    <GradientStop Offset="1" Color="#80FFFFFF"/>
</LinearGradientBrush>

<!--
    Collapsed RibbonGroup is structed as RibbonGroup => RibbonToggleButton + Popup.  This is the
    Style for that RibbonToggleButton.
-->
<Style x:Key="&#290;" TargetType="{x:Type ribbon:RibbonToggleButton}">
    <Setter Property="Focusable" Value="True"/>
    <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonGroup}}, Path=BorderBrush}"/>
    <Setter Property="MouseOverBorderBrush" Value="Transparent"/>
    <Setter Property="MouseOverBackground" Value="{StaticResource &#282;}"/>
    <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="FocusedBorderBrush" Value="Transparent" />
    <Setter Property="CheckedBackground" Value="Transparent"/>
    <Setter Property="CheckedBorderBrush" Value="Transparent"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                <ControlTemplate.Resources>
                    <DataTemplate DataType="{x:Type system:String}">
                        <ribbon:RibbonTwoLineText Text="{Binding}"
                                                  Margin="2,4,2,0"
                                                  TextAlignment="Center"
                                                  VerticalAlignment="Top"
                                                  LineHeight="13px"
                                                  LineStackingStrategy="BlockLineHeight"
                                                  HasTwoLines="{TemplateBinding ribbon:RibbonTwoLineText.HasTwoLines}"
                                                  PathFill="{TemplateBinding TextElement.Foreground}"
                                                  PathData="{TemplateBinding ribbon:RibbonTwoLineText.PathData}" />
                    </DataTemplate>
                </ControlTemplate.Resources>
                <Grid x:Name="MainGrid"
                      SnapsToDevicePixels="True">
                    <Border x:Name="ButtonInnerBorder" 
                            CornerRadius="2" 
                            BorderThickness="1" 
                            Margin="1" 
                            BorderBrush="#EAF1FB" />
                    <Border x:Name="ButtonOuterBorder" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            Background="{TemplateBinding Background}"
                            CornerRadius="2"
                            BorderThickness="1" />
                    <Border x:Name="PART_HotBackground"
                            Opacity="0"
                            CornerRadius="2"
                            BorderThickness="1"
                            Background="{TemplateBinding MouseOverBackground}"
                            BorderBrush="{TemplateBinding MouseOverBorderBrush}" />
                    <Grid Margin="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" 
                                x:Name="ImageOuterBorder">
                            <Border x:Name="ImageMiddleBorder"  
                                    Margin="3"
                                    VerticalAlignment="Top"
                                    HorizontalAlignment="Center"
                                    BorderBrush="{StaticResource &#284;}"
                                    BorderThickness="0"
                                    Width="32"
                                    Height="32"
                                    CornerRadius="3">
                                <Grid>
                                    <Border x:Name="ImageInnerBorder" 
                                            BorderBrush="{StaticResource &#285;}"
                                            BorderThickness="0"
                                            CornerRadius="3" />
                                    <Image x:Name="GroupImage" Source="{TemplateBinding LargeImageSource}"
                                           Width="32"
                                           Height="32"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           RenderOptions.BitmapScalingMode="NearestNeighbor" />
                                </Grid>
                            </Border>
                        </Border>
                        <Border x:Name="LabelBorder" 
                                Grid.Row="1" 
                                Grid.RowSpan="2" 
                                Background="{StaticResource &#280;}">
                            <ContentPresenter ribbon:RibbonTwoLineText.HasTwoLines="True"
                                              ribbon:RibbonTwoLineText.PathData="{StaticResource &#208;}"/>
                        </Border>
                    </Grid>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="LargeImageSource" Value="{x:Null}">
                        <Setter TargetName="GroupImage" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}"/>
                        <Setter TargetName="GroupImage" Property="Width" Value="16"/>
                        <Setter TargetName="GroupImage" Property="Height" Value="16"/>
                        <Setter TargetName="ImageMiddleBorder" Property="BorderThickness" Value="1"/>
                        <Setter TargetName="ImageMiddleBorder" Property="Background" Value="{StaticResource &#283;}"/>
                        <Setter TargetName="ImageInnerBorder" Property="BorderThickness" Value="1"/>
                        <Setter TargetName="ImageInnerBorder" Property="Background" Value="{StaticResource &#279;}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="GroupImage" Property="Opacity" Value="0.5" />
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                    </Trigger>

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        <Setter TargetName="ImageMiddleBorder" Property="Background" Value="Transparent"/>
                        <Setter TargetName="ImageMiddleBorder" Property="BorderThickness" Value="0"/>
                        <Setter TargetName="ImageInnerBorder" Property="Background" Value="Transparent"/>
                        <Setter TargetName="ImageInnerBorder" Property="BorderThickness" Value="0"/>
                        <Setter TargetName="PART_HotBackground" Property="Background" Value="Transparent"/>
                        <Setter TargetName="LabelBorder" Property="Background" Value="Transparent"/>
                        <Setter TargetName="ButtonOuterBorder" Property="Background" Value="Transparent"/>
                        <Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        <Setter TargetName="ButtonOuterBorder" Property="CornerRadius" Value="0"/>
                        <Setter TargetName="ButtonInnerBorder" Property="CornerRadius" Value="0"/>
                        <Setter TargetName="ButtonInnerBorder" Property="BorderThickness" Value="0,1,0,0"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="ButtonInnerBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        <Setter TargetName="ButtonInnerBorder" Property="BorderThickness" Value="1"/>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="ButtonInnerBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        <Setter TargetName="ButtonInnerBorder" Property="BorderThickness" Value="1"/>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True"></Condition>
                            <Condition Property="IsChecked" Value="False"></Condition>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_HotBackground" Property="Opacity" Value="1"/>
                    </MultiTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HotBackground" Property="Opacity" Value="1"/>
                        <Setter TargetName="PART_HotBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"/>
                        <Setter TargetName="PART_HotBackground" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HotBackground" Property="Opacity" Value="1"/>
                        <Setter TargetName="PART_HotBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"/>
                        <Setter TargetName="PART_HotBackground" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"/>
                        <Setter TargetName="ImageOuterBorder" Property="Background" Value="#20BBBBBB"/>
                        <Setter TargetName="LabelBorder" Property="Background" Value="{StaticResource &#281;}"/>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>
    
<Style x:Key="&#291;" TargetType="{x:Type ribbon:RibbonToggleButton}">
    <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor" />
    <Setter Property="Focusable" Value="True"/>
    <Setter Property="BorderBrush" Value="#80808080"/>
    <Setter Property="Background" Value="#AAFFFFFF"/>
    <Setter Property="MouseOverBorderBrush" Value="Transparent"/>
    <Setter Property="MouseOverBackground" Value="{StaticResource &#288;}"/>
    <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="FocusedBorderBrush" Value="Transparent" />
    <Setter Property="CheckedBackground" Value="{StaticResource &#289;}"/>
    <Setter Property="CheckedBorderBrush" Value="Transparent"/>
    <Setter Property="Margin" Value="0,-1,0,0"/>
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                <Border Name="OuterBorder" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="1" 
                        CornerRadius="3"  
                        Background="{TemplateBinding Background}">
                    <Grid>
                        <Border Name="InnerBorder" 
                                CornerRadius="3" 
                                Background="{TemplateBinding MouseOverBackground}"
                                BorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                Opacity="0"/>
                        <Image Margin="3,2" Name="GroupImage" Source="{TemplateBinding SmallImageSource}"
                                               Width="16"
                                               Height="16"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               RenderOptions.BitmapScalingMode="{TemplateBinding RenderOptions.BitmapScalingMode}" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="GroupImage" Property="Opacity" Value="0.5" />
                    </Trigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Self}}" Value="Transparent"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="InnerBorder" Property="Opacity" Value="1"/>
                        <Setter TargetName="OuterBorder" Property="Background" Value="Transparent"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="InnerBorder" Property="Opacity" Value="1"/>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}"/>
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}"/>
                        <Setter TargetName="OuterBorder" Property="Background" Value="Transparent"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="InnerBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}"/>
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}"/>
                        <Setter TargetName="InnerBorder" Property="Opacity" Value="1"/>
                        <Setter TargetName="OuterBorder" Property="Background" Value="Transparent"/>
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="#AA808080"/>
                    </MultiDataTrigger>
                    

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                        <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0"/>
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="Background" Value="Transparent"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

<ControlTemplate x:Key="&#292;" TargetType="{x:Type ribbon:RibbonGroup}">
    <Border Name="GroupBorder"
            Background="{TemplateBinding Background}"
            Margin="1,2,0,0">
        <Grid x:Name="MainGrid">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="16" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border Name="PART_HotBackground"
                        Background="{TemplateBinding MouseOverBackground}"
                        BorderBrush="{TemplateBinding MouseOverBorderBrush}"
                        Opacity="0"
                        Grid.RowSpan="3"
                        CornerRadius="2"
                        BorderThickness="1"
                        SnapsToDevicePixels="True"/>
            <Border Name="SeparatorBorder" Background="{TemplateBinding BorderBrush}"
                        Grid.Column="1"
                        Grid.RowSpan="3"
                        Height="75"
                        Width="1"
                        VerticalAlignment="Center"
                        SnapsToDevicePixels="True" />
            <Border Margin="2,1,2,0" Padding="3,0,3,0">
                <Grid>
                    <ItemsPresenter Name="ItemsPresenter"/>
                    <ContentControl Name="PART_TemplateContentControl" Visibility="Collapsed" Focusable="False"/>
                </Grid>
            </Border>
            <Border Name="LabelSeparatorBorder" 
                    Grid.Row="1"
                    Height="1"
                    Margin="5,1,5,-1"/>
            <Grid Margin="2,0,2,0" Grid.Row="2">
                <ContentPresenter Name="PART_Header"
                                  TextElement.Foreground="{StaticResource &#203;}"
                                  ContentSource="Header"
                                  Margin="2,0,2,0"
                                  MaxHeight="16"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"/>
            </Grid>
        </Grid>
    </Border>
    <ControlTemplate.Triggers>
        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
            <Setter TargetName="PART_HotBackground" Property="Background" Value="Transparent"/>
            <Setter TargetName="SeparatorBorder" Property="Visibility" Value="Collapsed"/>
            <Setter TargetName="GroupBorder" Property="BorderThickness" Value="1"/>
            <Setter TargetName="GroupBorder" Property="Background" Value="Transparent"/>
            <Setter TargetName="GroupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
            <Setter TargetName="LabelSeparatorBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
        </DataTrigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="&#293;" TargetType="{x:Type ribbon:RibbonGroup}">
    <Grid x:Name="MainGrid">
        <ribbon:RibbonToggleButton x:Name="PART_ToggleButton" 
                                                   Margin="0,3,0,0"
                                                   Style="{StaticResource &#290;}"
                                                   Content="{TemplateBinding Header}"
                                                   ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                   ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                   ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                   Background="{TemplateBinding Background}"
                                                   LargeImageSource="{TemplateBinding LargeImageSource}"
                                                   SmallImageSource="{TemplateBinding SmallImageSource}"
                                                   IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Popup x:Name="PART_Popup"
                               AllowsTransparency="true"
                               Placement="Bottom"                               
                               PlacementTarget="{Binding ElementName=PART_ToggleButton}"
                               IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               Focusable="false"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
            <classic:SystemDropShadowChrome Name="Shdw" 
                                            Color="Transparent" 
                                            SnapsToDevicePixels="true" 
                                            CornerRadius="2" 
                                            Focusable="True" 
                                            FocusVisualStyle="{x:Null}"
                                            controls:KeyTipService.IsKeyTipScope="True"

                                            RenderOptions.ClearTypeHint="Enabled"

                                            >
                <Grid Name="PART_PopupGrid" Height="{TemplateBinding ActualHeight}" Margin="0,1.5,0,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" MinHeight="16" />
                    </Grid.RowDefinitions>
                    <Border Name="PopupBorder" Grid.RowSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                            BorderThickness="1"/>
                    <Border Name="PART_HotBackground"
                            Background="{TemplateBinding MouseOverBackground}"
                            BorderBrush="{TemplateBinding MouseOverBorderBrush}"
                            Opacity="0"
                            Grid.RowSpan="2"
                            CornerRadius="2"
                            BorderThickness="1"
                            SnapsToDevicePixels="True"/>
                    <Border Margin="2,3.5,2,0" Padding="3,0,3,0">
                        <Grid>
                            <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.TabNavigation="Cycle"
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    SnapsToDevicePixels="True"
                                                    Grid.IsSharedSizeScope="true"/>
                            <ContentControl Name="PART_TemplateContentControl" Visibility="Collapsed" Focusable="False"/>
                        </Grid>
                    </Border>
                    <Grid Margin="2,0,2,1" Grid.Row="1">
                        <ContentPresenter Name="PART_Header"
                                          TextElement.Foreground="{StaticResource &#203;}"
                                          ContentSource="Header"
                                          Margin="2,0,2,0"
                                          MaxHeight="15"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"/>
                    </Grid>
                </Grid>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                <Condition Binding="{Binding Path=Background, RelativeSource={RelativeSource Self}}" Value="Transparent"/>
            </MultiDataTrigger.Conditions>
            <Setter TargetName="PopupBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"/>
        </MultiDataTrigger>
        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="PART_HotBackground" Property="Background" Value="Transparent"/>
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            <Setter TargetName="Shdw" Property="CornerRadius" Value="0"/>
        </DataTrigger>

        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
            <Setter TargetName="Shdw" Property="Color" Value="{StaticResource &#214;}"/>
        </Trigger>

        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>

        <Trigger Property="IsInQuickAccessToolBar" Value="True">
            <Setter TargetName="PART_PopupGrid" Property="Height" Value="{StaticResource &#223;}"/>
            <Setter TargetName="PART_ToggleButton" Property="Style" Value="{StaticResource &#291;}"/>
            <Setter TargetName="PART_ToggleButton" Property="Margin" Value="0"/>
        </Trigger>

        <Trigger Property="IsDropDownOpen" Value="True">
            <Setter TargetName="MainGrid" Property="ToolTipService.IsEnabled" Value="False" />
        </Trigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<Style x:Key="{x:Type ribbon:RibbonGroup}" TargetType="{x:Type ribbon:RibbonGroup}">
    <Setter Property="Margin" Value="1" />
    <Setter Property="Padding" Value="3,0,3,0" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Template" Value="{StaticResource &#292;}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{StaticResource &#286;}"/>
    <Setter Property="MouseOverBorderBrush" Value="Transparent"/>
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
    <Style.Triggers>
        <Trigger Property="IsCollapsed" Value="True">
            <Setter Property="Template" Value="{StaticResource &#293;}" />
        </Trigger>
    </Style.Triggers>
</Style>

<LinearGradientBrush x:Key="&#236;" StartPoint="0,0" EndPoint="1,0" >
    <GradientStop Offset="0" Color="#A0FFFFFF" />
    <GradientStop Offset="0.4" Color="#80FFFFFF" />
    <GradientStop Offset="0.8" Color="#0AFFFFFF" />
    <GradientStop Offset="1" Color="#08FFFFFF" />
</LinearGradientBrush>

<!--=================================================================
    RibbonMenuItem
    ==================================================================-->

<Style x:Key="{x:Type ribbon:RibbonMenuItem}" TargetType="{x:Type ribbon:RibbonMenuItem}">
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Padding" Value="3,2,3,2" />
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
    <!-- FocusedBorderBrush and FocusedBackground are used when the control is added to QAT -->
    <Setter Property="ribbon:RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="ribbon:RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonMenuItem}">
                <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="2">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <!--Icon or check mark column-->
                                <ColumnDefinition MinWidth="22"
                                                  Width="Auto"
                                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                                <!--Header column-->
                                <ColumnDefinition Width="*"/>
                                <!--Submenu arrow column-->
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>

                            <Border x:Name="PART_SideBarBorder"
                                    Margin="0,-1,0,-1"
                                    BorderThickness="0,0,1,0"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                <Grid x:Name="SideBarOverlay"
                                      Background="{StaticResource &#236;}">
                                    <Image x:Name="Image"
                                           Width="16"
                                           Height="16"
                                           Margin="4,3,6,1"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Center"
                                           Source="{TemplateBinding ImageSource}" />
                                    <Border x:Name="CheckMarkBorder"
                                            Background="{TemplateBinding CheckedBackground}"
                                            BorderBrush="{TemplateBinding CheckedBorderBrush}"
                                            BorderThickness="1"
                                            Visibility="Hidden"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            Margin="1"
                                            Width="20"
                                            Height="20"
                                            CornerRadius="2">
                                        <Path x:Name="CheckMark"
                                              Margin="4,0,6,0"
                                              Visibility="Hidden"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Center"
                                              Fill="{TemplateBinding Foreground}"
                                              FlowDirection="LeftToRight"
                                              Data="{StaticResource &#239;}" />
                                    </Border>
                                </Grid>
                            </Border>

                            <ContentPresenter Grid.Column="1"
                                        ContentSource="Header"
                                        VerticalAlignment="Center"
                                        Margin="{TemplateBinding Padding}"
                                        RecognizesAccessKey="True" />

                            <Path x:Name="Arrow"
                                  Visibility="Collapsed"
                                  Grid.Column="2"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  Fill="{TemplateBinding Foreground}"
                                  Data="{StaticResource &#240;}" />
                        </Grid>
                    </Border>
                    <Popup x:Name="PART_Popup"
                                   AllowsTransparency="True"
                                   VerticalOffset="-1"
                                   Placement="Custom"
                                   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                   Focusable="False"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                        <classic:SystemDropShadowChrome x:Name="Shadow"
                                                        Color="Transparent"
                                                        controls:KeyTipService.IsKeyTipScope="True"

                                                        RenderOptions.ClearTypeHint="Enabled"

                        >
                            <Border Name="MenuBorder" 
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <Border x:Name="SubMenuInnerBorder"
                                        Background="{StaticResource &#209;}"
                                        CornerRadius="2">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="BackgroundCanvas"
                                                    Height="0"
                                                    Width="0"
                                                    HorizontalAlignment="Left"
                                                    VerticalAlignment="Top">
                                                    <Rectangle x:Name="OpaqueRect"
                                                                    Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                                    Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                                    Fill="{Binding ElementName=MenuBorder,Path=Background}"
                                                                    RadiusX="2"
                                                                    RadiusY="2" />
                                                    <Rectangle x:Name="OverlayRect"
                                                                    Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                                    Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                                    Fill="{StaticResource &#209;}"
                                                                    RadiusX="2"
                                                                    RadiusY="2" />
                                                </Canvas>

                                                <ItemsPresenter x:Name="ItemsPresenter"
                                                                    Margin="2"
                                                                    Grid.IsSharedSizeScope="True"
                                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                                    KeyboardNavigation.DirectionalNavigation="Cycle"/>

                                            </Grid>

                                        </ScrollViewer>
                                        <Border Name="ResizeControl"
                                                        Grid.Row="1"
                                                        Visibility="Collapsed"
                                                        Background="{StaticResource &#210;}"
                                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                        BorderThickness="0,1,0,0">
                                            <Thumb x:Name="PART_ResizeThumb"  
                                                           Style="{StaticResource &#211;}"/>
                                        </Border>
                                    </Grid>
                                </Border>
                            </Border>
                        </classic:SystemDropShadowChrome>
                    </Popup>
                </Grid>
                <ControlTemplate.Triggers>

                    <Trigger SourceName="PART_SubMenuScrollViewer"
                             Property="ScrollViewer.CanContentScroll"
                             Value="false">
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                    </Trigger>

                    <Trigger Property="HasGallery" Value="True">
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="HasItems" Value="True"/>
                            <Condition Property="IsCheckable" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="Arrow" Property="Visibility" Value="Visible" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="true"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="false"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsDropDownPositionedLeft" Value="true" />
                            <Condition Property="CanUserResizeHorizontally" Value="true"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
                    </MultiTrigger>
                    <Trigger Property="ImageSource" Value="{x:Null}">
                        <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="IsCheckable" Value="True">
                        <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                        <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
                    </Trigger>
                    <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                        <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                    </Trigger>
                    <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                        <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                        <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                        <Setter TargetName="Arrow" Property="Opacity" Value="0.5" />
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                    </Trigger>


                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                        <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                        <Setter TargetName="Border" Property="Background" Value="Transparent" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                        <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
                        <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
                        <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
                        <Setter TargetName="SideBarOverlay" Property="Background"  Value="Transparent" />
                        <Setter TargetName="PART_SideBarBorder" Property="Background"  Value="Transparent" />
                        <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="SubMenuInnerBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                    </DataTrigger>
                    <!-- HighContrast && (IsHighlighted || IsPressed ) -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        <Setter TargetName="Arrow" Property="Opacity" Value="1" />
                        <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                        <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>


    <!--=================================================================
        RibbonRadioButton
        ==================================================================-->

    <Style x:Key="{x:Type ribbon:RibbonRadioButton}" TargetType="{x:Type ribbon:RibbonRadioButton}" >
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBorderBrush}" />
        <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBackground}" />
        <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBorderBrush}" />
        <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBackground}" />
        <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
        <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
        <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBorderBrush}" />
        <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBackground}" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
        <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
        <Setter Property="QuickAccessToolBarControlSizeDefinition">
            <Setter.Value>
                <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ribbon:RibbonRadioButton}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border x:Name="MiddleBorder"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}" >
                            <Border x:Name="InnerBorder"
                                    Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    CornerRadius="{TemplateBinding CornerRadius}">
                                <StackPanel x:Name="StackPanel"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <Image x:Name="PART_Image"
                                           Source="{TemplateBinding LargeImageSource}"
                                           Width="32"
                                           Height="32"
                                           Margin="1,1,1,2"
                                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                    <Grid x:Name="Grid"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center">
                                        <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                                  Text="{TemplateBinding Label}"
                                                                  TextAlignment="Center"
                                                                  VerticalAlignment="Top"
                                                                  HorizontalAlignment="Center"
                                                                  LineHeight="13px"
                                                                  LineStackingStrategy="BlockLineHeight"
                                                                  Margin="1,1,1,0" />
                                    </Grid>
                                </StackPanel>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        
                        <!-- Large Variant -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                            <Setter Property="MinWidth" Value="44"/>
                            <Setter Property="Height" Value="66"/>
                            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                        </DataTrigger>

                        <!-- Medium or Small Variant -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small">
                            <Setter Property="Height" Value="{StaticResource &#262;}"/>
                            <Setter TargetName="PART_Image" Property="Margin" Value="1,0,1,0" />
                            <Setter TargetName="PART_Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                            <Setter TargetName="PART_Image" Property="Width" Value="16" />
                            <Setter TargetName="PART_Image" Property="Height" Value="16" />
                            <Setter TargetName="TwoLineText" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="TwoLineText" Property="Margin" Value="1" />
                            <Setter TargetName="StackPanel" Property="Orientation" Value="Horizontal" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Height" Value="Auto"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" >
                            <Setter TargetName="TwoLineText" Property="Text" Value="{x:Null}" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" >
                            <Setter TargetName="PART_Image" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>

                        <!-- IsMouseOver -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
                        </Trigger>

                        <!-- IsFocused -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
                        </Trigger>

                        <!-- IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Image" Property="Opacity" Value="0.5" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                        </Trigger>

                        <!-- IsChecked -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#258;}" />
                        </Trigger>

                        <!-- IsPressed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"  />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>

                        <!-- (IsMouseOver || IsKeyboardFocused) && (IsChecked || IsPressed) -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{StaticResource &#271;}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{StaticResource &#271;}" />

                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="MiddleBorder" Property="Background" Value="{StaticResource &#271;}" />
                        </MultiTrigger>

                        <!-- IsInControlGroup -->
                        <Trigger Property="IsInControlGroup" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                            <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                        </Trigger>

                        <!-- HighContrast -->


                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="MiddleBorder" Property="CornerRadius" Value="0" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




<!--=================================================================
        RibbonSplitButton
        ==================================================================-->
    
<LinearGradientBrush x:Key="&#297;" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#FFFFFFFF" />
    <GradientStop Offset="0.19" Color="#AAFFFFFF" />
    <GradientStop Offset="0.39" Color="#77FFFFFF" />
    <GradientStop Offset="0.39" Color="#77FFFFFF" />
    <GradientStop Offset="0.79" Color="#AAFFFFFF" />
    <GradientStop Offset="1" Color="#FFFFFFFF" />
</LinearGradientBrush>

<Style TargetType="{x:Type ribbon:RibbonSplitButton}">
    <Style.Resources>
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type ribbon:RibbonSeparator}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.Background}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                        <Border x:Name="MainBorder"
                                BorderThickness="0,1,0,1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}">
                            <Border x:Name="Overlay"
                                    Background="{StaticResource &#236;}">
                                <TextBlock x:Name="Text" 
                                           Margin="2,1,2,1"
                                           Text="{TemplateBinding Label}" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>

                            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                                <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Label" Value="{x:Null}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                                <Grid x:Name="Grid" SnapsToDevicePixels="True" Margin="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="22"
                                                          Width="Auto"
                                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="14" />
                                    </Grid.ColumnDefinitions>

                                    <Border x:Name="SideBarBorder"
                                            BorderThickness="0,0,1,0"
                                            Margin="0,-1,0,-1"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}">
                                        <Border x:Name="SideBarOverlay"
                                                Background="{StaticResource &#236;}">
                                        </Border>
                                    </Border>
                                    <Line x:Name="Line"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Margin="2,0,0,0"
                                          X1="0"
                                          Y1="0"
                                          X2="1"
                                          Y2="0"
                                          Stroke="{TemplateBinding BorderBrush}"
                                          StrokeThickness="1"
                                          Stretch="Fill" />
                                </Grid>

                                <ControlTemplate.Triggers>

                                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                        <Setter TargetName="SideBarBorder" Property="Background"  Value="Transparent" />
                                        <Setter TargetName="SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                        <Setter TargetName="SideBarOverlay" Property="Background"  Value="Transparent" />
                                        <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Style.Resources>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="2,0,2,0" />
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.MouseOverBackground}" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.PressedBackground}" />
    <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
    <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
    <Setter Property="ToolTipService.IsEnabled" Value="false" />
    <Setter Property="QuickAccessToolBarControlSizeDefinition">
        <Setter.Value>
            <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
        </Setter.Value>
    </Setter>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonSplitButton}">
                <Grid x:Name="MainGrid"
                      SnapsToDevicePixels="True">
                    <Border x:Name="OuterBorder"
                            Background="{TemplateBinding Background}"
                            CornerRadius="2">
                        <Border x:Name="InnerBorder" 
                                Background="Transparent"
                                CornerRadius="2">
                            <StackPanel x:Name="StackPanel" Orientation="Horizontal">
                                <!-- Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level. -->
                                <ribbon:RibbonButton x:Name="PART_HeaderButton"
                                                     Style="{x:Null}"
                                                     Template="{StaticResource &#254;}"
                                                     Label="{TemplateBinding Label}"
                                                     LargeImageSource="{TemplateBinding LargeImageSource}"
                                                     SmallImageSource="{TemplateBinding SmallImageSource}"
                                                     BorderBrush="{TemplateBinding BorderBrush}"
                                                     BorderThickness="{TemplateBinding BorderThickness}"
                                                     Background="Transparent"
                                                     CornerRadius="2,0,0,2"
                                                     Focusable="False"
                                                     ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                                     ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                                     ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                                     ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                                     ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                                     ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                                     MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                     MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                     PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                     PressedBackground="{TemplateBinding PressedBackground}"
                                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                     Padding="{TemplateBinding Padding}"
                                                     Command="{TemplateBinding Command}"
                                                     CommandParameter="{TemplateBinding CommandParameter}"
                                                     CommandTarget="{TemplateBinding CommandTarget}"
                                                     KeyTip="{TemplateBinding HeaderKeyTip}"
                                                     QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                                     CanAddToQuickAccessToolBarDirectly="True"
                                                     ToolTipService.InitialShowDelay="{StaticResource &#205;}"
                                                     ToolTipService.ShowDuration="{StaticResource &#206;}"
                                                     ToolTipService.BetweenShowDelay="{StaticResource &#207;}">
                                    <ribbon:RibbonButton.ControlSizeDefinition>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Large" IsLabelVisible="False" />
                                    </ribbon:RibbonButton.ControlSizeDefinition>
                                    <ribbon:RibbonButton.QuickAccessToolBarControlSizeDefinition>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
                                    </ribbon:RibbonButton.QuickAccessToolBarControlSizeDefinition>
                                    <ribbon:RibbonButton.Resources>
                                        <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}"
                                                    Left="1"
                                                    Top="1"
                                                    Right="1"
                                                    Bottom="0" />
                                    </ribbon:RibbonButton.Resources>
                                </ribbon:RibbonButton>
                                <Grid>
                                    <Border x:Name="UnderlayBorder" Opacity="0.5" Visibility="Collapsed" Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"/>
                                    <!-- Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level. -->
                                    <ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
                                                               Style="{x:Null}"
                                                               Template="{StaticResource &#294;}"
                                                               Label="{TemplateBinding Label}"
                                                               ribbon:RibbonTwoLineText.PathData="{StaticResource &#208;}"
                                                               BorderBrush="{TemplateBinding BorderBrush}"
                                                               Background="Transparent"
                                                               CornerRadius="0,2,2,0"
                                                               FocusVisualStyle="{x:Null}"
                                                               MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                               MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                               PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                               PressedBackground="{TemplateBinding PressedBackground}"
                                                               CheckedBorderBrush="{TemplateBinding CheckedBorderBrush}"
                                                               CheckedBackground="{TemplateBinding CheckedBackground}"
                                                               FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
                                                               FocusedBackground="{TemplateBinding FocusedBackground}"
                                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                               VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                               Padding="{TemplateBinding Padding}"
                                                               ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                                               ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                                               ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                                               ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                                               ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                                               ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                                               ClickMode="Press"
                                                               IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                                               ToolTipService.InitialShowDelay="{StaticResource &#205;}"
                                                               ToolTipService.ShowDuration="{StaticResource &#206;}"
                                                               ToolTipService.BetweenShowDelay="{StaticResource &#207;}">
                                        <ribbon:RibbonToggleButton.ControlSizeDefinition>
                                            <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="False" />
                                        </ribbon:RibbonToggleButton.ControlSizeDefinition>
                                    </ribbon:RibbonToggleButton>
                                </Grid>
                            </StackPanel>
                        </Border>
                    </Border>

                    <Popup x:Name="PART_Popup"
                           HorizontalOffset="1"
                           VerticalOffset="-1"
                           AllowsTransparency="True"
                           Placement="Bottom"
                           IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                           Focusable="False"
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                        <classic:SystemDropShadowChrome Name="Shadow" Color="Transparent" controls:KeyTipService.IsKeyTipScope="True"

                            RenderOptions.ClearTypeHint="Enabled"

                        >
                            <Border Name="MenuBorder"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <Border x:Name="SubMenuInnerBorder"
                                        Background="{StaticResource &#209;}"
                                        BorderThickness="0"
                                        CornerRadius="2">
                                    <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                      Grid.Row="1"
                                                      Margin="1"
                                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="BackgroundCanvas"
                                                        Height="0"
                                                        Width="0"
                                                        HorizontalAlignment="Left"
                                                        VerticalAlignment="Top">
                                                    <Rectangle x:Name="OpaqueRect"
                                                               Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                               Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                               Fill="{Binding ElementName=MenuBorder,Path=Background}"
                                                               RadiusX="2"
                                                               RadiusY="2" />
                                                    <Rectangle x:Name="OverlayRect"
                                                               Height="{Binding ElementName=SubMenuInnerBorder,Path=ActualHeight}"
                                                               Width="{Binding ElementName=SubMenuInnerBorder,Path=ActualWidth}"
                                                               Fill="{Binding ElementName=SubMenuInnerBorder,Path=Background}"
                                                               RadiusX="2"
                                                               RadiusY="2" />
                                                </Canvas>

                                                <ItemsPresenter x:Name="ItemsPresenter"
                                                                KeyboardNavigation.TabNavigation="Cycle"
                                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                Grid.IsSharedSizeScope="True" />

                                            </Grid>

                                        </ScrollViewer>
                                        <Border Name="ResizeControl"
                                                Grid.Row="2"
                                                Visibility="Collapsed"
                                                Background="{StaticResource &#210;}" 
                                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                BorderThickness="0,1,0,0">
                                            <Thumb x:Name="PART_ResizeThumb"  
                                                   Style="{StaticResource &#211;}"/>
                                        </Border>
                                    </Grid>
                                </Border>
                            </Border>
                        </classic:SystemDropShadowChrome>
                    </Popup>
                </Grid>
                <ControlTemplate.Triggers>

                    <Trigger SourceName="PART_SubMenuScrollViewer"
                             Property="ScrollViewer.CanContentScroll"
                             Value="false">
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                    </Trigger>

                    <Trigger Property="IsDropDownOpen" Value="True">
                        <Setter TargetName="PART_HeaderButton" Property="ToolTipService.IsEnabled" Value="False" />
                        <Setter TargetName="PART_ToggleButton" Property="ToolTipService.IsEnabled" Value="False" />
                    </Trigger>
                    <Trigger Property="HasGallery" Value="True">
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                    </Trigger>

                    <!-- Large Variant -->
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                        <Setter Property="MinWidth" Value="44"/>
                        <Setter TargetName="PART_HeaderButton" Property="Height" Value="37" />
                        <Setter TargetName="PART_ToggleButton" Property="Height" Value="29" />
                        <Setter TargetName="PART_ToggleButton" Property="ribbon:RibbonTwoLineText.HasTwoLines" Value="true" />
                        <Setter TargetName="StackPanel" Property="Orientation" Value="Vertical" />
                        <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="2,2,0,0" />
                        <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0,0,2,2" />
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                            <Setter.Value>
                                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
                            </Setter.Value>
                        </Setter>
                    </MultiDataTrigger>
                    
                    <!--Small or Medium variant-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                            <Setter.Value>
                                <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
                            </Setter.Value>
                        </Setter>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                            <Setter.Value>
                                <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                            <Setter.Value>
                                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
                            </Setter.Value>
                        </Setter>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                            <Setter.Value>
                                <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="True" />
                            </Setter.Value>
                        </Setter>
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True">
                        <Setter TargetName="PART_HeaderButton"  Property="Height" Value="Auto"/>
                        <Setter TargetName="PART_ToggleButton"  Property="Height" Value="Auto"/>
                    </DataTrigger>

                    <!--Collapsed Variant-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                            <Setter.Value>
                                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="False" />
                            </Setter.Value>
                        </Setter>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                            <Setter.Value>
                                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="False" />
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                            <Setter.Value>
                                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
                            </Setter.Value>
                        </Setter>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                            <Setter.Value>
                                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
                            </Setter.Value>
                        </Setter>
                    </MultiDataTrigger>

                    <!-- IsMouseOver -->
                    <Trigger Property="IsMouseOver" Value="True" SourceName="PART_HeaderButton">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#297;}" />
                        <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" SourceName="PART_ToggleButton"/>
                            <Condition Property="IsEnabled" Value="True" SourceName="PART_HeaderButton" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#297;}" />
                        <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                    </MultiTrigger>

                    <!-- IsFocused -->
                    <Trigger Property="IsKeyboardFocused" Value="True" SourceName="PART_ToggleButton">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                        <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                    </Trigger>

                    <!-- IsChecked -->
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                        <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True" SourceName="PART_ToggleButton">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                        <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#297;}" />
                        <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                    </Trigger>

                    <!-- IsInControlGroup -->
                    <Trigger Property="IsInControlGroup" Value="True">
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                        <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                        <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0" />
                        <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="0" />
                    </Trigger>

                    <!-- DropDown Triggers-->
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="true"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="false"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                    </MultiTrigger>
                    <Trigger Property="IsDropDownPositionedAbove" Value="true">
                        <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                        <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsDropDownPositionedAbove" Value="true" />
                            <Condition Property="CanUserResizeHorizontally" Value="true"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
                    </MultiTrigger>
                    <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                        <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
                    </Trigger>
                    <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
                        <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}"/>
                    </Trigger>
                    <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                    </Trigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsEnabled" Value="False" SourceName="PART_HeaderButton" />
                            <Condition Property="IsMouseOver" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                        <Setter TargetName="UnderlayBorder" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                    </MultiTrigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                    </Trigger>

                    <!-- HighContrast -->

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                        <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
                        <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
                        <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="SubMenuInnerBorder" Property="Background"  Value="Transparent" />
                        <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="0" />
                        <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0" />
                        <Setter TargetName="UnderlayBorder" Property="Opacity" Value="0" />
                    </DataTrigger>

                     <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                     </MultiDataTrigger>
                     <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="UnderlayBorder" Property="Opacity" Value="1" />
                        <Setter TargetName="UnderlayBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                     </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=PART_ToggleButton,Path=IsKeyboardFocused}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </MultiDataTrigger>

                    <Trigger Property="IsInQuickAccessToolBar" Value="True">
                        <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="False" />
                    </Trigger>
                    
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Style.Triggers>
        <!-- Header is a RibbonToggleButton -->
        <Trigger Property="IsCheckable" Value="True">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ribbon:RibbonSplitButton}">
                        <Grid x:Name="MainGrid"
                              SnapsToDevicePixels="True">
                            <Border x:Name="OuterBorder"
                                    Background="{TemplateBinding Background}"
                                    CornerRadius="2">
                                <Border x:Name="InnerBorder" 
                                        Background="Transparent"
                                        CornerRadius="2">
                                    <StackPanel x:Name="StackPanel" Orientation="Horizontal">
                                        <!-- Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level. -->
                                        <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                                                   Style="{x:Null}"
                                                                   Template="{StaticResource &#294;}"
                                                                   Label="{TemplateBinding Label}"
                                                                   LargeImageSource="{TemplateBinding LargeImageSource}"
                                                                   SmallImageSource="{TemplateBinding SmallImageSource}"
                                                                   BorderBrush="{TemplateBinding BorderBrush}"
                                                                   BorderThickness="{TemplateBinding BorderThickness}"
                                                                   Background="Transparent"
                                                                   CornerRadius="2,0,0,2"
                                                                   Focusable="False"
                                                                   ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                                                   ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                                                   ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                                                   ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                                                   ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                                                   ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                                                   MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                                   MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                                   PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                                   PressedBackground="{TemplateBinding PressedBackground}"
                                                                   CheckedBorderBrush="{TemplateBinding CheckedBorderBrush}"
                                                                   CheckedBackground="{TemplateBinding CheckedBackground}"
                                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                   Padding="{TemplateBinding Padding}"
                                                                   Command="{TemplateBinding Command}"
                                                                   CommandParameter="{TemplateBinding CommandParameter}"
                                                                   CommandTarget="{TemplateBinding CommandTarget}"
                                                                   KeyTip="{TemplateBinding HeaderKeyTip}"
                                                                   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Mode=TwoWay}"
                                                                   QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                                                   CanAddToQuickAccessToolBarDirectly="True"
                                                                   ToolTipService.InitialShowDelay="{StaticResource &#205;}"
                                                                   ToolTipService.ShowDuration="{StaticResource &#206;}"
                                                                   ToolTipService.BetweenShowDelay="{StaticResource &#207;}">
                                            <ribbon:RibbonToggleButton.ControlSizeDefinition>
                                                <ribbon:RibbonControlSizeDefinition ImageSize="Large" IsLabelVisible="False" />
                                            </ribbon:RibbonToggleButton.ControlSizeDefinition>
                                            <ribbon:RibbonToggleButton.QuickAccessToolBarControlSizeDefinition>
                                                <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="False" />
                                            </ribbon:RibbonToggleButton.QuickAccessToolBarControlSizeDefinition>
                                            <ribbon:RibbonToggleButton.Resources>
                                                <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}"
                                                            Left="1"
                                                            Top="1"
                                                            Right="1"
                                                            Bottom="0" />
                                            </ribbon:RibbonToggleButton.Resources>
                                        </ribbon:RibbonToggleButton>
                                        <Grid>
                                            <Border x:Name="UnderlayBorder" Opacity="0.5" Visibility="Collapsed" Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}"/>
                                            <!-- Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level. -->
                                            <ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
                                                                       Style="{x:Null}"
                                                                       Template="{StaticResource &#294;}"
                                                                       Label="{TemplateBinding Label}"
                                                                       ribbon:RibbonTwoLineText.PathData="{StaticResource &#208;}"
                                                                       BorderBrush="{TemplateBinding BorderBrush}"
                                                                       Background="Transparent"
                                                                       CornerRadius="0,2,2,0"
                                                                       FocusVisualStyle="{x:Null}"
                                                                       MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                                                       MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                                                       PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                                       PressedBackground="{TemplateBinding PressedBackground}"
                                                                       CheckedBorderBrush="{TemplateBinding CheckedBorderBrush}"
                                                                       CheckedBackground="{TemplateBinding CheckedBackground}"
                                                                       FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
                                                                       FocusedBackground="{TemplateBinding FocusedBackground}"
                                                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                       Padding="{TemplateBinding Padding}"
                                                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                                                       ClickMode="Press"
                                                                       IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}"
                                                                       ToolTipService.InitialShowDelay="{StaticResource &#205;}"
                                                                       ToolTipService.ShowDuration="{StaticResource &#206;}"
                                                                       ToolTipService.BetweenShowDelay="{StaticResource &#207;}">
                                                <ribbon:RibbonToggleButton.ControlSizeDefinition>
                                                    <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="False" />
                                                </ribbon:RibbonToggleButton.ControlSizeDefinition>
                                            </ribbon:RibbonToggleButton>
                                            <Border x:Name="OverlayBottomBorder" BorderBrush="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="2" VerticalAlignment="Top"/>
                                            <Border x:Name="OverlayTopBorder" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" Margin="1,0"/>
                                        </Grid>
                                    </StackPanel>
                                </Border>
                            </Border>

                            <Popup x:Name="PART_Popup"
                                   HorizontalOffset="1"
                                   VerticalOffset="-1"
                                   AllowsTransparency="True"
                                   Placement="Bottom"
                                   IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                                   Focusable="False"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <classic:SystemDropShadowChrome Name="Shadow" Color="Transparent" controls:KeyTipService.IsKeyTipScope="True"

                                    RenderOptions.ClearTypeHint="Enabled"

                                >
                                    <Border Name="MenuBorder"
                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="2">
                                        <Border x:Name="SubMenuInnerBorder"
                                                Background="{StaticResource &#209;}"
                                                BorderThickness="0"
                                                CornerRadius="2">
                                            <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                                <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                              Grid.Row="1"
                                                              Margin="1"
                                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                                        <Canvas x:Name="BackgroundCanvas"
                                                                Height="0"
                                                                Width="0"
                                                                HorizontalAlignment="Left"
                                                                VerticalAlignment="Top">
                                                            <Rectangle x:Name="OpaqueRect"
                                                                       Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                                       Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                                       Fill="{Binding ElementName=MenuBorder,Path=Background}"
                                                                       RadiusX="2"
                                                                       RadiusY="2" />
                                                            <Rectangle x:Name="OverlayRect"
                                                                       Height="{Binding ElementName=SubMenuInnerBorder,Path=ActualHeight}"
                                                                       Width="{Binding ElementName=SubMenuInnerBorder,Path=ActualWidth}"
                                                                       Fill="{Binding ElementName=SubMenuInnerBorder,Path=Background}"
                                                                       RadiusX="2"
                                                                       RadiusY="2" />
                                                        </Canvas>

                                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                        Grid.IsSharedSizeScope="True" />

                                                    </Grid>

                                                </ScrollViewer>
                                                <Border Name="ResizeControl"
                                                        Grid.Row="2"
                                                        Visibility="Collapsed"
                                                        Background="{StaticResource &#210;}" 
                                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                        BorderThickness="0,1,0,0">
                                                    <Thumb x:Name="PART_ResizeThumb"  
                                                           Style="{StaticResource &#211;}"/>
                                                </Border>
                                            </Grid>
                                        </Border>
                                    </Border>
                                </classic:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <Trigger SourceName="PART_SubMenuScrollViewer"
                                     Property="ScrollViewer.CanContentScroll"
                                     Value="false">
                                <Setter TargetName="OpaqueRect" 
                                        Property="Canvas.Top" 
                                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                <Setter TargetName="OpaqueRect" 
                                        Property="Canvas.Left" 
                                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                <Setter TargetName="OverlayRect" 
                                        Property="Canvas.Top" 
                                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                <Setter TargetName="OverlayRect" 
                                        Property="Canvas.Left" 
                                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                            </Trigger>

                            <Trigger Property="IsDropDownOpen" Value="True">
                                <Setter TargetName="PART_HeaderButton" Property="ToolTipService.IsEnabled" Value="False" />
                                <Setter TargetName="PART_ToggleButton" Property="ToolTipService.IsEnabled" Value="False" />
                            </Trigger>
                            <Trigger Property="HasGallery" Value="True">
                                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                            </Trigger>

                            <!-- Large Variant -->
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                                <Setter Property="MinWidth" Value="44"/>
                                <Setter TargetName="PART_HeaderButton" Property="Height" Value="37" />
                                <Setter TargetName="PART_ToggleButton" Property="Height" Value="29" />
                                <Setter TargetName="PART_ToggleButton" Property="ribbon:RibbonTwoLineText.HasTwoLines" Value="true" />
                                <Setter TargetName="StackPanel" Property="Orientation" Value="Vertical" />
                                <Setter TargetName="PART_HeaderButton" Property="VerticalContentAlignment" Value="Stretch" />
                                <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="2,2,0,0" />
                                <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0,0,2,2" />
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                                    <Setter.Value>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger>

                            <!-- Medium or Small Variant-->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                    <Setter.Value>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                    <Setter.Value>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                                    <Setter.Value>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                    <Setter.Value>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="True" />
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True">
                                <Setter TargetName="PART_HeaderButton"  Property="Height" Value="Auto"/>
                                <Setter TargetName="PART_ToggleButton"  Property="Height" Value="Auto"/>
                            </DataTrigger>

                            <!--Collapsed Variant-->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                    <Setter.Value>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="False" />
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="DropDown" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                    <Setter.Value>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="False" />
                                    </Setter.Value>
                                </Setter>
                                <Setter TargetName="PART_ToggleButton" Property="ControlSizeDefinition">
                                    <Setter.Value>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=LabelPosition}" Value="Header" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_HeaderButton" Property="ControlSizeDefinition">
                                    <Setter.Value>
                                        <ribbon:RibbonControlSizeDefinition ImageSize="Collapsed" IsLabelVisible="True" />
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger>

                            <!-- IsMouseOver -->
                            <Trigger Property="IsMouseOver" Value="True" SourceName="PART_HeaderButton">
                                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                                <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#297;}" />
                                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" SourceName="PART_ToggleButton"/>
                                    <Condition Property="IsEnabled" Value="True" SourceName="PART_HeaderButton" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                                <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#297;}" />
                                <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            </MultiTrigger>

                            <!-- IsFocused -->
                            <Trigger Property="IsKeyboardFocused" Value="True" SourceName="PART_ToggleButton">
                                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                                <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                            </Trigger>

                            <!-- IsChecked -->
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True" SourceName="PART_ToggleButton">
                                <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                                <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource &#297;}" />
                                <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            </Trigger>

                            <!-- IsInControlGroup -->
                            <Trigger Property="IsInControlGroup" Value="True">
                                <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                                <Setter TargetName="OuterBorder" Property="BorderThickness" Value="0,0,1,0" />
                                <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                                <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                                <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0" />
                                <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="0" />
                            </Trigger>

                            <!-- DropDown Triggers-->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="CanUserResizeHorizontally" Value="true"/>
                                    <Condition Property="CanUserResizeVertically" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="CanUserResizeHorizontally" Value="false"/>
                                    <Condition Property="CanUserResizeVertically" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                            </MultiTrigger>
                            <Trigger Property="IsDropDownPositionedAbove" Value="true">
                                <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                                <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsDropDownPositionedAbove" Value="true" />
                                    <Condition Property="CanUserResizeHorizontally" Value="true"/>
                                    <Condition Property="CanUserResizeVertically" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
                            </MultiTrigger>
                            <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                                <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
                            </Trigger>
                            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
                                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}"/>
                            </Trigger>
                            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                            </Trigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsEnabled" Value="False" SourceName="PART_HeaderButton" />
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                                <Setter TargetName="UnderlayBorder" Property="Visibility" Value="Visible" />
                                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            </MultiTrigger>
                            
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                            </Trigger>

                            <!-- HighContrast -->

                            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
                                <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
                                <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                                <Setter TargetName="OuterBorder" Property="Background"  Value="Transparent" />
                                <Setter TargetName="OuterBorder" Property="CornerRadius"  Value="0" />
                                <Setter TargetName="SubMenuInnerBorder" Property="Background"  Value="Transparent" />
                                <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                                <Setter TargetName="PART_HeaderButton" Property="CornerRadius" Value="0" />
                                <Setter TargetName="PART_ToggleButton" Property="CornerRadius" Value="0" />
                                <Setter TargetName="UnderlayBorder" Property="Opacity" Value="0" />
                            </DataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                                <Setter TargetName="OverlayBottomBorder" Property="BorderThickness" Value="1" />
                                <Setter TargetName="OverlayTopBorder" Property="BorderThickness" Value="0,1,0,0" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                    <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="True" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                    <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="UnderlayBorder" Property="Opacity" Value="1" />
                                <Setter TargetName="UnderlayBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=PART_ToggleButton,Path=IsKeyboardFocused}" Value="True" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_HeaderButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </MultiDataTrigger>
                            
                            <Trigger Property="IsInQuickAccessToolBar" Value="True">
                                <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="False" />
                            </Trigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Trigger>
    </Style.Triggers>
</Style>
    

<!--=================================================================
    RibbonSplitMenuItem
    ==================================================================-->

<Style x:Key="&#246;" TargetType="{x:Type ribbon:RibbonButton}" >
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonButton}">
                <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <!--Icon or check mark column-->
                        <ColumnDefinition MinWidth="22"
                                          Width="Auto"
                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                        <!--Header column-->
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Grid.Column="1"
                                      ContentSource="Content"
                                      HorizontalAlignment="Left"      
                                      VerticalAlignment="Center"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True" />
                </Grid>
             </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

<Style x:Key="&#249;" TargetType="{x:Type ribbon:RibbonToggleButton}" >
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                    <Grid.ColumnDefinitions>
                        <!--Icon or check mark column-->
                        <ColumnDefinition MinWidth="22"
                                          Width="Auto"
                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                        <!--Header column-->
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Grid.Column="1"
                                      ContentSource="Content"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Center"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True" />
                </Grid>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

<Style x:Key="&#247;" TargetType="{x:Type ribbon:RibbonToggleButton}" >
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
    <Setter Property="ClickMode" Value="Press" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                <Grid SnapsToDevicePixels="True">
                    <Border x:Name="OuterBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" />
                    <Path Data="{StaticResource &#240;}"
                          Fill="{TemplateBinding Foreground}"
                          VerticalAlignment="Center" 
                          HorizontalAlignment="Center"/>
                </Grid>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>
    
<Style x:Key="{x:Type ribbon:RibbonSplitMenuItem}" TargetType="{x:Type ribbon:RibbonSplitMenuItem}">
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Padding" Value="3,2,3,2" />
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
    <!-- FocusedBorderBrush and FocusedBackground are used when the control is added to QAT -->
    <Setter Property="ribbon:RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="ribbon:RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
    <Setter Property="ToolTipService.IsEnabled" Value="False" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonSplitMenuItem}">
                <Grid SnapsToDevicePixels="True"
                      x:Name="MainGrid"
                      Margin="1">
                    <Grid.ColumnDefinitions>
                        <!--Icon or check mark column-->
                        <ColumnDefinition MinWidth="22"
                                          Width="Auto"
                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                        <!--Header column-->
                        <ColumnDefinition Width="*"/>
                        <!--Submenu arrow column-->
                        <ColumnDefinition Width="14" />
                    </Grid.ColumnDefinitions>

                    <Border x:Name="HighlightLeftBorder"
                            Grid.ColumnSpan="2"
                            CornerRadius="2,0,0,2"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"/>
                    <Border x:Name="HighlightLeftBorderOverlay"
                            Grid.ColumnSpan="2"
                            CornerRadius="2,0,0,2"
                            BorderBrush="Transparent"
                            Background="Transparent" />                       
                    <Border x:Name="PART_SideBarBorder"
                            Margin="-1,-1,0,-1"
                            BorderThickness="0,0,1,0"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                        <Grid x:Name="SideBarOverlay"
                              Background="{StaticResource &#236;}">
                            <Image x:Name="Image"
                                   Margin="4,3,6,1"
                                   Width="16"
                                   Height="16"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center"
                                   Source="{TemplateBinding ImageSource}" />
                            <Border x:Name="CheckMarkBorder"
                                    Background="{TemplateBinding CheckedBackground}"
                                    BorderBrush="{TemplateBinding CheckedBorderBrush}"
                                    BorderThickness="1"
                                    Visibility="Hidden"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    Margin="1"
                                    Width="20"
                                    Height="20"
                                    CornerRadius="2">
                                <Path x:Name="CheckMark"
                                      Margin="4,0,6,0"
                                      Visibility="Hidden"
                                      VerticalAlignment="Center"
                                      HorizontalAlignment="Center"
                                      Fill="{TemplateBinding Foreground}"
                                      FlowDirection="LeftToRight"
                                      Data="{StaticResource &#239;}" />
                            </Border>
                        </Grid>
                    </Border>
                            
                    <ribbon:RibbonButton x:Name="PART_HeaderButton"
                                         Grid.ColumnSpan="2"
                                         Style="{StaticResource &#246;}"
                                         Command="{TemplateBinding Command}"
                                         CommandParameter="{TemplateBinding CommandParameter}"
                                         CommandTarget="{TemplateBinding CommandTarget}"
                                         Content="{TemplateBinding Header}"
                                         ContentTemplate="{TemplateBinding HeaderTemplate}"
                                         ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                         ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                         SmallImageSource="{TemplateBinding ImageSource}"
                                         Padding="{TemplateBinding Padding}"
                                         Background="Transparent"
                                         Focusable="False"
                                         ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                         ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                         ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                         ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                         ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                         ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                         KeyTip="{TemplateBinding HeaderKeyTip}"
                                         QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                         CanAddToQuickAccessToolBarDirectly="True"/>

                    <Border x:Name="HighlightRightBorder"
                            Grid.Column="2"
                            CornerRadius="0,2,2,0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                                   Visibility="Collapsed"
                                                   Focusable="False"
                                                   Style="{StaticResource &#247;}"
                                                   BorderThickness="1,0,0,0"
                                                   Background="Transparent"
                                                   ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                                   ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                                   ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                                   ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                                   ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                                   ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                                   IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"/>
                    </Border>
                        
                    <Border x:Name="HighlightRightBorderOverlay"
                            Grid.Column="2"
                            CornerRadius="0,2,2,0"
                            Background="Transparent"
                            BorderBrush="Transparent" />

                    <Popup x:Name="PART_Popup"
                           AllowsTransparency="True"
                           VerticalOffset="-1"
                           Placement="Custom"
                           IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                           Focusable="False"
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                        <classic:SystemDropShadowChrome x:Name="Shadow"
                                                        Color="Transparent"
                                                        controls:KeyTipService.IsKeyTipScope="True"

                                                        RenderOptions.ClearTypeHint="Enabled"

                        >
                            <Border x:Name="MenuBorder" 
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <Border x:Name="SubMenuInnerBorder"
                                        Background="{StaticResource &#209;}"
                                        CornerRadius="2">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas x:Name="BackgroundCanvas"
                                                    Height="0"
                                                    Width="0"
                                                    HorizontalAlignment="Left"
                                                    VerticalAlignment="Top">
                                                    <Rectangle x:Name="OpaqueRect"
                                                        Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                        Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                        Fill="{Binding ElementName=MenuBorder,Path=Background}"
                                                        RadiusX="2"
                                                        RadiusY="2" />
                                                    <Rectangle x:Name="OverlayRect"
                                                        Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                        Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                        Fill="{StaticResource &#209;}"
                                                        RadiusX="2"
                                                        RadiusY="2" />
                                                </Canvas>

                                                <ItemsPresenter x:Name="ItemsPresenter"
                                                            Margin="2"
                                                            Grid.IsSharedSizeScope="True"
                                                            KeyboardNavigation.TabNavigation="Cycle"
                                                            KeyboardNavigation.DirectionalNavigation="Cycle"/>

                                            </Grid>

                                        </ScrollViewer>
                                        <Border x:Name="ResizeControl"
                                                Grid.Row="1"
                                                Visibility="Collapsed"
                                                Background="{StaticResource &#210;}" 
                                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                BorderThickness="0,1,0,0">
                                            <Thumb x:Name="PART_ResizeThumb"  
                                                   Style="{StaticResource &#211;}"/>
                                        </Border>
                                    </Grid>
                                </Border>
                            </Border>
                        </classic:SystemDropShadowChrome>
                    </Popup>
                </Grid>

                <ControlTemplate.Triggers>

                    <Trigger SourceName="PART_SubMenuScrollViewer"
                             Property="ScrollViewer.CanContentScroll"
                             Value="false">
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                    </Trigger>

                    <Trigger Property="HasGallery" Value="True">
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="True"/>
                            <Condition Property="CanUserResizeVertically" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="False"/>
                            <Condition Property="CanUserResizeVertically" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsDropDownPositionedLeft" Value="True" />
                            <Condition Property="CanUserResizeHorizontally" Value="True"/>
                            <Condition Property="CanUserResizeVertically" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
                    </MultiTrigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                        <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
                    </Trigger>
                    <Trigger Property="HasItems" Value="True">
                        <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="ImageSource" Value="{x:Null}">
                        <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                        <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="False" />
                    </Trigger>
                    <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                        <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                    </Trigger>
                    <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsHighlighted" Value="True" />
                            <Condition Property="IsEnabled" Value="True" SourceName="PART_HeaderButton" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                    </MultiTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsHighlighted" Value="True" />
                            <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
                    </MultiTrigger>
                    <Trigger Property="IsSubmenuOpen" Value="True">
                        <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsHighlighted" Value="True" />
                            <Condition Property="IsMouseOver" Value="True" />
                            <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                            <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
                    </MultiTrigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                        <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                        <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                        <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                        <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                        <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                        <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                    </Trigger>

                    <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
                        <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                        <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                        <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                    </Trigger>


                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                        <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
                        <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
                        <Setter TargetName="SideBarOverlay" Property="Background"  Value="Transparent" />
                        <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="PART_SideBarBorder" Property="Background"  Value="Transparent" />
                        <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="SubMenuInnerBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                        <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
                    </DataTrigger>
                    <!-- HighContrast && (IsHighlighted || IsChecked ) -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=PART_ArrowToggleButton, Path=IsChecked}"  Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_ArrowToggleButton" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                        <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Style.Triggers>
        <Trigger Property="IsCheckable" Value="True">
            <!-- Header is a RibbonToggleButton -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ribbon:RibbonSplitMenuItem}">
                        <Grid SnapsToDevicePixels="True"
                              x:Name="MainGrid"
                              Margin="1">
                            <Grid.ColumnDefinitions>
                                <!--Icon or check mark column-->
                                <ColumnDefinition MinWidth="22"
                                                  Width="Auto"
                                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                                <!--Header column-->
                                <ColumnDefinition Width="*"/>
                                <!--Submenu arrow column-->
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>

                            <Border x:Name="HighlightLeftBorder"
                                    Grid.ColumnSpan="2"
                                    CornerRadius="2,0,0,2"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    Background="{TemplateBinding Background}"/>
                            <Border x:Name="HighlightLeftBorderOverlay"
                                    Grid.ColumnSpan="2"
                                    CornerRadius="2,0,0,2"
                                    BorderBrush="Transparent"
                                    Background="Transparent" />

                            <Border x:Name="PART_SideBarBorder"
                                    Margin="-1,-1,0,-1"
                                    BorderThickness="0,0,1,0"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}">
                                <Grid x:Name="SideBarOverlay"
                                      Background="{StaticResource &#236;}">
                                    <Image x:Name="Image"
                                           Margin="4,3,6,1"
                                           Width="16"
                                           Height="16"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Center"
                                           Source="{TemplateBinding ImageSource}" />
                                    <Border x:Name="CheckMarkBorder"
                                            Background="{TemplateBinding CheckedBackground}"
                                            BorderBrush="{TemplateBinding CheckedBorderBrush}"
                                            BorderThickness="1"
                                            Visibility="Hidden"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center"
                                            Margin="1"
                                            Width="20"
                                            Height="20"
                                            CornerRadius="2">
                                        <Path x:Name="CheckMark"
                                              Margin="4,0,6,0"
                                              Visibility="Hidden"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Center"
                                              Fill="{TemplateBinding Foreground}"
                                              FlowDirection="LeftToRight"
                                              Data="{StaticResource &#239;}" />
                                    </Border>
                                </Grid>
                            </Border>

                            <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                                       Grid.ColumnSpan="2"
                                                       Style="{StaticResource &#249;}"
                                                       Command="{TemplateBinding Command}"
                                                       CommandParameter="{TemplateBinding CommandParameter}"
                                                       CommandTarget="{TemplateBinding CommandTarget}"
                                                       Content="{TemplateBinding Header}"
                                                       ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                       ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                                       ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                       SmallImageSource="{TemplateBinding ImageSource}"
                                                       Padding="{TemplateBinding Padding}"
                                                       Background="Transparent"
                                                       Focusable="False"
                                                       ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                                       ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                                       ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                                       ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                                       ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                                       ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                                       KeyTip="{TemplateBinding HeaderKeyTip}"
                                                       QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                                       CanAddToQuickAccessToolBarDirectly="True"/>

                            <Border x:Name="HighlightRightBorder"
                                    Grid.Column="2"
                                    CornerRadius="0,2,2,0"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}" >
                                <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                                           Visibility="Collapsed"
                                                           Focusable="False"
                                                           Style="{StaticResource &#247;}"
                                                           BorderThickness="1,0,0,0"
                                                           Background="Transparent"
                                                           ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                                           ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                                           ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                                           ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                                           ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                                           ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                                           IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"/>
                            </Border>

                            <Border x:Name="HighlightRightBorderOverlay"
                                    Grid.Column="2"
                                    CornerRadius="0,2,2,0"
                                    Background="Transparent"
                                    BorderBrush="Transparent" />
                                
                            <Popup x:Name="PART_Popup"
                                   AllowsTransparency="True"
                                   VerticalOffset="-1"
                                   Placement="Custom"
                                   IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                   Focusable="False"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                                Color="Transparent"
                                                                controls:KeyTipService.IsKeyTipScope="True"

                                                                RenderOptions.ClearTypeHint="Enabled"

                                                                >
                                    <Border x:Name="MenuBorder" 
                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="2">
                                        <Border x:Name="SubMenuInnerBorder"
                                                Background="{StaticResource &#209;}"
                                                CornerRadius="2">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                              Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                                        <Canvas x:Name="BackgroundCanvas"
                                                            Height="0"
                                                            Width="0"
                                                            HorizontalAlignment="Left"
                                                            VerticalAlignment="Top">
                                                            <Rectangle x:Name="OpaqueRect"
                                                                Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                                Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                                Fill="{Binding ElementName=MenuBorder,Path=Background}"
                                                                RadiusX="2"
                                                                RadiusY="2" />
                                                            <Rectangle x:Name="OverlayRect"
                                                                Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                                Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                                Fill="{StaticResource &#209;}"
                                                                RadiusX="2"
                                                                RadiusY="2" />
                                                        </Canvas>

                                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                                    Margin="2"
                                                                    Grid.IsSharedSizeScope="True"
                                                                    KeyboardNavigation.TabNavigation="Cycle"
                                                                    KeyboardNavigation.DirectionalNavigation="Cycle"/>

                                                    </Grid>

                                                </ScrollViewer>
                                                <Border x:Name="ResizeControl"
                                                        Grid.Row="1"
                                                        Visibility="Collapsed"
                                                        Background="{StaticResource &#210;}"
                                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                        BorderThickness="0,1,0,0">
                                                    <Thumb x:Name="PART_ResizeThumb"  
                                                           Style="{StaticResource &#211;}"/>
                                                </Border>
                                            </Grid>
                                        </Border>
                                    </Border>
                                </classic:SystemDropShadowChrome>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <Trigger SourceName="PART_SubMenuScrollViewer"
                                     Property="ScrollViewer.CanContentScroll"
                                     Value="false">
                                <Setter TargetName="OpaqueRect" 
                                        Property="Canvas.Top" 
                                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                <Setter TargetName="OpaqueRect" 
                                        Property="Canvas.Left" 
                                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                <Setter TargetName="OverlayRect" 
                                        Property="Canvas.Top" 
                                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                <Setter TargetName="OverlayRect" 
                                        Property="Canvas.Left" 
                                        Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                            </Trigger>

                            <Trigger Property="HasGallery" Value="True">
                                <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                                <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                            </Trigger>
                            <Trigger Property="HasItems" Value="True">
                                <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="CanUserResizeHorizontally" Value="True"/>
                                    <Condition Property="CanUserResizeVertically" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="CanUserResizeHorizontally" Value="False"/>
                                    <Condition Property="CanUserResizeVertically" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsDropDownPositionedLeft" Value="True" />
                                    <Condition Property="CanUserResizeHorizontally" Value="True"/>
                                    <Condition Property="CanUserResizeVertically" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                                <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
                                <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="ImageSource" Value="{x:Null}">
                                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
                                <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="False" />
                            </Trigger>
                            <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                                <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                                <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
                            </Trigger>
                            <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                            </Trigger>
                            <Trigger Property="IsHighlighted" Value="True">
                                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                                <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                                <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                                <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsHighlighted" Value="True" />
                                    <Condition Property="IsEnabled" Value="True" SourceName="PART_HeaderButton"/>
                                </MultiTrigger.Conditions>
                                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                            </MultiTrigger>

                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsHighlighted" Value="True" />
                                    <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
                            </MultiTrigger>
                            <Trigger Property="IsSubmenuOpen" Value="True">
                                <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsHighlighted" Value="True" />
                                    <Condition Property="IsMouseOver" Value="True" />
                                    <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                                    <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
                                </MultiTrigger.Conditions>
                                <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
                            </MultiTrigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
                                <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                                <Setter TargetName="PART_SideBarBorder" Property="Background" Value="Transparent" />
                                <Setter TargetName="SideBarOverlay" Property="Background" Value="Transparent" />
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
                                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                            </Trigger>

                            <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
                                <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
                                <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                            </Trigger>


                            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                                <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                                <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
                                <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
                                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
                                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
                                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
                                <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
                                <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
                                <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
                                <Setter TargetName="SideBarOverlay" Property="Background"  Value="Transparent" />
                                <Setter TargetName="PART_SideBarBorder" Property="Background"  Value="Transparent" />
                                <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                                <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
                                <Setter TargetName="SubMenuInnerBorder" Property="CornerRadius" Value="0" />
                                <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                                <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
                                <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
                                <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
                            </DataTrigger>
                            <!-- HighContrast && (IsHighlighted || IsChecked ) -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                                <Setter TargetName="PART_SideBarBorder" Property="BorderBrush" Value="Transparent" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=PART_ArrowToggleButton, Path=IsChecked}"  Value="True"/>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_ArrowToggleButton" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </MultiDataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=PART_HeaderButton, Path=IsEnabled}" Value="False" />

                                    <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
                                <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Trigger>
    </Style.Triggers>
</Style>


<!--=================================================================
            RibbonTab
    ==================================================================-->

<Style x:Key="{x:Type ribbon:RibbonTab}" TargetType="{x:Type ribbon:RibbonTab}">
    <Setter Property="controls:KeyTipService.IsKeyTipScope" Value="True"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonTab}">
                <Grid x:Name="MainGrid" Visibility="{TemplateBinding IsSelected, Converter={StaticResource &#224;}}" ClipToBounds="True">
                    <Line x:Name="OuterLeftLine"
                          StrokeThickness="2" 
                          Stroke="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                          X1="0"
                          Y1="0"
                          X2="{Binding RelativeSource={RelativeSource TemplatedParent},Path=TabHeaderLeft}"
                          Y2="0" />
                    <Line x:Name="OuterRightLine"
                          StrokeThickness="2" 
                          Stroke="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ContextualTabGroup.Background}"
                          X1="{Binding RelativeSource={RelativeSource TemplatedParent},Path=TabHeaderRight}"
                          Y1="0"
                          X2="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ActualWidth}"
                          Y2="0" />
                    <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource &#298;}">

                        <Grid RenderOptions.ClearTypeHint="Enabled" >
                            <Canvas x:Name="BackgroundCanvas"
                                    Height="0"
                                    Width="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top"
                                    Margin="0,1,0,0">
                                <Rectangle x:Name="OpaqueRect"
                                           Height="{Binding ElementName=ScrollViewer,Path=ActualHeight}"
                                           Width="{Binding ElementName=ScrollViewer,Path=ActualWidth}"
                                           Fill="{Binding RelativeSource={RelativeSource Self},Path=(ribbon:RibbonControlService.Ribbon).Background}"/>
                                <Rectangle x:Name="OverlayRect"
                                           Height="{Binding ElementName=ScrollViewer,Path=ActualHeight}"
                                           Width="{Binding ElementName=ScrollViewer,Path=ActualWidth}"
                                           Fill="{StaticResource &#217;}"/>
                                <Rectangle x:Name="InnerOverlayRect"
                                           Height="{Binding ElementName=ScrollViewer,Path=ActualHeight}"
                                           Width="{Binding ElementName=ScrollViewer,Path=ActualWidth}"
                                           Fill="{StaticResource &#216;}"/>
                            </Canvas>

                            <ItemsPresenter x:Name="ItemsPresenter" />

                        </Grid>

                    </ScrollViewer>
                </Grid>
                <ControlTemplate.Triggers>

                    <Trigger SourceName="ScrollViewer"
                             Property="ScrollViewer.CanContentScroll"
                             Value="false">
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=ScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=ScrollViewer, Path=HorizontalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=ScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=ScrollViewer, Path=HorizontalOffset}" />
                        <Setter TargetName="InnerOverlayRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=ScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="InnerOverlayRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=ScrollViewer, Path=HorizontalOffset}" />
                    </Trigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ContextualTabGroup}" Value="{x:Null}"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterLeftLine" Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonTab}}, Path=Ribbon.BorderBrush}" />
                        <Setter TargetName="OuterRightLine" Property="Stroke" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonTab}}, Path=Ribbon.BorderBrush}" />
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                        <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                        <Setter TargetName="OuterLeftLine" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        <Setter TargetName="OuterRightLine" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

<!--=================================================================
            RibbonTabHeaderItemsControl
    ==================================================================-->

<Style x:Key="{x:Type ribbon:RibbonTabHeaderItemsControl}"  TargetType="{x:Type ribbon:RibbonTabHeaderItemsControl}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonTabHeaderItemsControl}">
                <Border x:Name="MainBorder" Background="{TemplateBinding Background}">
                    <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource &#298;}">
                            <ItemsPresenter x:Name="ItemsPresenter"/>
                    </ScrollViewer>
                </Border>
                <ControlTemplate.Triggers>

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                        <Setter TargetName="MainBorder" Property="Background" Value="Transparent" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

    <!--=================================================================
            KeyTipControl
        =================================================================-->

<Style x:Key="{x:Type controls:KeyTipControl}" TargetType="{x:Type controls:KeyTipControl}">
    <Setter Property="Background" Value="{StaticResource &#200;}"/>
    <Setter Property="BorderBrush" Value="{StaticResource &#201;}" />
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="3,0"/>
    <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}" />
    <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}" />
    <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}" />
    <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
    <Setter Property="MinWidth" Value="20"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type controls:KeyTipControl}">
                <Border Name="OuterBorder" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="1">
                    <Border Name="InnerBorder"
                            Padding="{TemplateBinding Padding}"
                            Background="{StaticResource &#202;}">
                        <TextBlock Text="{TemplateBinding Text}" HorizontalAlignment="Center"/>
                    </Border>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="TextElement.Foreground" Value="{StaticResource &#203;}" TargetName="OuterBorder"/>
                    </Trigger>

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" TargetName="OuterBorder"/>
                        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}" TargetName="OuterBorder"/>
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" TargetName="OuterBorder"/>
                        <Setter Property="Background" Value="Transparent" TargetName="InnerBorder"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                            <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" TargetName="OuterBorder"/>
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>



 
<!-- RibbonApplicationMenu -->

<SolidColorBrush x:Key="&#226;" Color="#FF114EAF" />

<!-- Semi-transparent brushes which produce tints of the main BorderBrush color or the Ribbon colors. -->
<LinearGradientBrush x:Key="&#227;" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#90FFFFFF" />
    <GradientStop Offset="0.5" Color="#30FFFFFF" />
    <GradientStop Offset="0.5" Color="Transparent" />
    <GradientStop Offset="1" Color="#70FFFFFF" />
</LinearGradientBrush>

<LinearGradientBrush x:Key="&#228;" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#60FFFFFF" />
    <GradientStop Offset="0.5" Color="#20FFFFFF" />
    <GradientStop Offset="0.5" Color="Transparent" />
    <GradientStop Offset="1" Color="Transparent" />
</LinearGradientBrush>

<LinearGradientBrush x:Key="&#229;" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#A0FFFFFF" />
    <GradientStop Offset="0.5" Color="#60FFFFFF" />
    <GradientStop Offset="0.5" Color="Transparent" />
    <GradientStop Offset="1" Color="#D0FFFFFF" />
</LinearGradientBrush>

<LinearGradientBrush x:Key="&#230;" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#90FFFFFF" />
    <GradientStop Offset="0.5" Color="#20FFFFFF" />
    <GradientStop Offset="0.5" Color="Transparent" />
    <GradientStop Offset="1" Color="Transparent" />
</LinearGradientBrush>

<LinearGradientBrush x:Key="&#231;" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="#A0FFFFFF" />
    <GradientStop Offset="0.2" Color="#90FFFFFF" />
    <GradientStop Offset="0.4" Color="#80FFFFFF" />
    <GradientStop Offset="0.6" Color="#50FFFFFF" />
    <GradientStop Offset="0.8" Color="Transparent" />
    <GradientStop Offset="1" Color="#30FFFFFF" />
</LinearGradientBrush>

<RadialGradientBrush x:Key="&#232;">
    <GradientStop Offset="0" Color="LightGray" />
    <GradientStop Offset="0.4" Color="White" />
</RadialGradientBrush>

<Geometry x:Key="&#233;">M 0 0 L 2.25 3 L 4.5 0 Z</Geometry>

<Style x:Key="&#234;" TargetType="{x:Type ribbon:RibbonToggleButton}">
    <Setter Property="BorderBrush" Value="{StaticResource &#226;}" />
    <Setter Property="Background" Value="{StaticResource &#226;}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{StaticResource &#232;}" />
    <Setter Property="ClickMode" Value="Press" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="FocusManager.IsFocusScope" Value="False" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                <Grid Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                      Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
                      SnapsToDevicePixels="True">
                    <Border x:Name="OuterBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0,2,0,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch" />
                    <Border x:Name="MiddleBorder"
                            BorderBrush="Transparent"
                            Background="{StaticResource &#227;}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0,2,0,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch">
                        <Border x:Name="InnerBorder"
                                BorderBrush="{StaticResource &#228;}"
                                Background="Transparent"
                                BorderThickness="1"
                                CornerRadius="0,2,0,0" />
                    </Border>

                    <StackPanel Orientation="Horizontal"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center">
                        <Image IsHitTestVisible="False"
                               Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ribbon:RibbonApplicationMenu}}, Path=SmallImageSource}"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Width="16"
                               Height="16"
                               Margin="0,-0.5,0,0"
                               RenderOptions.BitmapScalingMode="NearestNeighbor"
                               RenderOptions.EdgeMode="Aliased" />
                        <Path x:Name="DownArrow"
                              Data="{StaticResource &#233;}"
                              Stroke="{StaticResource &#227;}"
                              StrokeThickness=".5"
                              Fill="{TemplateBinding Foreground}"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Margin="3.5,0,0,0">
                            <Path.RenderTransform>
                                <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                            </Path.RenderTransform>
                        </Path>

                    </StackPanel>
                </Grid>
                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsKeyboardFocused" Value="True" />
                            <Condition Property="IsChecked" Value="False" />                           
                        </MultiTrigger.Conditions>
                        <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
                        <Setter TargetName="MiddleBorder" Property="Background" Value="{StaticResource &#229;}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#230;}" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" />
                            <Condition Property="IsChecked" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
                        <Setter TargetName="MiddleBorder" Property="Background" Value="{StaticResource &#229;}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#230;}" />
                    </MultiTrigger>

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="MiddleBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="MiddleBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="MiddleBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="InnerBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="InnerBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="DownArrow" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        <Setter TargetName="DownArrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

<!--=================================================================
            RibbonApplicationMenu
    ==================================================================-->

<Style x:Key="{x:Type ribbon:RibbonApplicationMenu}" TargetType="{x:Type ribbon:RibbonApplicationMenu}">
    <Style.Resources>
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type ribbon:RibbonSeparator}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonApplicationMenu}}, Path=Ribbon.BorderBrush}" />
            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonApplicationMenu}}, Path=Ribbon.Background}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                        <Border x:Name="MainBorder"
                            BorderThickness="0,1,0,1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                            <Border x:Name="Overlay"
                                Background="{StaticResource &#236;}">
                                <TextBlock x:Name="Text" 
                                    Margin="2,1,2,1"
                                    Text="{TemplateBinding Label}" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>

                            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                                <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Label" Value="{x:Null}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                                <Grid x:Name="Grid" Margin="1" SnapsToDevicePixels="True">
                                    <Grid.ColumnDefinitions>
                                        <!--Icon or check mark column-->
                                        <ColumnDefinition Width="Auto"
                                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <!--Header column-->
                                        <ColumnDefinition Width="*" 
                                                          MinWidth="44"/>
                                        <!--Submenu arrow column-->
                                        <ColumnDefinition Width="22" />
                                    </Grid.ColumnDefinitions>

                                    <Line x:Name="Line"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          X1="0"
                                          Y1="0"
                                          X2="1"
                                          Y2="0"
                                          Stroke="{TemplateBinding BorderBrush}"
                                          StrokeThickness="1"
                                          Stretch="Fill" />
                                </Grid>

                                <ControlTemplate.Triggers>

                                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                        <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                        <Setter TargetName="Grid" Property="Margin"  Value="0" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Style.Resources>
    <Setter Property="BorderBrush" Value="{StaticResource &#226;}" />
    <Setter Property="Background" Value="{StaticResource &#226;}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Height" Value="23" />
    <Setter Property="Width" Value="56" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonApplicationMenu}">
                <Grid Focusable="False"
                      x:Name="OuterGrid"
                      SnapsToDevicePixels="True">
                    <ribbon:RibbonToggleButton x:Name="PART_ToggleButton" 
                                               BorderBrush="{TemplateBinding BorderBrush}"
                                               Background="{TemplateBinding Background}"
                                               BorderThickness="{TemplateBinding BorderThickness}"                                              
                                               Style="{StaticResource &#234;}"
                                               FocusVisualStyle="{TemplateBinding FocusVisualStyle}"
                                               Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                                               Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
                                               ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                               ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                               ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                               ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                               ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                               ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                               SmallImageSource="{TemplateBinding SmallImageSource}"
                                               IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}" />
                    <Border x:Name="CenterBorder" 
                            Height="1"
                            Margin="-1,-1,0,0"
                            HorizontalAlignment="Stretch" 
                            VerticalAlignment="Top" />
                    <Popup x:Name="PART_Popup"
                           IsOpen="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                           PlacementTarget="{Binding ElementName=CenterBorder}"
                           AllowsTransparency="True"
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                           SnapsToDevicePixels="True">
                        <classic:SystemDropShadowChrome x:Name="Shadow" Color="Transparent" controls:KeyTipService.IsKeyTipScope="True"

                            RenderOptions.ClearTypeHint="Enabled"

                        >
                            <Grid>
                                <Border x:Name="PopupBorder"
                                        BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
                                        Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.Background}"
                                        BorderThickness="1"
                                        CornerRadius="2">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="24" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Border x:Name="HeaderBorder"
                                                BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
                                                Background="Transparent"
                                                BorderThickness="0,0,0,1"
                                                CornerRadius="2,2,0,0" />
                                        <Border x:Name="HeaderOverlayBorder"
                                                BorderBrush="{StaticResource &#235;}"
                                                Background="{StaticResource &#229;}"
                                                BorderThickness="0,0,0,1"
                                                CornerRadius="2,2,0,0" />
                                        <Grid Grid.Row="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="2" />
                                                <ColumnDefinition Width="300" />
                                            </Grid.ColumnDefinitions>
                                            <Border x:Name="MainPaneBorder"
                                                    Background="{StaticResource &#237;}">
                                                <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                    <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                                                  Grid.Row="1"
                                                                  CanContentScroll="True"
                                                                  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                                        <Grid RenderOptions.ClearTypeHint="Enabled">    
                                                            <Canvas x:Name="BackgroundCanvas"
                                                                    Height="0"
                                                                    Width="0"
                                                                    HorizontalAlignment="Left"
                                                                    VerticalAlignment="Top">
                                                                <Rectangle x:Name="OpaqueRect"
                                                                    Height="{Binding ElementName=MainPaneBorder,Path=ActualHeight}"
                                                                    Width="{Binding ElementName=MainPaneBorder,Path=ActualWidth}"
                                                                    Fill="{Binding ElementName=MainPaneBorder,Path=Background}"
                                                                    RadiusX="2"
                                                                    RadiusY="2" />
                                                                <Rectangle x:Name="OverlayRect"
                                                                    Height="{Binding ElementName=MainPaneBorder,Path=ActualHeight}"
                                                                    Width="{Binding ElementName=MainPaneBorder,Path=ActualWidth}"
                                                                    Fill="{Binding ElementName=MainPaneBorder,Path=Background}"
                                                                    RadiusX="2"
                                                                    RadiusY="2" />
                                                            </Canvas>

                                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                                    Grid.IsSharedSizeScope="True" />

                                                        </Grid>

                                                    </ScrollViewer>
                                                    <Border Name="ResizeControl"
                                                            Grid.Row="2"
                                                            Visibility="Collapsed"
                                                            Background="{StaticResource &#210;}" 
                                                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                            BorderThickness="0,1,0,0">
                                                        <Thumb x:Name="PART_ResizeThumb"  
                                                               Style="{StaticResource &#211;}"/>
                                                    </Border>
                                                </Grid>
                                            </Border>
                                            <Border x:Name="PART_SubmenuPlaceholder"
                                                    Height="{Binding ElementName=MainPaneBorder,Path=ActualHeight}"
                                                    Grid.Column="2"
                                                    Background="{StaticResource &#235;}">
                                                <ContentPresenter x:Name="PART_AuxiliaryPaneContentPresenter" 
                                                                  ContentSource="AuxiliaryPaneContent"
                                                                  ContentTemplate="{TemplateBinding AuxiliaryPaneContentTemplate}"
                                                                  ContentTemplateSelector="{TemplateBinding AuxiliaryPaneContentTemplateSelector}" />
                                            </Border>
                                            <Border x:Name="VerticalBorder"
                                                    Grid.Column="1"
                                                    HorizontalAlignment="Left"
                                                    Background="White"
                                                    Width="2"
                                                    BorderThickness="1,0,0,0"
                                                    BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
                                            <Border x:Name="VerticalOverlayBorder"
                                                    Grid.Column="1"
                                                    HorizontalAlignment="Left"
                                                    Background="Transparent"
                                                    Width="2"
                                                    BorderThickness="1,0,0,0"
                                                    BorderBrush="{StaticResource &#235;}" />
                                        </Grid>

                                        <Border x:Name="FooterBorder"
                                                Grid.Row="2"
                                                BorderBrush="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}"
                                                Background="Transparent"
                                                BorderThickness="0,1,0,0"
                                                CornerRadius="0,0,2,2">
                                            <Border x:Name="FooterBackgroundOverlayBorder"
                                                    BorderBrush="Transparent"
                                                    Background="{StaticResource &#231;}"
                                                    CornerRadius="0,0,2,2">
                                                <ContentPresenter x:Name="PART_FooterPaneContentPresenter" 
                                                                  Margin="2"
                                                                  MinHeight="12"
                                                                  ContentSource="FooterPaneContent"
                                                                  ContentTemplate="{TemplateBinding FooterPaneContentTemplate}"
                                                                  ContentTemplateSelector="{TemplateBinding FooterPaneContentTemplateSelector}" />
                                            </Border>
                                        </Border>
                                        <Border x:Name="FooterOverlayBorder"
                                                VerticalAlignment="Stretch"
                                                HorizontalAlignment="Stretch"
                                                BorderBrush="{StaticResource &#235;}"
                                                Background="Transparent"
                                                BorderThickness="0,1,0,0"
                                                CornerRadius="0,0,2,2" />
                                        </Grid>
                                </Border>
                                <Canvas>
                                    <ribbon:RibbonToggleButton x:Name="PART_PopupToggleButton"
                                                               AutomationProperties.Name="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=(AutomationProperties.Name)}"
                                                               Canvas.Top="-24"
                                                               Canvas.Left="3"
                                                               IsChecked="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
                                                               BorderBrush="{TemplateBinding BorderBrush}"
                                                               Background="{TemplateBinding Background}"
                                                               BorderThickness="{TemplateBinding BorderThickness}"                                              
                                                               Style="{StaticResource &#234;}"
                                                               Focusable="False"
                                                               Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}"
                                                               Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}" />
                                </Canvas>
                            </Grid>
                        </classic:SystemDropShadowChrome>
                    </Popup>

                </Grid>

                <ControlTemplate.Triggers>

                    <Trigger SourceName="PART_SubMenuScrollViewer"
                             Property="ScrollViewer.CanContentScroll"
                             Value="false">
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                    </Trigger>

                    <Trigger Property="HasGallery" Value="True">
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                        <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="true"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="false"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                    </MultiTrigger>
                    <Trigger Property="IsDropDownPositionedAbove" Value="true">
                        <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                        <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsDropDownPositionedAbove" Value="true" />
                            <Condition Property="CanUserResizeHorizontally" Value="true"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
                    </MultiTrigger>
                     <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
                        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                        <Setter TargetName="Shadow" Property="Color"  Value="{StaticResource &#214;}" />
                    </Trigger>

                    <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                    </Trigger>
                    

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                        <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                        <Setter TargetName="OuterGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        <Setter TargetName="PopupBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="HeaderBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="HeaderBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="HeaderOverlayBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="HeaderOverlayBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="HeaderOverlayBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="MainPaneBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="PART_SubmenuPlaceholder" Property="Background" Value="Transparent" />
                        <Setter TargetName="VerticalBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                        <Setter TargetName="VerticalBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="VerticalOverlayBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="FooterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="FooterBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="FooterOverlayBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="FooterOverlayBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="FooterBackgroundOverlayBorder" Property="Background" Value="Transparent" />
                        <Setter TargetName="FooterBackgroundOverlayBorder" Property="CornerRadius" Value="0" />
                        <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                    </DataTrigger>

                 </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Style.Triggers>
       <Trigger Property="IsDropDownOpen" Value="True">
            <Setter Property="ToolTipService.IsEnabled" Value="False" />
        </Trigger>
    </Style.Triggers>
</Style>

<!--=================================================================
      RibbonApplicationSplitMenuItem
    =================================================================-->

<ControlTemplate x:Key="&#245;" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid x:Name="MainGrid"
          SnapsToDevicePixels="True"
          Margin="1">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="*"
                              MinWidth="44" />
            <ColumnDefinition Width="22" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="6,4,6,4"
               Width="32"
               Height="32"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               Source="{TemplateBinding ImageSource}"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="30"
                Height="30"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource &#239;}" >
                <Path.RenderTransform>
                    <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                </Path.RenderTransform>
            </Path>
        </Border>
        <ribbon:RibbonButton x:Name="PART_HeaderButton"
                             Grid.ColumnSpan="2"
                             Style="{StaticResource &#246;}"
                             Command="{TemplateBinding Command}"
                             CommandParameter="{TemplateBinding CommandParameter}"
                             CommandTarget="{TemplateBinding CommandTarget}"
                             Content="{TemplateBinding Header}"
                             ContentTemplate="{TemplateBinding HeaderTemplate}"
                             ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                             ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                             SmallImageSource="{TemplateBinding ImageSource}"
                             Padding="{TemplateBinding Padding}"
                             HorizontalContentAlignment="Left"
                             Background="Transparent"
                             Focusable="False" 
                             ToolTipTitle="{TemplateBinding ToolTipTitle}"
                             ToolTipDescription="{TemplateBinding ToolTipDescription}"
                             ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                             ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                             ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                             ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                             KeyTip="{TemplateBinding HeaderKeyTip}"
                             QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                             CanAddToQuickAccessToolBarDirectly="True"/>
        <Border x:Name="HighlightRightBorder"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource &#247;}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

            <!-- Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance. 
                This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is 
                important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562 -->

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Relative"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               SnapsToDevicePixels="True">
                <classic:SystemDropShadowChrome x:Name="Shadow"
                                                Color="Transparent"
                                                controls:KeyTipService.IsKeyTipScope="True"

                                                RenderOptions.ClearTypeHint="Enabled"

                >
                <Grid>
                    <Border x:Name="PopupBorder"
                            BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2" />
                    <Border x:Name="PopupOverlayBorder"
                            BorderBrush="{StaticResource &#235;}"
                            Background="{StaticResource &#237;}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer" 
                                          CanContentScroll="True"
                                          HorizontalScrollBarVisibility="Disabled"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                            Margin="2"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True" />

                                </Grid>

                            </ScrollViewer>
                            <Border x:Name="ResizeControl"
                                    Grid.Row="1"
                                    Visibility="Collapsed"
                                    Background="{StaticResource &#210;}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0">
                                <Thumb x:Name="PART_ResizeThumb"  
                                       Style="{StaticResource &#211;}"/>
                            </Border>
                        </Grid>
                    </Border>
                </Grid>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>

        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>

        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="&#248;" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid x:Name="MainGrid"
          SnapsToDevicePixels="True"
          Margin="1">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="*"
                              MinWidth="44" />
            <ColumnDefinition Width="22" />
        </Grid.ColumnDefinitions>
        
        <Border x:Name="HighlightLeftBorder"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="6,4,6,4"
               Source="{TemplateBinding ImageSource}"
               Width="32"
               Height="32"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="30"
                Height="30"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource &#239;}" >
                <Path.RenderTransform>
                    <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                </Path.RenderTransform>
            </Path>
        </Border>

        <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                   Grid.ColumnSpan="2"
                                   Style="{StaticResource &#249;}"
                                   Command="{TemplateBinding Command}"
                                   CommandParameter="{TemplateBinding CommandParameter}"
                                   CommandTarget="{TemplateBinding CommandTarget}"
                                   Content="{TemplateBinding Header}"
                                   ContentTemplate="{TemplateBinding HeaderTemplate}"
                                   ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                   ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                   SmallImageSource="{TemplateBinding ImageSource}"
                                   Padding="{TemplateBinding Padding}"
                                   HorizontalContentAlignment="Left"
                                   Background="Transparent"
                                   Focusable="False"
                                   ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                   KeyTip="{TemplateBinding HeaderKeyTip}"
                                   QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                   CanAddToQuickAccessToolBarDirectly="True"/>

        <Border x:Name="HighlightRightBorder"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource &#247;}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"/>

        </Border>
            
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

            <!-- Note that it is important to enable PopupAnimation for the top level MenuItems even though they aren't of relevance. 
                This is important to guarantee that the Popups close in the right order i.e. topmost to bottom most. This order is 
                important to be able to guarantee that the SubmenuClosed event fires correctly. Please see Dev10 bug# 913562 -->

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               Placement="Relative"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"

                                            RenderOptions.ClearTypeHint="Enabled"

            >
                <Grid>
                    <Border x:Name="PopupBorder"
                            BorderBrush="{Binding Path=Ribbon.BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
                            Background="{Binding Path=Ribbon.Background,RelativeSource={RelativeSource TemplatedParent}}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2" />
                    <Border x:Name="PopupOverlayBorder"
                            BorderBrush="{StaticResource &#235;}"
                            Background="{StaticResource &#237;}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer" 
                                          CanContentScroll="True"
                                          HorizontalScrollBarVisibility="Disabled"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                            Margin="2"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True" />

                                </Grid>

                            </ScrollViewer>
                            <Border x:Name="ResizeControl"
                                    Grid.Row="1"
                                    Visibility="Collapsed"
                                    Background="{StaticResource &#210;}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0">
                                <Thumb x:Name="PART_ResizeThumb"  
                                       Style="{StaticResource &#211;}"/>
                            </Border>
                        </Grid>
                    </Border>
                </Grid>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>

        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="PopupBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="PopupOverlayBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="PopupOverlayBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>

        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="&#250;" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid Margin="1"
          x:Name="MainGrid"
          SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="44"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="22" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="4,3,6,1"
               Width="32"
               Height="32"              
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               Source="{TemplateBinding ImageSource}"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="30"
                Height="30"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource &#239;}" >
                <Path.RenderTransform>
                    <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                </Path.RenderTransform>
            </Path>
        </Border>
        <ribbon:RibbonButton x:Name="PART_HeaderButton"
                             Grid.ColumnSpan="2"
                             Style="{StaticResource &#246;}"
                             Command="{TemplateBinding Command}"
                             CommandParameter="{TemplateBinding CommandParameter}"
                             CommandTarget="{TemplateBinding CommandTarget}"
                             Content="{TemplateBinding Header}"
                             ContentTemplate="{TemplateBinding HeaderTemplate}"
                             ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                             ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                             SmallImageSource="{TemplateBinding ImageSource}"
                             Padding="{TemplateBinding Padding}"
                             HorizontalContentAlignment="Left"
                             Background="Transparent"
                             Focusable="False" 
                             ToolTipTitle="{TemplateBinding ToolTipTitle}"
                             ToolTipDescription="{TemplateBinding ToolTipDescription}"
                             ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                             ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                             ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                             ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                             KeyTip="{TemplateBinding HeaderKeyTip}"
                             QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                             CanAddToQuickAccessToolBarDirectly="True"/>
        <Border x:Name="HighlightRightBorder"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource &#247;}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

        <Popup x:Name="PART_Popup"
                AllowsTransparency="True"
                VerticalOffset="-1"
                Placement="Custom"
                IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"

                                            RenderOptions.ClearTypeHint="Enabled"

            >
                <Border x:Name="MenuBorder"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                    <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="InnerOverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{StaticResource &#209;}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                </Canvas>

                                <ItemsPresenter x:Name="ItemsPresenter"
                                                Margin="2"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" />

                            </Grid>

                        </ScrollViewer>
                        <Border x:Name="ResizeControl"
                                Grid.Row="1"
                                Visibility="Collapsed"
                                Background="{StaticResource &#210;}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="0,1,0,0">
                            <Thumb x:Name="PART_ResizeThumb"  
                                   Style="{StaticResource &#211;}"/>
                        </Border>
                    </Grid>
                </Border>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>

        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="&#251;" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid Margin="1"
          x:Name="MainGrid"
          SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="44"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="22" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                Grid.ColumnSpan="2"
                CornerRadius="2,0,0,2"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="4,3,6,1"
               Width="32"
               Height="32"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               Source="{TemplateBinding ImageSource}"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="30"
                Height="30"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource &#239;}" >
                <Path.RenderTransform>
                    <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                </Path.RenderTransform>
            </Path>
        </Border>

        <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                   Grid.ColumnSpan="2"
                                   Style="{StaticResource &#249;}"
                                   Command="{TemplateBinding Command}"
                                   CommandParameter="{TemplateBinding CommandParameter}"
                                   CommandTarget="{TemplateBinding CommandTarget}"
                                   Content="{TemplateBinding Header}"
                                   ContentTemplate="{TemplateBinding HeaderTemplate}"
                                   ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                   ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                   SmallImageSource="{TemplateBinding ImageSource}"
                                   Padding="{TemplateBinding Padding}"
                                   HorizontalContentAlignment="Left"
                                   Background="Transparent"
                                   Focusable="False" 
                                   ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                   KeyTip="{TemplateBinding HeaderKeyTip}"
                                   QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                   CanAddToQuickAccessToolBarDirectly="True"/>

        <Border x:Name="HighlightRightBorder"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource &#247;}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="2"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               VerticalOffset="-1"
               Placement="Custom"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"

                                            RenderOptions.ClearTypeHint="Enabled"

        >
                <Border x:Name="MenuBorder"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                    <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="InnerOverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{StaticResource &#209;}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                </Canvas>

                                <ItemsPresenter x:Name="ItemsPresenter"
                                                Margin="2"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" />

                            </Grid>

                        </ScrollViewer>
                        <Border Name="ResizeControl"
                                Grid.Row="1"
                                Visibility="Collapsed"
                                Background="{StaticResource &#210;}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="0,1,0,0">
                            <Thumb x:Name="PART_ResizeThumb"  
                                   Style="{StaticResource &#211;}"/>
                        </Border>
                    </Grid>
                </Border>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>

        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="&#252;" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid Margin="1" 
          x:Name="MainGrid"
        SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="24"
                              Width="Auto"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="4" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="37" />
            <ColumnDefinition Width="17" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                CornerRadius="2,0,0,2"
                Grid.ColumnSpan="4"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                CornerRadius="2,0,0,2"
                Grid.ColumnSpan="4"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="1"
               Width="16"
               Height="16"
               Source="{TemplateBinding ImageSource}"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="20"
                Height="20"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource &#239;}" />
        </Border>
        <ribbon:RibbonButton x:Name="PART_HeaderButton"
                             Grid.ColumnSpan="4"
                             Style="{StaticResource &#246;}"
                             Command="{TemplateBinding Command}"
                             CommandParameter="{TemplateBinding CommandParameter}"
                             CommandTarget="{TemplateBinding CommandTarget}"
                             Content="{TemplateBinding Header}"
                             ContentTemplate="{TemplateBinding HeaderTemplate}"
                             ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                             ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                             SmallImageSource="{TemplateBinding ImageSource}"
                             Padding="{TemplateBinding Padding}"
                             HorizontalContentAlignment="Left"
                             Background="Transparent"
                             Focusable="False" 
                             ToolTipTitle="{TemplateBinding ToolTipTitle}"
                             ToolTipDescription="{TemplateBinding ToolTipDescription}"
                             ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                             ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                             ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                             ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                             KeyTip="{TemplateBinding HeaderKeyTip}"
                             QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                             CanAddToQuickAccessToolBarDirectly="True"/>

        <Border x:Name="HighlightRightBorder"
                Grid.Column="4"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                        Visibility="Collapsed"
                                        Focusable="False"
                                        Style="{StaticResource &#247;}"
                                        BorderThickness="1,0,0,0"
                                        Background="Transparent"
                                        ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                        ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                        ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                        ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                        ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                        ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                        IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="4"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               VerticalOffset="-1"
               Placement="Custom"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"

                                            RenderOptions.ClearTypeHint="Enabled"

                                            >
                <Border x:Name="MenuBorder"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                    <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="InnerOverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{StaticResource &#209;}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                </Canvas>

                                <ItemsPresenter x:Name="ItemsPresenter"
                                                Margin="2"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" />

                            </Grid>

                        </ScrollViewer>
                        <Border Name="ResizeControl"
                                Grid.Row="1"
                                Visibility="Collapsed"
                                Background="{StaticResource &#210;}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="0,1,0,0">
                            <Thumb x:Name="PART_ResizeThumb"  
                                   Style="{StaticResource &#211;}"/>
                        </Border>
                    </Grid>
                </Border>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>

        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<ControlTemplate x:Key="&#253;" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Grid Margin="1"
          x:Name="MainGrid"
          SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="24"
                              Width="Auto"
                              SharedSizeGroup="MenuItemIconColumnGroup" />
            <ColumnDefinition Width="4" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="37" />
            <ColumnDefinition Width="17" />
        </Grid.ColumnDefinitions>
        <Border x:Name="HighlightLeftBorder"
                CornerRadius="2,0,0,2"
                Grid.ColumnSpan="4"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}" />
        <Border x:Name="HighlightLeftBorderOverlay"
                CornerRadius="2,0,0,2"
                Grid.ColumnSpan="4"
                BorderBrush="Transparent"
                Background="Transparent" />
        <Image x:Name="Image"
               Margin="1"
               Width="16"
               Height="16"
               Source="{TemplateBinding ImageSource}"
               VerticalAlignment="Center"
               HorizontalAlignment="Center"
               RenderOptions.BitmapScalingMode="NearestNeighbor" />
        <Border x:Name="CheckMarkBorder"
                Background="{TemplateBinding CheckedBackground}"
                BorderBrush="{TemplateBinding CheckedBorderBrush}"
                BorderThickness="1"
                Visibility="Hidden"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                Margin="1"
                Width="20"
                Height="20"
                CornerRadius="2">
            <Path x:Name="CheckMark"
                  Margin="4,0,6,0"
                  Visibility="Hidden"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  Fill="{TemplateBinding Foreground}"
                  FlowDirection="LeftToRight"
                  Data="{StaticResource &#239;}" />
        </Border>
        <ribbon:RibbonToggleButton x:Name="PART_HeaderButton"
                                   Grid.ColumnSpan="4"
                                   Style="{StaticResource &#249;}"
                                   Command="{TemplateBinding Command}"
                                   CommandParameter="{TemplateBinding CommandParameter}"
                                   CommandTarget="{TemplateBinding CommandTarget}"
                                   Content="{TemplateBinding Header}"
                                   ContentTemplate="{TemplateBinding HeaderTemplate}"
                                   ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                   ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                   SmallImageSource="{TemplateBinding ImageSource}"
                                   Padding="{TemplateBinding Padding}"
                                   HorizontalContentAlignment="Left"
                                   Background="Transparent"
                                   Focusable="False" 
                                   ToolTipTitle="{TemplateBinding ToolTipTitle}"
                                   ToolTipDescription="{TemplateBinding ToolTipDescription}"
                                   ToolTipImageSource="{TemplateBinding ToolTipImageSource}"
                                   ToolTipFooterTitle="{TemplateBinding ToolTipFooterTitle}"
                                   ToolTipFooterDescription="{TemplateBinding ToolTipFooterDescription}"
                                   ToolTipFooterImageSource="{TemplateBinding ToolTipFooterImageSource}"
                                   KeyTip="{TemplateBinding HeaderKeyTip}"
                                   QuickAccessToolBarId="{TemplateBinding HeaderQuickAccessToolBarId}"
                                   CanAddToQuickAccessToolBarDirectly="True"/>
        <Border x:Name="HighlightRightBorder"
                Grid.Column="4"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ribbon:RibbonToggleButton x:Name="PART_ArrowToggleButton"
                                       Visibility="Collapsed"
                                       Focusable="False"
                                       Style="{StaticResource &#247;}"
                                       BorderThickness="1,0,0,0"
                                       Background="Transparent"
                                       ToolTipTitle="{TemplateBinding DropDownToolTipTitle}"
                                       ToolTipDescription="{TemplateBinding DropDownToolTipDescription}"
                                       ToolTipImageSource="{TemplateBinding DropDownToolTipImageSource}"
                                       ToolTipFooterTitle="{TemplateBinding DropDownToolTipFooterTitle}"
                                       ToolTipFooterDescription="{TemplateBinding DropDownToolTipFooterDescription}"
                                       ToolTipFooterImageSource="{TemplateBinding DropDownToolTipFooterImageSource}"
                                       IsChecked="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}" />
        </Border>
        <Border x:Name="HighlightRightBorderOverlay"
                Grid.Column="4"
                CornerRadius="0,2,2,0"
                HorizontalAlignment="Stretch"
                BorderBrush="Transparent"
                Background="Transparent" />

        <Popup x:Name="PART_Popup"
               AllowsTransparency="True"
               VerticalOffset="-1"
               Placement="Custom"
               IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}"
               Focusable="False"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
               SnapsToDevicePixels="True">
            <classic:SystemDropShadowChrome x:Name="Shadow"
                                            Color="Transparent"
                                            controls:KeyTipService.IsKeyTipScope="True"

                                            RenderOptions.ClearTypeHint="Enabled"

                                            >
                <Border x:Name="MenuBorder"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                    <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                        <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                      Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="OverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{Binding ElementName=PopupOverlayBorder,Path=Background}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                    <Rectangle x:Name="InnerOverlayRect"
                                                Height="{Binding ElementName=PopupBorder,Path=ActualHeight}"
                                                Width="{Binding ElementName=PopupBorder,Path=ActualWidth}"
                                                Fill="{StaticResource &#209;}"
                                                RadiusX="2"
                                                RadiusY="2" />
                                </Canvas>

                                <ItemsPresenter x:Name="ItemsPresenter"
                                                Margin="2"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                Grid.IsSharedSizeScope="True" />

                            </Grid>

                        </ScrollViewer>
                        <Border Name="ResizeControl"
                                Grid.Row="1"
                                Visibility="Collapsed"
                                Background="{StaticResource &#210;}"
                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                BorderThickness="0,1,0,0">
                            <Thumb x:Name="PART_ResizeThumb"  
                                   Style="{StaticResource &#211;}"/>
                        </Border>
                    </Grid>
                </Border>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>

        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="InnerOverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedLeft" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#243;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            <Setter TargetName="CheckMarkBorder" Property="Visibility" Value="Visible" />
            <Setter TargetName="Image" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="ImageSource" Value="{x:Null}">
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="HasItems" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="HeaderQuickAccessToolBarId" Value="{x:Null}">
            <Setter TargetName="PART_HeaderButton" Property="CanAddToQuickAccessToolBarDirectly" Value="false" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}" />
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsSubmenuOpen" Value="True">
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsHighlighted" Value="True" />
                <Condition Property="IsMouseOver" Value="False" SourceName="PART_HeaderButton" />
                <Condition Property="Visibility" Value="Visible" SourceName="PART_ArrowToggleButton" />
            </MultiTrigger.Conditions>
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="{StaticResource &#235;}" />
        </MultiTrigger>
        <Trigger Property="IsChecked" Value="True">
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}" />
        </Trigger>

        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="PART_ArrowToggleButton" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False" SourceName="PART_HeaderButton">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="0.5" />
            <Setter TargetName="PART_HeaderButton" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>


        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightRightBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightLeftBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="HighlightRightBorderOverlay" Property="Background" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Data" Value="{StaticResource &#241;}" />
            <Setter TargetName="CheckMarkBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="CheckMarkBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        </DataTrigger>
        <!-- HighContrast && (IsHighlighted || IsChecked ) -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHighlighted}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            <Setter TargetName="HighlightLeftBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="HighlightRightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ArrowToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>
 
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMarkBorder" Property="Opacity" Value="1" />
            <Setter TargetName="CheckMarkBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            <Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<Style x:Key="{x:Type ribbon:RibbonApplicationSplitMenuItem}" TargetType="{x:Type ribbon:RibbonApplicationSplitMenuItem}">
    <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Padding" Value="3,2,3,2" />
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
    <!-- FocusedBorderBrush and FocusedBackground are used when the control is added to QAT -->
    <Setter Property="ribbon:RibbonControlService.FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="ribbon:RibbonControlService.FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="ToolTipService.IsEnabled" Value="false" />
    <Setter Property="Template" Value="{StaticResource &#245;}" />
    <Style.Triggers>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Top" />
                <Condition Property="IsCheckable" Value="True" />                
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource &#248;}" />
        </MultiTrigger>

        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Middle" />
                <Condition Property="IsCheckable" Value="False" />
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource &#250;}" />
        </MultiTrigger>

        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Middle" />
                <Condition Property="IsCheckable" Value="True" />
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource &#251;}" />
        </MultiTrigger>

        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Sub" />
                <Condition Property="IsCheckable" Value="False" />
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource &#252;}" />
        </MultiTrigger>

        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="Level" Value="Sub" />
                <Condition Property="IsCheckable" Value="True" />
            </MultiTrigger.Conditions>
            <Setter Property="Template" Value="{StaticResource &#253;}" />
        </MultiTrigger>
    </Style.Triggers>
</Style>


<!--=================================================================
            RibbonComboBox
        ==================================================================-->

<Style x:Key="&#255;" TargetType="{x:Type TextBox}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding Path=(coreInternal:CoreAppContextSwitches.UseNetFx472CompatibleAccessibilityFeatures)}" Value="false">
        <Setter Property="AutomationProperties.Name"
              Value="{Binding Path=(AutomationProperties.Name),
                                    Mode=OneWay, 
                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ribbon:RibbonComboBox}}}"/>
        <Setter Property="AutomationProperties.LabeledBy"
                Value="{Binding Path=(AutomationProperties.LabeledBy),
                                    Mode=OneWay, 
                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ribbon:RibbonComboBox}}}"/>
        <Setter Property="AutomationProperties.HelpText"
                Value="{Binding Path=(AutomationProperties.HelpText),
                                    Mode=OneWay, 
                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ribbon:RibbonComboBox}}}"/>
      </DataTrigger>
    </Style.Triggers>
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="AllowDrop" Value="true"/>
    <Setter Property="MinWidth" Value="0"/>
    <Setter Property="MinHeight" Value="0"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type TextBox}">
                <ScrollViewer x:Name="PART_ContentHost"
                              VerticalAlignment="Center"
                              HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden"
                              Background="Transparent">

                    <ScrollViewer.ContentTemplate>
                        <DataTemplate>
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="BackgroundCanvas"
                                        Height="0"
                                        Width="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Top">
                                    <Rectangle x:Name="OpaqueRect"
                                        Height="{Binding ElementName=PART_ContentHost,Path=ActualHeight}"
                                        Width="{Binding ElementName=PART_ContentHost,Path=ActualWidth}"
                                        Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:Ribbon}},Path=Background}" />
                                    <Rectangle x:Name="OverlayRect"
                                        Height="{Binding ElementName=PART_ContentHost,Path=ActualHeight}"
                                        Width="{Binding ElementName=PART_ContentHost,Path=ActualWidth}"
                                        Fill="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonComboBox}},Path=Background}" />
                                </Canvas>
                                <ContentPresenter Content="{Binding}" />
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}},Path=(ScrollViewer.CanContentScroll)}"
                                         Value="false">
                                    <Setter TargetName="OpaqueRect" 
                                            Property="Canvas.Top" 
                                            Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OpaqueRect" 
                                            Property="Canvas.Left" 
                                            Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                    <Setter TargetName="OverlayRect" 
                                            Property="Canvas.Top" 
                                            Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
                                    <Setter TargetName="OverlayRect" 
                                            Property="Canvas.Left" 
                                            Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                    <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ScrollViewer.ContentTemplate>

                </ScrollViewer>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

<LinearGradientBrush x:Key="&#256;"  StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="#E4F0FE" Offset="0" />
    <GradientStop Color="#E4F0FE" Offset="0.49" />
    <GradientStop Color="#CFDFF3" Offset="0.5" />
    <GradientStop Color="#E8F1FD" Offset="1.0" />
</LinearGradientBrush>

<Style x:Key="&#257;" TargetType="{x:Type ribbon:RibbonToggleButton}">
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
    <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBackground}" />
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                <Grid Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="ToggleButtonGroup" />
                    </Grid.ColumnDefinitions>
                    <Border Name="OuterBorder"
                            Grid.Column="1"
                            Width="14"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <Border Name="InnerBorder"
                                Background="Transparent"
                                BorderBrush="Transparent"
                                BorderThickness="1"
                                SnapsToDevicePixels="True">
                            <Path Name="Arrow"
                                  Fill="{TemplateBinding Foreground}"
                                  Data="{StaticResource &#208;}"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center" />
                        </Border>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>

                    <!-- IsMouseOver -->
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
                    </Trigger>

                    <!-- IsFocused -->
                    <Trigger Property="IsKeyboardFocused" Value="True">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
                    </Trigger>

                    <!-- IsChecked -->
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#258;}" />
                    </Trigger>

                    <!-- IsPressed -->
                    <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"  />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                    </Trigger>

                    <!-- HighContrast -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        <Setter TargetName="Arrow" Property="Fill"  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="Arrow" Property="Fill"  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="Arrow" Property="Fill"  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>
    
<Style x:Key="&#259;" TargetType="{x:Type ribbon:RibbonToggleButton}">
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="CheckedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBorderBrush}" />
    <Setter Property="CheckedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.CheckedBackground}" />
    <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self},Path=Ribbon.FocusedBackground}" />
    <Setter Property="ClickMode" Value="Press"/>
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonToggleButton}">
                <Border Name="OuterBorder"
                            Width="14"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                    <Border Name="InnerBorder"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="1"
                            SnapsToDevicePixels="True">
                        <Path Name="Arrow"
                              Fill="{TemplateBinding Foreground}"
                              Data="{StaticResource &#208;}"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center" />
                    </Border>
                </Border>
                <ControlTemplate.Triggers>

                    <!-- IsMouseOver -->
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#235;}" />
                    </Trigger>

                    <!-- IsChecked -->
                    <Trigger Property="IsChecked" Value="True">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBackground}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CheckedBorderBrush}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource &#258;}" />
                    </Trigger>

                    <!-- IsPressed -->
                    <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="OuterBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBackground}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PressedBorderBrush}"  />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                    </Trigger>

                    <!-- HighContrast -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        <Setter TargetName="Arrow" Property="Fill"  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                        <Setter TargetName="InnerBorder" Property="BorderBrush" Value="Transparent" />
                        <Setter TargetName="Arrow" Property="Fill"  Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

<ControlTemplate x:Key="&#260;" TargetType="{x:Type ribbon:RibbonComboBox}">
    <Border x:Name="MainBorder">
        <Grid Margin="1,0,1,0"
              SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition x:Name="OuterTextColumn"  Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Image x:Name="Image"
                   Source="{TemplateBinding LargeImageSource}"
                   RenderOptions.BitmapScalingMode="NearestNeighbor"
                   VerticalAlignment="Center"
                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                   Grid.Row="0"
                   Grid.Column="1"
                   Margin="1"
                   Width="32"
                   Height="32" />
            <Grid Name="Grid"
                  Grid.Row="1"
                  Grid.Column="1"
                  VerticalAlignment="Top"
                  HorizontalAlignment="Center"
                  Margin="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition x:Name="TextColumn"  Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid x:Name="TwoLineTextPanel"
                      VerticalAlignment="Center"
                      HorizontalAlignment="Center">
                    <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                              Text="{TemplateBinding Label}"
                                              TextAlignment="Center"
                                              LineHeight="13px"
                                              LineStackingStrategy="BlockLineHeight"
                                              Margin="2,0,2,0" />
                    <Rectangle x:Name="FocusVisual"
                               Margin="1"
                               StrokeThickness="1"
                               Stroke="Black"
                               StrokeDashArray="1 2"
                               Visibility="Collapsed"/>
                </Grid>


                <Border x:Name="Border"
                        Grid.Column="1"
                        Grid.ColumnSpan="2"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Background="{TemplateBinding Background}"
                        Height="{StaticResource &#261;}" />
                <Grid Grid.Column="1" Height="{StaticResource &#261;}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBox Name="PART_EditableTextBox"
                             Width="{TemplateBinding SelectionBoxWidth}"
                             Margin="{TemplateBinding Padding}"
                             Style="{StaticResource &#255;}"
                             IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}" />
                    <ribbon:RibbonToggleButton Name="PART_ToggleButton"
                                               Grid.Column="1"
                                               BorderThickness="{TemplateBinding BorderThickness}"
                                               Background="Transparent"
                                               BorderBrush="Transparent"
                                               Style="{StaticResource &#259;}"
                                               CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                               CheckedBackground="{TemplateBinding PressedBackground}"
                                               PressedBackground="{TemplateBinding PressedBackground}"
                                               PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                               IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                               IsTabStop="false"/>
                </Grid>
            </Grid>
            

            <Popup Name="PART_Popup"
                   HorizontalOffset="1"
                   VerticalOffset="-1"
                   AllowsTransparency="True"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=Border}"
                   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Focusable="False"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                <classic:SystemDropShadowChrome Name="Shadow" 
                                                Color="Transparent" 
                                                MinWidth="{Binding ElementName=Border,Path=ActualWidth}"
                                                controls:KeyTipService.IsKeyTipScope="True"

                                                RenderOptions.ClearTypeHint="Enabled"

                >
                    <Border Name="MenuBorder"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Border x:Name="SubMenuInnerBorder"
                                Background="{StaticResource &#209;}"
                                CornerRadius="2">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                Grid.Row="1"
                                                Grid.IsSharedSizeScope="True"
                                                Margin="1"
                                                KeyboardNavigation.TabNavigation="Cycle"
                                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Border Name="ResizeControl"
                                        Grid.Row="2"
                                        Visibility="Collapsed"
                                        Background="{StaticResource &#210;}" 
                                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                        BorderThickness="0,1,0,0">
                                    <Thumb x:Name="PART_ResizeThumb"  
                                           Style="{StaticResource &#211;}"/>
                                </Border>
                            </Grid>
                        </Border>
                    </Border>
                </classic:SystemDropShadowChrome>
            </Popup>
        </Grid>
    </Border>
    <ControlTemplate.Triggers>
        
        <!-- Star Variant -->
        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}" Value="True">
            <Setter TargetName="TextColumn" Property="Width" Value="*"/>
            <Setter TargetName="OuterTextColumn" Property="Width" Value="*"/>
            <Setter TargetName="PART_EditableTextBox" Property="Width" Value="Auto"/>
            <Setter TargetName="Grid" Property="HorizontalAlignment" Value="Stretch"/>
        </DataTrigger>

        <!-- Large Variant -->
        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
            <Setter Property="MinWidth" Value="44"/>
            <Setter Property="Height" Value="66"/>
            <Setter TargetName="Image" Property="Height" Value="32" />
            <Setter TargetName="Image" Property="Width" Value="32" />
            <Setter TargetName="Grid" Property="MinHeight" Value="26" />
            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
        </DataTrigger>

        <!-- Medium or Small Variant -->
        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small">
            <Setter Property="Height" Value="{StaticResource &#262;}"/>
            <Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
            <Setter TargetName="Image" Property="Height" Value="16" />
            <Setter TargetName="Image" Property="Width" Value="16" />
            <Setter TargetName="Image" Property="HorizontalAlignment" Value="Left" />
            <Setter TargetName="Image" Property="Margin" Value="2,0,1,0" />
            <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,1,0" />
            <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
            <Setter TargetName="Image" Property="Grid.Column" Value="0"/>
            <Setter TargetName="Image" Property="Grid.Row" Value="1"/>
        </DataTrigger>

        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" >
            <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
        </DataTrigger>

        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" >
            <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
        </DataTrigger>

        <!-- IsMouseOver -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="False" />
            </MultiDataTrigger.Conditions>
            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
            <Setter TargetName="PART_ToggleButton" Property="Background" Value="{StaticResource &#256;}" />
        </MultiDataTrigger>
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsMouseOver}" Value="True" />
            </MultiDataTrigger.Conditions>
            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
        </MultiDataTrigger>

        <!-- IsFocused -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True" />
            </MultiDataTrigger.Conditions>
            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBorderBrush}" />
            <Setter TargetName="PART_ToggleButton" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.MouseOverBackground}"/>
        </MultiDataTrigger>

        <Trigger Property="ShowKeyboardCues" Value="True">
            <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
        </Trigger>

        <!-- IsEnabled -->
        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="Image" Property="Opacity" Value="0.5" />
            <Setter TargetName="Border" Property="Background" Value="{StaticResource &#263;}"/>
            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource &#264;}"/>
            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
        </Trigger>

        <!-- IsInControlGroup -->
        <Trigger Property="IsInControlGroup" Value="True">
            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
            <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
        </Trigger>

        <!-- DropDown Triggers -->
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <Trigger Property="IsDropDownPositionedAbove" Value="true">
            <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
            <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedAbove" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
        </MultiTrigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}"/>
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>

        <!-- HighContrast -->

        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



            <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="SubMenuInnerBorder" Property="Background"  Value="Transparent" />
            <!-- This is a hack for v3.0 to set the caret color to something visible in high contrast. Switch to using CaretBrush in v4 -->
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
            <Setter TargetName="Border" Property="Background" Value="Transparent"/>
            <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        </DataTrigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        </MultiDataTrigger>

        <!-- IsFocused -->
        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                <Condition Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True" />
            </MultiDataTrigger.Conditions>
            <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            <Setter TargetName="PART_ToggleButton" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            <Setter TargetName="PART_ToggleButton" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiDataTrigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<Style x:Key="{x:Type ribbon:RibbonComboBox}" TargetType="{x:Type ribbon:RibbonComboBox}">
    <Style.Resources>
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type ribbon:RibbonSeparator}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.Background}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                        <Border x:Name="MainBorder"
                            BorderThickness="0,1,0,1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                            <Border x:Name="Overlay"
                                Background="{StaticResource &#236;}">
                                <TextBlock x:Name="Text" 
                                    Margin="2,1,2,1"
                                    Text="{TemplateBinding Label}" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>


                            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                                <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Label" Value="{x:Null}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                                <Grid x:Name="Grid"  SnapsToDevicePixels="True" Margin="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="22"
                                                          Width="Auto"
                                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="14" />
                                    </Grid.ColumnDefinitions>

                                    <Border x:Name="SideBarBorder"
                                            BorderThickness="0,0,1,0"
                                            Margin="0,-1,0,-1"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}">
                                        <Border x:Name="SideBarOverlay"
                                                Background="{StaticResource &#236;}">
                                        </Border>
                                    </Border>
                                    <Line x:Name="Line"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Margin="2,0,0,0"
                                          X1="0"
                                          Y1="0"
                                          X2="1"
                                          Y2="0"
                                          Stroke="{TemplateBinding BorderBrush}"
                                          StrokeThickness="1"
                                          Stretch="Fill" />
                                </Grid>

                                <ControlTemplate.Triggers>


                                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                        <Setter TargetName="SideBarBorder" Property="Background"  Value="Transparent" />
                                        <Setter TargetName="SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                        <Setter TargetName="SideBarOverlay" Property="Background"  Value="Transparent" />
                                        <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Style.Resources>
    <Setter Property="Background" Value="{StaticResource &#265;}"/>
    <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Padding" Value="2,1,2,1" />
    <Setter Property="AllowDrop" Value="True"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="SelectionBoxWidth" Value="80" />
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="MouseOverBackground" Value="White" />
    <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.BorderBrush}" />
    <Setter Property="FocusedBackground" Value="White" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
    <Setter Property="QuickAccessToolBarControlSizeDefinition">
        <Setter.Value>
            <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
        </Setter.Value>
    </Setter>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonComboBox}">
                <Border x:Name="MainBorder">
                    <Grid Margin="1,0,1,0" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition x:Name="OuterTextColumn"  Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Image x:Name="Image"
                               Source="{TemplateBinding LargeImageSource}"
                               RenderOptions.BitmapScalingMode="NearestNeighbor"
                               VerticalAlignment="Center"
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                               Grid.Row="0"
                               Grid.Column="1"
                               Margin="1"
                               Width="32"
                               Height="32" />
                        <Grid Name="Grid"
                              Grid.Row="1"
                              Grid.Column="1"
                              VerticalAlignment="Top"
                              HorizontalAlignment="Center"
                              Margin="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition x:Name="TextColumn"  Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid x:Name="TwoLineTextPanel"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center">
                                <ribbon:RibbonTwoLineText x:Name="TwoLineText"
                                                          Text="{TemplateBinding Label}"
                                                          TextAlignment="Center"
                                                          LineHeight="13px"
                                                          LineStackingStrategy="BlockLineHeight"
                                                          Margin="2,0,2,0" />
                                <Rectangle x:Name="FocusVisual"
                                           Margin="1"
                                           StrokeThickness="1"
                                           Stroke="Black"
                                           StrokeDashArray="1 2"
                                           Visibility="Collapsed"/>
                            </Grid>

                            <Border x:Name="Border"
                                    Grid.Column="1"
                                    Grid.ColumnSpan="2"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Height="{StaticResource &#261;}" />
                            <Grid Grid.Column="1" Height="{StaticResource &#261;}" Grid.IsSharedSizeScope="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="ToggleButtonGroup" />
                                </Grid.ColumnDefinitions>
                                <Grid IsHitTestVisible="False" 
                                      Margin="{TemplateBinding Padding}" 
                                      Width="{TemplateBinding SelectionBoxWidth}" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                    <ContentPresenter Name="PART_ContentHost"
                                                      Content="{TemplateBinding SelectionBoxItem}"
                                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                      ContentTemplateSelector="{TemplateBinding SelectionBoxItemTemplateSelector}"
                                                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                                      Margin="2,0,2,0" />
                                </Grid>
                                <ribbon:RibbonToggleButton Name="PART_ToggleButton"
                                                           Grid.ColumnSpan="2"
                                                           BorderThickness="{TemplateBinding BorderThickness}"
                                                           Background="Transparent"
                                                           BorderBrush="Transparent"
                                                           Style="{StaticResource &#257;}"
                                                           CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                           CheckedBackground="{TemplateBinding PressedBackground}"
                                                           PressedBackground="{TemplateBinding PressedBackground}"
                                                           PressedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                                           IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"/>

                            </Grid>
                        </Grid>

                        <Popup Name="PART_Popup"
                               HorizontalOffset="1"
                               VerticalOffset="-1"
                               AllowsTransparency="True"
                               Placement="Bottom"
                               PlacementTarget="{Binding ElementName=Border}"
                               IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               Focusable="False"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                        <classic:SystemDropShadowChrome Name="Shadow" 
                                                        Color="Transparent" 
                                                        MinWidth="{Binding ElementName=Border,Path=ActualWidth}"
                                                        controls:KeyTipService.IsKeyTipScope="True"

                                                        RenderOptions.ClearTypeHint="Enabled"

                        >
                            <Border Name="MenuBorder"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="2">
                                <Border x:Name="SubMenuInnerBorder"
                                        Background="{StaticResource &#209;}"
                                        CornerRadius="2">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <ItemsPresenter x:Name="ItemsPresenter"
                                                        Grid.Row="1"
                                                        Grid.IsSharedSizeScope="True"
                                                        Margin="1"
                                                        KeyboardNavigation.TabNavigation="Cycle"
                                                        KeyboardNavigation.DirectionalNavigation="Cycle"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        <Border Name="ResizeControl"
                                                Grid.Row="2"
                                                Visibility="Collapsed"
                                                Background="{StaticResource &#210;}" 
                                                BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                                BorderThickness="0,1,0,0">
                                            <Thumb x:Name="PART_ResizeThumb"  
                                                   Style="{StaticResource &#211;}"/>
                                        </Border>
                                    </Grid>
                                </Border>
                            </Border>
                        </classic:SystemDropShadowChrome>
                    </Popup>
                </Grid>
            </Border>
                <ControlTemplate.Triggers>

                    <!-- Star Variant -->
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.Width.IsStar}" Value="True">
                        <Setter TargetName="TextColumn" Property="Width" Value="*"/>
                        <Setter TargetName="OuterTextColumn" Property="Width" Value="*"/>
                        <Setter TargetName="PART_ContentHost" Property="Width" Value="Auto"/>
                        <Setter TargetName="PART_ContentHost" Property="HorizontalAlignment" Value="Stretch"/>
                        <Setter TargetName="Grid" Property="HorizontalAlignment" Value="Stretch"/>
                    </DataTrigger>

                    <!-- Large Variant -->
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Large">
                        <Setter Property="MinWidth" Value="44"/>
                        <Setter Property="Height" Value="66"/>
                        <Setter TargetName="Image" Property="Height" Value="32" />
                        <Setter TargetName="Image" Property="Width" Value="32" />
                        <Setter TargetName="Grid" Property="MinHeight" Value="26" />
                        <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="True" />
                    </DataTrigger>

                    <!-- Medium or Small Variant -->
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Small">
                        <Setter Property="Height" Value="{StaticResource &#262;}"/>
                        <Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SmallImageSource}" />
                        <Setter TargetName="Image" Property="Height" Value="16" />
                        <Setter TargetName="Image" Property="Width" Value="16" />
                        <Setter TargetName="Image" Property="HorizontalAlignment" Value="Left" />
                        <Setter TargetName="Image" Property="Margin" Value="2,0,1,0" />
                        <Setter TargetName="TwoLineText" Property="Margin" Value="2,0,1,0" />
                        <Setter TargetName="TwoLineText" Property="HasTwoLines" Value="False" />
                        <Setter TargetName="Image" Property="Grid.Column" Value="0"/>
                        <Setter TargetName="Image" Property="Grid.Row" Value="1"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.ImageSize}" Value="Collapsed" >
                        <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ControlSizeDefinition.IsLabelVisible}" Value="False" >
                        <Setter TargetName="TwoLineTextPanel" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>

                    <!-- IsMouseOver -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBackground}" />
                        <Setter TargetName="PART_ToggleButton" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MouseOverBorderBrush}" />
                        <Setter TargetName="PART_ToggleButton" Property="Background" Value="{StaticResource &#256;}" />
                    </MultiDataTrigger>

                    <!-- IsFocused -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="False"/>



                            <Condition Binding="{Binding ElementName=PART_ToggleButton, Path=IsKeyboardFocused}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBackground}" />
                        <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedBorderBrush}" />
                    </MultiDataTrigger>
                    <Trigger Property="ShowKeyboardCues" Value="True">
                        <Setter TargetName="FocusVisual" Property="Visibility" Value="Visible" />
                    </Trigger>

                    <!-- IsEnabled -->
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter TargetName="Image" Property="Opacity" Value="0.5" />
                        <Setter TargetName="Border" Property="Background" Value="{StaticResource &#263;}"/>
                        <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource &#264;}"/>
                        <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>
                    </Trigger>

                    <!-- IsInControlGroup -->
                    <Trigger Property="IsInControlGroup" Value="True">
                        <Setter TargetName="MainBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}" />
                        <Setter TargetName="MainBorder" Property="BorderThickness" Value="0,0,1,0" />
                    </Trigger>

                    <!-- DropDown Triggers -->
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="true"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="CanUserResizeHorizontally" Value="false"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
                    </MultiTrigger>
                    <Trigger Property="IsDropDownPositionedAbove" Value="true">
                        <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
                        <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsDropDownPositionedAbove" Value="true" />
                            <Condition Property="CanUserResizeHorizontally" Value="true"/>
                            <Condition Property="CanUserResizeVertically" Value="true"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
                    </MultiTrigger>
                    <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
                        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
                        <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}"/>
                    </Trigger>
                    <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
                        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                    </Trigger>

                    <!-- HighContrast -->

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                        <Setter TargetName="Shadow" Property="Color"  Value="Transparent" />
                        <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
                        <Setter TargetName="MenuBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="MenuBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="ResizeControl" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="ResizeControl" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="SubMenuInnerBorder" Property="Background"  Value="Transparent" />
                        <!-- This is a hack for v3.0 to set the caret color to something visible in high contrast. Switch to using CaretBrush in v4 -->
                        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
                        <Setter TargetName="Border" Property="Background" Value="Transparent"/>
                        <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                        <Setter TargetName="FocusVisual" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
                        <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInControlGroup}" Value="True" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                            <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MainBorder" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Style.Triggers>
        <Trigger Property="IsDropDownOpen" Value="True">
            <Setter Property="ToolTipService.IsEnabled" Value="False" />
        </Trigger>

        <!-- IsEditable Template -->
        <Trigger Property="IsEditable" Value="true">
            <Setter Property="Template" Value="{StaticResource &#260;}"/>
        </Trigger>
    </Style.Triggers>
</Style>

<!--=================================================================
        RibbonContextMenu
        ==================================================================-->

<Style x:Key="{x:Type ribbon:RibbonContextMenu}" TargetType="{x:Type ribbon:RibbonContextMenu}" >
    <Style.Resources>
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type ribbon:RibbonSeparator}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonContextMenu}}, Path=PlacementTarget.(ribbon:RibbonControlService.Ribbon).BorderBrush}" />
            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonContextMenu}}, Path=PlacementTarget.(ribbon:RibbonControlService.Ribbon).Background}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                        <Border x:Name="MainBorder"
                            BorderThickness="0,1,0,1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                            <Border x:Name="Overlay"
                                Background="{StaticResource &#236;}">
                                <TextBlock x:Name="Text" 
                                    Margin="2,1,2,1"
                                    Text="{TemplateBinding Label}" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>

                            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                                <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Label" Value="{x:Null}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                                <Grid x:Name="Grid" SnapsToDevicePixels="True" Margin="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="22"
                                                          Width="Auto"
                                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="14" />
                                    </Grid.ColumnDefinitions>

                                    <Border x:Name="SideBarBorder"
                                            BorderThickness="0,0,1,0"
                                            Margin="0,-1,0,-1"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}">
                                        <Border x:Name="SideBarOverlay"
                                                Background="{StaticResource &#236;}">
                                        </Border>
                                    </Border>
                                    <Line x:Name="Line"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Margin="2,0,0,0"
                                          X1="0"
                                          Y1="0"
                                          X2="1"
                                          Y2="0"
                                          Stroke="{TemplateBinding BorderBrush}"
                                          StrokeThickness="1"
                                          Stretch="Fill" />
                                </Grid>

                                <ControlTemplate.Triggers>

                                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                        <Setter TargetName="SideBarBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                        <Setter TargetName="SideBarBorder" Property="Background"  Value="Transparent" />
                                        <Setter TargetName="SideBarOverlay" Property="Background"  Value="Transparent" />
                                        <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Style.Resources>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ribbon:RibbonContextMenu}">
                        <classic:SystemDropShadowChrome Name="Shadow" Color="Transparent" SnapsToDevicePixels="True"

                           RenderOptions.ClearTypeHint="Enabled"

                        >
                    <Border Name="PART_ResizeBorder"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PlacementTarget.(ribbon:RibbonControlService.Ribbon).BorderBrush}"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PlacementTarget.(ribbon:RibbonControlService.Ribbon).Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <Border x:Name="SubMenuInnerBorder"
                                Background="{StaticResource &#209;}"
                                BorderThickness="0"
                                CornerRadius="2">
                            <ScrollViewer x:Name="SubMenuScrollViewer"
                                          Margin="1"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Height="0"
                                            Width="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                   Height="{Binding ElementName=PART_ResizeBorder,Path=ActualHeight}"
                                                   Width="{Binding ElementName=PART_ResizeBorder,Path=ActualWidth}"
                                                   Fill="{Binding ElementName=PART_ResizeBorder,Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                   Height="{Binding ElementName=SubMenuInnerBorder,Path=ActualHeight}"
                                                   Width="{Binding ElementName=SubMenuInnerBorder,Path=ActualWidth}"
                                                   Fill="{Binding ElementName=SubMenuInnerBorder,Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True" />

                                </Grid>

                            </ScrollViewer>
                        </Border>
                    </Border>
                    
                </classic:SystemDropShadowChrome>

                <ControlTemplate.Triggers>

                    <Trigger SourceName="SubMenuScrollViewer"
                             Property="ScrollViewer.CanContentScroll"
                             Value="false">
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OpaqueRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Top" 
                                Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}" />
                        <Setter TargetName="OverlayRect" 
                                Property="Canvas.Left" 
                                Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}" />
                    </Trigger>

                    <Trigger Property="HasGallery" Value="True">
                        <Setter TargetName="SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                        <Setter TargetName="SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                    </Trigger>
                    <Trigger Property="HasDropShadow" Value="True">
                        <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
                        <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}"/>
                    </Trigger>

                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




                        <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

                        <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
                        <Setter TargetName="SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        <Setter TargetName="PART_ResizeBorder" Property="BorderBrush"  Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter TargetName="PART_ResizeBorder" Property="Background"  Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
                        <Setter TargetName="SubMenuInnerBorder" Property="Background"  Value="Transparent" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>

<!--=================================================================
        RibbonMenuButton
        ==================================================================-->

<ControlTemplate x:Key="&#215;" TargetType="{x:Type ribbon:RibbonMenuButton}">
    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <!-- Please note that the setter for the Style property is only so that this ToggleButton doesn't accidentally pick up some styles defined at the app level. -->
        <ribbon:RibbonToggleButton x:Name="PART_ToggleButton"
                                   Style="{x:Null}"
                                   Template="{StaticResource &#294;}"
                                   ribbon:RibbonTwoLineText.PathData="{TemplateBinding ribbon:RibbonTwoLineText.PathData}"
                                   Label="{TemplateBinding Label}"
                                   LargeImageSource="{TemplateBinding LargeImageSource}"
                                   SmallImageSource="{TemplateBinding SmallImageSource}"
                                   ControlSizeDefinition="{TemplateBinding ControlSizeDefinition}"
                                   BorderBrush="{TemplateBinding BorderBrush}"
                                   BorderThickness="{TemplateBinding BorderThickness}"
                                   Background="{TemplateBinding Background}"
                                   CornerRadius="2"
                                   FocusVisualStyle="{x:Null}"
                                   MouseOverBorderBrush="{TemplateBinding MouseOverBorderBrush}"
                                   MouseOverBackground="{TemplateBinding MouseOverBackground}"
                                   CheckedBorderBrush="{TemplateBinding PressedBorderBrush}"
                                   CheckedBackground="{TemplateBinding PressedBackground}"
                                   FocusedBorderBrush="{TemplateBinding FocusedBorderBrush}"
                                   FocusedBackground="{TemplateBinding FocusedBackground}"
                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   Padding="{TemplateBinding Padding}"
                                   ClickMode="Press"
                                   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay}">
        <ribbon:RibbonToggleButton.Resources>
            <Thickness x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon}, ResourceId=LargeImageMargin}"
                        Left="1"
                        Top="1"
                        Right="1"
                        Bottom="2" />
        </ribbon:RibbonToggleButton.Resources>
        </ribbon:RibbonToggleButton>
        <Popup x:Name="PART_Popup"
               HorizontalOffset="1"
               VerticalOffset="-1"
               AllowsTransparency="True"
               Placement="Bottom"
               IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen}"
               Focusable="False"
               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
            <classic:SystemDropShadowChrome Name="Shadow" Color="Transparent" controls:KeyTipService.IsKeyTipScope="True"

               RenderOptions.ClearTypeHint="Enabled"

            >
                <Border x:Name="MenuBorder"
                        BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                        Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                    <Border x:Name="SubMenuInnerBorder"
                            Background="{StaticResource &#209;}"
                            BorderThickness="0"
                            CornerRadius="2">
                        <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                            <ScrollViewer x:Name="PART_SubMenuScrollViewer"
                                          Grid.Row="1"
                                          Margin="1"
                                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type FrameworkElement}, ResourceId=MenuScrollViewer}}">

                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="BackgroundCanvas"
                                            Height="0"
                                            Width="0"
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="Top">
                                        <Rectangle x:Name="OpaqueRect"
                                                   Height="{Binding ElementName=MenuBorder,Path=ActualHeight}"
                                                   Width="{Binding ElementName=MenuBorder,Path=ActualWidth}"
                                                   Fill="{Binding ElementName=MenuBorder,Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                        <Rectangle x:Name="OverlayRect"
                                                   Height="{Binding ElementName=SubMenuInnerBorder,Path=ActualHeight}"
                                                   Width="{Binding ElementName=SubMenuInnerBorder,Path=ActualWidth}"
                                                   Fill="{Binding ElementName=SubMenuInnerBorder,Path=Background}"
                                                   RadiusX="2"
                                                   RadiusY="2" />
                                    </Canvas>

                                    <ItemsPresenter x:Name="ItemsPresenter"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True" />

                                </Grid>

                            </ScrollViewer>
                            <Border Name="ResizeControl"
                                    Grid.Row="2"
                                    Visibility="Collapsed"
                                    Background="{StaticResource &#210;}" 
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Ribbon.BorderBrush}"
                                    BorderThickness="0,1,0,0">
                                <Thumb x:Name="PART_ResizeThumb"  
                                       Style="{StaticResource &#211;}"/>
                            </Border>
                        </Grid>
                    </Border>
                </Border>
            </classic:SystemDropShadowChrome>
        </Popup>
    </Grid>
    <ControlTemplate.Triggers>

        <Trigger SourceName="PART_SubMenuScrollViewer"
                 Property="ScrollViewer.CanContentScroll"
                 Value="false">
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OpaqueRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Top" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=VerticalOffset}" />
            <Setter TargetName="OverlayRect" 
                    Property="Canvas.Left" 
                    Value="{Binding ElementName=PART_SubMenuScrollViewer, Path=HorizontalOffset}" />
        </Trigger>

        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsInQuickAccessToolBar}" Value="True">
            <Setter TargetName="PART_ToggleButton"  Property="Height" Value="Auto"/>
        </DataTrigger>
        <Trigger Property="IsEnabled" Value="False">
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{StaticResource &#203;}"/>                        
        </Trigger>
        <Trigger Property="HasGallery" Value="True">
            <Setter TargetName="PART_SubMenuScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="CanUserResizeHorizontally" Value="false"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="ResizeControl" Property="Visibility" Value="Visible" />
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#212;}" />
        </MultiTrigger>
        <Trigger Property="IsDropDownPositionedAbove" Value="true">
            <Setter TargetName="ResizeControl" Property="Grid.Row" Value="0" />
            <Setter TargetName="ResizeControl" Property="BorderThickness" Value="0,0,0,1" />
        </Trigger>
        <MultiTrigger>
            <MultiTrigger.Conditions>
                <Condition Property="IsDropDownPositionedAbove" Value="true" />
                <Condition Property="CanUserResizeHorizontally" Value="true"/>
                <Condition Property="CanUserResizeVertically" Value="true"/>
            </MultiTrigger.Conditions>
            <Setter TargetName="PART_ResizeThumb" Property="Style" Value="{StaticResource &#213;}" />
        </MultiTrigger>
        <Trigger Property="HasItems" Value="False">
            <Setter TargetName="PART_ToggleButton" Property="ribbon:RibbonTwoLineText.PathData" Value="{x:Null}"/>
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="True">
            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5"/>
            <Setter TargetName="Shadow" Property="Color" Value="{StaticResource &#214;}"/>
        </Trigger>
        <Trigger SourceName="PART_Popup" Property="Popup.IsOpen" Value="False">
            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
        </Trigger>

        <!-- HighContrast -->

        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">




            <Setter TargetName="BackgroundCanvas" Property="Visibility" Value="Collapsed" />

            <Setter TargetName="Shadow" Property="Color" Value="Transparent" />
            <Setter TargetName="PART_Popup" Property="PopupAnimation"  Value="None" />
            <Setter TargetName="PART_SubMenuScrollViewer" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="MenuBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="ResizeControl" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter TargetName="ResizeControl" Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
            <Setter TargetName="SubMenuInnerBorder" Property="Background" Value="Transparent" />
            <Setter TargetName="SubMenuInnerBorder" Property="CornerRadius" Value="0" />
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        </DataTrigger>

        <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />

                <Condition Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True"/>



            </MultiDataTrigger.Conditions>
            <Setter TargetName="MainGrid" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </MultiDataTrigger>
    </ControlTemplate.Triggers>
</ControlTemplate>

<Style x:Key="{x:Type ribbon:RibbonMenuButton}" TargetType="{x:Type ribbon:RibbonMenuButton}" >
    <Style.Resources>
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type ribbon:RibbonSeparator}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.BorderBrush}" />
            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type ribbon:RibbonMenuButton}}, Path=Ribbon.Background}" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                        <Border x:Name="MainBorder"
                                SnapsToDevicePixels="True"
                                BorderThickness="0,1,0,1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}">
                            <Border x:Name="Overlay"
                                    Background="{StaticResource &#236;}">
                                <TextBlock x:Name="Text" 
                                           Margin="2,1,2,1"
                                           Text="{TemplateBinding Label}" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>

                            <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                <Setter TargetName="Text" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                                <Setter TargetName="Overlay" Property="Background" Value="Transparent" />
                                <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                                <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Label" Value="{x:Null}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ribbon:RibbonSeparator}">
                                <Grid x:Name="Grid"  SnapsToDevicePixels="True" Margin="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="22"
                                                          Width="Auto"
                                                          SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="14" />
                                    </Grid.ColumnDefinitions>

                                    <Border x:Name="SideBarBorder"
                                            BorderThickness="0,0,1,0"
                                            Margin="0,-1,0,-1"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}">
                                        <Border x:Name="SideBarOverlay"
                                                Background="{StaticResource &#236;}">
                                    </Border>
                                    </Border>
                                    <Line x:Name="Line"
                                          Grid.Column="1"
                                          Grid.ColumnSpan="2"
                                          Margin="2,0,0,0"
                                          X1="0"
                                          Y1="0"
                                          X2="1"
                                          Y2="0"
                                          Stroke="{TemplateBinding BorderBrush}"
                                          StrokeThickness="1"
                                          Stretch="Fill" />
                                </Grid>

                                <ControlTemplate.Triggers>

                                    <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="True">



                                        <Setter TargetName="SideBarBorder" Property="Background"  Value="Transparent" />
                                        <Setter TargetName="SideBarBorder" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                        <Setter TargetName="SideBarOverlay" Property="Background"  Value="Transparent" />
                                        <Setter TargetName="Line" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Style.Resources>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Padding" Value="2,0,2,0" />
    <Setter Property="MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBorderBrush}" />
    <Setter Property="MouseOverBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.MouseOverBackground}" />
    <Setter Property="PressedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBorderBrush}" />
    <Setter Property="PressedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.PressedBackground}" />
    <Setter Property="FocusedBorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBorderBrush}" />
    <Setter Property="FocusedBackground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Ribbon.FocusedBackground}" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="{StaticResource &#205;}" />
    <Setter Property="ToolTipService.ShowDuration" Value="{StaticResource &#206;}" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="{StaticResource &#207;}" />
    <Setter Property="ribbon:RibbonTwoLineText.PathData" Value="{StaticResource &#208;}" />
    <Setter Property="QuickAccessToolBarControlSizeDefinition">
        <Setter.Value>
            <ribbon:RibbonControlSizeDefinition ImageSize="Small" IsLabelVisible="False" />
        </Setter.Value>
    </Setter>
    <Setter Property="Template" Value="{StaticResource &#215;}"/>
    <Style.Triggers>
        <Trigger Property="IsDropDownOpen" Value="True">
            <Setter Property="ToolTipService.IsEnabled" Value="False" />
        </Trigger>
    </Style.Triggers>
</Style>































































































































































































































































































































































</ResourceDictionary>

