<Project>
   <PropertyGroup>
    <_DotnetApiDocsFilesRoot>$([MSBuild]::NormalizeDirectory('$(NuGetPackageRoot)', '$(_DotnetApiDocsPackageName.ToLower())', '$(MicrosoftPrivateIntellisenseVersion)', 'IntellisenseFiles', 'windowsdesktop', '1033'))</_DotnetApiDocsFilesRoot>
  </PropertyGroup>

  <ItemGroup>
    <PackageDownload Include="Microsoft.Private.Intellisense" Version="[$(MicrosoftPrivateIntellisenseVersion)]" />
  </ItemGroup>

  <PropertyGroup>
    <EnsureReferenceAssemblyPrerequisitesDependsOn>
      $(EnsureReferenceAssemblyPrerequisitesDependsOn);
      EnsureReferenceDestination;
      CopyIntellisenseXmls
    </EnsureReferenceAssemblyPrerequisitesDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <CoreBuildDependsOn>
      EnsureReferenceAssemblyPrerequisites;
      $(CoreBuildDependsOn)
    </CoreBuildDependsOn>
    <ResolveReferencesDependsOn>
      EnsureReferenceAssemblyPrerequisites;
      $(ResolveReferencesDependsOn)
    </ResolveReferencesDependsOn>
  </PropertyGroup>
  
  <Target Name="EnsureReferenceAssemblyPrerequisites"
          DependsOnTargets="$(EnsureReferenceAssemblyPrerequisitesDependsOn)" />
  
  <Target Name="EnsureReferenceDestination" >
    <!-- Create and export properties used in Reference assembly generation                       -->
    <!--                                                                                          -->
    <!-- $(ArtifactsReferenceAssemblyDir) = $(ArtifactsDir)ref\                                   -->
    <!-- $(BaseReferenceAssemblyDir) = $(ArtifactsReferenceAssemblyDir)$(AssemblyName)\           -->
    <!-- $(ReferenceAssemblyDir) = $(BaseReferenceAssemblyDir)$(Configuration)$(TargetFramework)\ -->
    <CreateProperty Condition="'$(ArtifactsReferenceAssemblyDir)'==''" Value="$(ArtifactsDir)ref\">
      <Output PropertyName="ArtifactsReferenceAssemblyDir" TaskParameter="Value"/>
    </CreateProperty>

    <CreateProperty Condition="'$(BaseReferenceAssemblyDir)'==''" Value="$(ArtifactsReferenceAssemblyDir)$(AssemblyName)\">
      <Output PropertyName="BaseReferenceAssemblyDir" TaskParameter="Value"/>
    </CreateProperty>

    <CreateProperty Condition="'$(ReferenceAssemblyDir)'==''" Value="$(BaseReferenceAssemblyDir)$(Configuration)\$(TargetFramework)\">
      <Output PropertyName="ReferenceAssemblyDir" TaskParameter="Value"/>
    </CreateProperty>
  </Target>

  <Target Name="CopyIntellisenseXmls"
          Condition="'$(ReferenceProjectRepoLocation)'=='External' and '$(RepositoryName)'=='wpf'"
          Outputs="$(IntellisenseXmlDir)$(AssemblyName).xml">
    <PropertyGroup>
      <!-- The intellisense provided by the Docs system -->
      <IntellisenseXmlFileSource>$([MSBuild]::NormalizePath('$(_DotnetApiDocsFilesRoot)', '$(AssemblyName).xml'))</IntellisenseXmlFileSource>
      
      <!-- Set the xml destination (for a later step that copies files from the dotnet-api-docs to local build artifacts) -->
      <IntellisenseXmlDest Condition="'$(ProduceReferenceAssembly)' == 'true' And '$(PackageAsRefAndLib)' != 'true'" >$([System.IO.Path]::ChangeExtension('$(TargetRefPath)', '.xml'))</IntellisenseXmlDest>
      <IntellisenseXmlDest Condition="'$(PackageAsRefAndLib)' == 'true'" >$([System.IO.Path]::ChangeExtension('$(TargetPath)', '.xml'))</IntellisenseXmlDest>
      <IntellisenseXmlDestDir Condition="'$(IntellisenseXmlDest)' != ''">$([System.IO.Path]::GetDirectoryName('$(IntellisenseXmlDest)'))</IntellisenseXmlDestDir>
    </PropertyGroup>
    <!-- 
      EnsureReferenceDestination guarantees that there is exactly 1 ref assembly 
    -->
    <PropertyGroup>
      <IntellisenseXmlFile>$(IntellisenseXmlDir)$(AssemblyName).xml</IntellisenseXmlFile>
    </PropertyGroup>

    <Message Condition="!Exists('$(IntellisenseXmlFile)')"
             Text="$(IntellisenseXmlFile) is missing" />
    
    <Copy SourceFiles="$(IntellisenseXmlFile)"
          Condition="Exists('$(IntellisenseXmlFile)')"
          DestinationFolder="$(ReferenceAssemblyDir)"          
          SkipUnchangedFiles="true"/>
  </Target>

  <!-- 
    Hand crafted reference assemblies need to be copied over into the proper artifacts location. 
    This should be done only if we're dealing with a reference assembly project and that project is
    meant to be shipped from the particular repository we're building.
  -->
  <Target Name="CopyHandCraftedReferenceProjectsToRefDir" 
          AfterTargets="PrepareForRun"
          Condition="'$(ReferenceProjectRepoLocation)'=='External' and '$(RepositoryName)'=='wpf'">
    <Copy SourceFiles="$(TargetPath)"
          Condition="Exists('$(TargetPath)')"
          DestinationFolder="$(ReferenceAssemblyDir)"
          SkipUnchangedFiles="true"/>
  </Target>
  
</Project>
