# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
parameters:
  runAsPublic: true
  repoName: dotnet/wpf
jobs:
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
  - template: /eng/common/templates-official/job/onelocbuild.yml@self
    parameters:
      MirrorRepo: wpf
      LclSource: lclFilesfromPackage
      LclPackageId: 'LCL-JUNO-PROD-WPF'
- template: /eng/common/templates-official/jobs/jobs.yml@self
  parameters:
    enableMicrobuild: true
    enablePublishBuildArtifacts: true
    enablePublishTestResults: false
    enablePublishBuildAssets: true
    enablePublishUsingPipelines: true
    enableTelemetry: true
    enableSourceIndex: true
    sourceIndexParams:
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
      binlogPath: artifacts/log/Debug/x86/Build.binlog
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2022preview.amd64.Open
        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          name: NetCore1ESPool-Internal
          demands: ImageOverride -equals windows.vs2022preview.amd64
    helixRepo: $(repoName)
    jobs:
    - job: Windows_NT
      timeoutInMinutes: 120
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2022preview.amd64.Open
        ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          name: NetCore1ESPool-Internal
          demands: ImageOverride -equals windows.vs2022preview.amd64
      variables:
      - name: Codeql.Enabled
        value: true
      - name: _TeamName
        value: DotNetCore
      - name: _SignType
        value: real
      - name: _SignArgs
        value: ''
      - name: _PublishArgs
        value: ''
      - name: _OfficialBuildIdArgs
        value: ''
      - name: _Platform
        value: x86
      - name: _PlatformArgs
        value: /p:Platform=$(_Platform)
      - name: _PublicBuildPipeline
        value: true
      - name: _TestHelixAgentPool
        value: 'Windows.10.Amd64.ClientRS5.Open'
      - name: _HelixStagingDir
        value: $(BUILD.STAGINGDIRECTORY)\helix\functests
      - name: _HelixSource
        value: ${{ parameters.repoName }}/$(Build.SourceBranch)
      - name: _HelixToken
        value: ''
      - name: _HelixCreator
        value: ${{ parameters.repoName }}
      - name: _programfilesx86
        value: ${Env:ProgramFiles(x86)}/dotnet
      - name: _programfiles
        value: ${Env:ProgramFiles}/dotnet
      - ${{ if ne(variables['System.TeamProject'], 'internal') }}:
        - name: _InternalRuntimeDownloadArgs
          value: ''
      - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
        - group: DotNetBuilds storage account read tokens
        - group: AzureDevOps-Artifact-Feeds-Pats
        - name: _InternalRuntimeDownloadArgs
          value: >-
            /p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64)
      - ${{ if eq(parameters.runAsPublic, 'false') }}:
        - name: _SignType
          value: real
        - group: DotNet-HelixApi-Access
        - name: _SignArgs
          value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
        - name: _PublishArgs
          value: /p:DotNetPublishUsingPipelines=true
        - name: _OfficialBuildIdArgs
          value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        - name: _PublicBuildPipeline
          value: false
        - name: _HelixSource
          value: official/${{ parameters.repoName }}/$(Build.SourceBranch)
        - name: _HelixToken
          value: '$(HelixApiAccessToken)'
        - name: _HelixCreator
          value: ''
        - name: _TestHelixAgentPool
          value: 'Windows.10.Amd64.ClientRS5'
      strategy:
        matrix:
          ${{ if eq(parameters.runAsPublic, 'true') }}:
            Build_Debug_x86:
              _BuildConfig: Debug
          Build_Release_x86:
            _BuildConfig: Release
          ${{ if eq(parameters.runAsPublic, 'true') }}:
            Build_Debug_x64:
              _BuildConfig: Debug
              _Platform: x64
          Build_Release_x64:
            _BuildConfig: Release
            _Platform: x64
          ${{ if eq(parameters.runAsPublic, 'true') }}:
            Build_Debug_arm64:
              _BuildConfig: Debug
              _Platform: arm64
          Build_Release_arm64:
            _BuildConfig: Release
            _Platform: arm64
      steps:
      - checkout: self
        clean: true
      - powershell: eng\pre-build.ps1
        displayName: Pre-Build - Set VSO Variables
      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - task: PowerShell@2
          displayName: Setup Private Feeds Credentials
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
            arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)
      - script: eng\scripts\cibuild.cmd -configuration $(_BuildConfig) -prepareMachine $(_PublishArgs) $(_SignArgs) $(_OfficialBuildIdArgs) $(_PlatformArgs) $(_InternalRuntimeDownloadArgs)
        displayName: Windows Build / Publish
        condition: or(ne(variables['_HelixPipeline'], 'true'), and(eq(variables['_HelixPipeline'], 'true') ,eq(variables['_BuildConfig'], 'Release'), eq(variables['_PublicBuildPipeline'], 'true'), eq(variables['_ContinuousIntegrationTestsEnabled'], 'true')))
      - script: eng\scripts\ciunittest.cmd -configuration $(_BuildConfig) -prepareMachine $(_PublishArgs) $(_SignArgs) $(_OfficialBuildIdArgs) $(_PlatformArgs) $(_InternalRuntimeDownloadArgs)
        displayName: Run xUnit Tests
        condition: and(or(ne(variables['_HelixPipeline'], 'true'), and(eq(variables['_HelixPipeline'], 'true') ,eq(variables['_BuildConfig'], 'Release'), eq(variables['_PublicBuildPipeline'], 'true'), eq(variables['_ContinuousIntegrationTestsEnabled'], 'true'))), ne(variables['_Platform'], 'arm64'))
      - task: PublishTestResults@2
        displayName: Publish XUnit Test Results
        inputs:
          testResultsFormat: 'xUnit'
          testResultsFiles: '*.xml'
          searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
          mergeTestResults: true
        continueOnError: true
        condition: and(eq(variables['_BuildConfig'], 'Release'), ne(variables['_Platform'], 'arm64'))
      - task: PowerShell@2
        displayName: Install .NET Core
        inputs:
          filePath: $(Build.SourcesDirectory)/dotnet-test-install.ps1
          arguments: -InstallDir $(_programfiles) -Architecture $(_Platform) -Runtime dotnet  -Channel 8.0 -Quality daily
          condition: eq(variables['_Platform'], 'x64')
      - task: PowerShell@2
        displayName: Install .NET Core(x86)
        inputs:
          filePath: $(Build.SourcesDirectory)/dotnet-test-install.ps1
          arguments: -InstallDir $(_programfilesx86) -Architecture $(_Platform) -Runtime dotnet  -Channel 8.0 -Quality daily
        condition: eq(variables['_Platform'], 'x86')
      - task: PowerShell@2
        displayName: Install .NET WindowsDesktop
        inputs:
          filePath: $(Build.SourcesDirectory)/dotnet-test-install.ps1
          arguments: -InstallDir $(_programfiles) -Architecture $(_Platform) -Runtime windowsdesktop  -Channel 8.0 -Quality daily
        condition: eq(variables['_Platform'], 'x64')
      - task: PowerShell@2
        displayName: Install .NET WindowsDesktop(x86)
        inputs:
          filePath: $(Build.SourcesDirectory)/dotnet-test-install.ps1
          arguments: -InstallDir $(_programfilesx86) -Architecture $(_Platform) -Runtime windowsdesktop  -Channel 8.0 -Quality daily
        condition: eq(variables['_Platform'], 'x86')
      - task: PowerShell@2
        displayName: Replace WPF binaries
        inputs:
          targetType: 'inline'
          script: '.\eng\copy-wpf.ps1 -testhost -destination .dotnet -$(_BuildConfig) -arch $(_Platform)'
        condition: and(eq(variables['System.TeamProject'], 'public'), ne(variables['_Platform'], 'arm64'))
      - task: DownloadPipelineArtifact@2
        displayName: Fetch Test Binaries
        inputs:
          buildType: 'specific'
          project: 'cbb18261-c48f-4abb-8651-8cdcb5474649'
          pipeline: '81'
          buildVersionToDownload: 'latestFromBranch'
          branchName: 'refs/heads/main'
          downloadPath: '$(System.ArtifactsDirectory)\testbinzip\'
          checkDownloadedFiles: true
          artifactName: Tests.$(_BuildConfig).$(_Platform).zip
        condition: and(eq(variables['System.TeamProject'], 'public'), ne(variables['_Platform'], 'arm64'))
      - task: ExtractFiles@1
        displayName: Extract Test Bins
        inputs:
          archiveFilePatterns: '$(System.ArtifactsDirectory)\testbinzip\*.zip'
          destinationFolder: '$(System.ArtifactsDirectory)\testbins'
          cleanDestinationFolder: true
          overwriteExistingFiles: true
        condition: and(eq(variables['System.TeamProject'], 'public'), ne(variables['_Platform'], 'arm64'))
      - task: PowerShell@2
        displayName: Run Tests
        inputs:
          targetType: 'inline'
          script: '.\CIRunDrts.cmd'
          workingDirectory: '$(System.ArtifactsDirectory)\testbins'
        condition: and(eq(variables['System.TeamProject'], 'public'), ne(variables['_Platform'], 'arm64'))
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'C:\Users\cloudtest\AppData\Roaming\QualityVault\Run\Report\'
          Contents: '**'
          TargetFolder: '$(System.DefaultWorkingDirectory)\Results\'
          CleanTargetFolder: true
          OverWrite: true
        condition: and(eq(variables['System.TeamProject'], 'public'), eq(variables['_Platform'], 'x64'), eq(variables['_BuildConfig'], 'Release'))
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'C:\Users\cloudtest\AppData\Roaming\QualityVault\Run\Report\'
          Contents: '**'
          TargetFolder: '$(System.DefaultWorkingDirectory)\ResultsX86\'
          CleanTargetFolder: true
          OverWrite: true
        condition: and(eq(variables['System.TeamProject'], 'public'), eq(variables['_Platform'], 'x86'), eq(variables['_BuildConfig'], 'Release'))
      - task: 1ES.PublishPipelineArtifact@1
        inputs:
          artifactName: 'TestResultsX64'
          targetPath: '$(System.DefaultWorkingDirectory)\Results\'
        condition: and(eq(variables['System.TeamProject'], 'public'), eq(variables['_Platform'], 'x64'), eq(variables['_BuildConfig'], 'Release'))
      - task: 1ES.PublishPipelineArtifact@1
        inputs:
          artifactName: 'TestResultsX86'
          targetPath: '$(System.DefaultWorkingDirectory)\ResultsX86\'
        condition: and(eq(variables['System.TeamProject'], 'public'), eq(variables['_Platform'], 'x86'), eq(variables['_BuildConfig'], 'Release'))
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'XUnit'
          testResultsFiles: 'testResults.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)\Results\'
          testRunTitle: 'Test results'
          mergeTestResults: true
        condition: eq(variables['System.TeamProject'], 'public')