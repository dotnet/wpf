<Project>
   <PropertyGroup>
    <_DotnetApiDocsFilesRoot>$([MSBuild]::NormalizeDirectory('$(NuGetPackageRoot)', '$(_DotnetApiDocsPackageName.ToLower())', '$(MicrosoftPrivateIntellisenseVersion)', 'IntellisenseFiles', 'windowsdesktop'))</_DotnetApiDocsFilesRoot>
    <_IntellisenseXmlDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsBinDir)', 'docs'))</_IntellisenseXmlDir>
  </PropertyGroup>

  <ItemGroup>
    <PackageDownload Include="Microsoft.Private.Intellisense" Version="[$(MicrosoftPrivateIntellisenseVersion)]" />
  </ItemGroup>

  <!--
    ============================================================
                      GetDocFiles
    Restore intellisense xml files from the centrally managed NuGet package that originates from https://github.com/dotnet/dotnet-api-docs.
    This packages is published to 'dotnet6-transport' feed.
    Note: The intellisense package doesn't use NuGet conventions so we need to select manually.
    ============================================================
    -->
  <Target Name="GetDocFiles"
          AfterTargets="Restore">

    <ItemGroup>
      <DocFile Include="$(_DotnetApiDocsFilesRoot)**\*.xml"/>
      <DocFile>
        <!-- trim off slash since it differs by platform and we need to do a string compare -->
        <LCID>$([System.String]::new('%(RecursiveDir)').TrimEnd('\/'))</LCID>
      </DocFile>
      <DocFile>
        <!-- map LCID to culture name that VS expects -->
        <Culture>unknown</Culture>
        <Culture Condition="'%(LCID)' == '1028'">zh-hant/</Culture>
        <Culture Condition="'%(LCID)' == '1031'">de/</Culture>
        <!-- english is placed in the root -->
        <Culture Condition="'%(LCID)' == '1033'"></Culture>
        <Culture Condition="'%(LCID)' == '1036'">fr/</Culture>
        <Culture Condition="'%(LCID)' == '1040'">it/</Culture>
        <Culture Condition="'%(LCID)' == '1041'">ja/</Culture>
        <Culture Condition="'%(LCID)' == '1042'">ko/</Culture>
        <Culture Condition="'%(LCID)' == '1049'">ru/</Culture>
        <Culture Condition="'%(LCID)' == '2052'">zh-hans/</Culture>
        <Culture Condition="'%(LCID)' == '3082'">es/</Culture>
      </DocFile>
      <DocFile>
        <SubFolder>%(Culture)/</SubFolder>
      </DocFile>
    </ItemGroup>

    <Error Condition="'%(DocFile.Culture)' == 'unknown'" Text="Unknown language folder '%(LCID)' for doc files '@(DocFile)'" />

    <Copy SourceFiles="@(DocFile)"
          DestinationFiles="$(_IntellisenseXmlDir)\%(SubFolder)%(FileName)%(Extension)"
          SkipUnchangedFiles="true"
          UseHardlinksIfPossible="true" />

  </Target>
  <PropertyGroup>
    <EnsureReferenceAssemblyPrerequisitesDependsOn>
      $(EnsureReferenceAssemblyPrerequisitesDependsOn);
      EnsureReferenceDestination;
      CopyIntellisenseXmls
    </EnsureReferenceAssemblyPrerequisitesDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <CoreBuildDependsOn>
      EnsureReferenceAssemblyPrerequisites;
      $(CoreBuildDependsOn)
    </CoreBuildDependsOn>
    <ResolveReferencesDependsOn>
      EnsureReferenceAssemblyPrerequisites;
      $(ResolveReferencesDependsOn)
    </ResolveReferencesDependsOn>
  </PropertyGroup>
  
  <Target Name="EnsureReferenceAssemblyPrerequisites"
          DependsOnTargets="$(EnsureReferenceAssemblyPrerequisitesDependsOn)" />
  
  <Target Name="EnsureReferenceDestination" >
    <!-- Create and export properties used in Reference assembly generation                       -->
    <!--                                                                                          -->
    <!-- $(ArtifactsReferenceAssemblyDir) = $(ArtifactsDir)ref\                                   -->
    <!-- $(BaseReferenceAssemblyDir) = $(ArtifactsReferenceAssemblyDir)$(AssemblyName)\           -->
    <!-- $(ReferenceAssemblyDir) = $(BaseReferenceAssemblyDir)$(Configuration)$(TargetFramework)\ -->
    <CreateProperty Condition="'$(ArtifactsReferenceAssemblyDir)'==''" Value="$(ArtifactsDir)ref\">
      <Output PropertyName="ArtifactsReferenceAssemblyDir" TaskParameter="Value"/>
    </CreateProperty>

    <CreateProperty Condition="'$(BaseReferenceAssemblyDir)'==''" Value="$(ArtifactsReferenceAssemblyDir)$(AssemblyName)\">
      <Output PropertyName="BaseReferenceAssemblyDir" TaskParameter="Value"/>
    </CreateProperty>

    <CreateProperty Condition="'$(ReferenceAssemblyDir)'==''" Value="$(BaseReferenceAssemblyDir)$(Configuration)\$(TargetFramework)\">
      <Output PropertyName="ReferenceAssemblyDir" TaskParameter="Value"/>
    </CreateProperty>
  </Target>

  <Target Name="CopyIntellisenseXmls"
          Condition="'$(ReferenceProjectRepoLocation)'=='External' and '$(RepositoryName)'=='wpf'"
          Outputs="$(IntellisenseXmlDir)$(AssemblyName).xml">
    <PropertyGroup>
      <IntellisenseXmlFileSource>$(_IntellisenseXmlDir)$(AssemblyName).xml</IntellisenseXmlFileSource>
      <!-- Set the xml destination (for a later step that copies files from the dotnet-api-docs to local build artifacts) -->
      <IntellisenseXmlDest Condition="'$(ProduceReferenceAssembly)' == 'true' And '$(PackageAsRefAndLib)' != 'true'" >$([System.IO.Path]::ChangeExtension('$(TargetRefPath)', '.xml'))</IntellisenseXmlDest>
      <IntellisenseXmlDest Condition="'$(PackageAsRefAndLib)' == 'true'" >$([System.IO.Path]::ChangeExtension('$(TargetPath)', '.xml'))</IntellisenseXmlDest>
      <IntellisenseXmlDestDir Condition="'$(IntellisenseXmlDest)' != ''">$([System.IO.Path]::GetDirectoryName('$(IntellisenseXmlDest)'))</IntellisenseXmlDestDir>
    </PropertyGroup>
    <!-- 
      EnsureReferenceDestination guarantees that there is exactly 1 ref assembly 
    -->
    <PropertyGroup>
      <IntellisenseXmlFile>$(IntellisenseXmlDir)$(AssemblyName).xml</IntellisenseXmlFile>
    </PropertyGroup>

    <Message Condition="!Exists('$(IntellisenseXmlFile)')"
             Text="$(IntellisenseXmlFile) is missing" />
    
    <Copy SourceFiles="$(IntellisenseXmlFile)"
          Condition="Exists('$(IntellisenseXmlFile)')"
          DestinationFolder="$(ReferenceAssemblyDir)"          
          SkipUnchangedFiles="true"/>
  </Target>

  <!-- 
    Hand crafted reference assemblies need to be copied over into the proper artifacts location. 
    This should be done only if we're dealing with a reference assembly project and that project is
    meant to be shipped from the particular repository we're building.
  -->
  <Target Name="CopyHandCraftedReferenceProjectsToRefDir" 
          AfterTargets="PrepareForRun"
          Condition="'$(ReferenceProjectRepoLocation)'=='External' and '$(RepositoryName)'=='wpf'">
    <Copy SourceFiles="$(TargetPath)"
          Condition="Exists('$(TargetPath)')"
          DestinationFolder="$(ReferenceAssemblyDir)"
          SkipUnchangedFiles="true"/>
  </Target>
  
</Project>
