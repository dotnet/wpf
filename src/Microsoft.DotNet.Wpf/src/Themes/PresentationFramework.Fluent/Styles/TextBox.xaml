<!--
    This Source Code Form is subject to the terms of the MIT License.
    If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
    Copyright (C) Leszek Pomianowski and WPF UI Contributors.
    All Rights Reserved.
    
    Based on Microsoft XAML for Win UI
    Copyright (c) Microsoft Corporation. All Rights Reserved.
-->

<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=System.Runtime">

    <!-- Deprecated TextBox Resources ( Used in .NET 9 ) -->
    <Thickness x:Key="TextBoxAccentBorderThemeThickness">0,0,0,1</Thickness>
    <Thickness x:Key="TextBoxLeftIconMargin">10,0,0,0</Thickness>
    <Thickness x:Key="TextBoxRightIconMargin">0,0,10,0</Thickness>
    <system:Double x:Key="TextBoxClearButtonHeight">24</system:Double>
    <system:String x:Key="ClearGlyph">&#xE894;</system:String>
    
    <!-- These both are redefined in .NET 10 -->
        <!-- <Thickness x:Key="TextBoxBorderThemeThickness">1,1,1,1</Thickness> -->
        <!-- <Thickness x:Key="TextBoxClearButtonMargin">0,0,4,0</Thickness> -->
        <!-- <Thickness x:Key="TextBoxClearButtonPadding">0,0,0,0</Thickness> -->

    <system:Double x:Key="TextBoxIconFontSize">12</system:Double>
    <!-- Instead of TextBoxThemeMinHeight, we need to use TextControlThemeMinHeight, but modifying that right now
            will affect the other styles as well. Once the remaining styles using it are fixed, will remove this resource -->
    <system:Double x:Key="TextBoxThemeMinHeight">32</system:Double>
    <Thickness x:Key="TextBoxClearButtonMargin">0,4,4,4</Thickness>
    <Thickness x:Key="TextBoxClearButtonPadding">0,0,-2,0</Thickness>

    <Style x:Key="DefaultTextBoxBaseStyle" TargetType="{x:Type TextBoxBase}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ContextMenu" Value="{DynamicResource DefaultControlContextMenu}" />
        <Setter Property="Foreground" Value="{DynamicResource TextControlForeground}" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextControlForeground}" />
        <Setter Property="Background" Value="{DynamicResource TextControlBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource TextControlBorderThemeThickness}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="MinHeight" Value="{DynamicResource TextBoxThemeMinHeight}" />
        <Setter Property="MinWidth" Value="{DynamicResource TextControlThemeMinWidth}" />
        <Setter Property="Padding" Value="{DynamicResource TextControlThemePadding}" />
        <Setter Property="Border.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SelectionBrush" Value="{DynamicResource TextControlSelectionHighlightColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Border
                            x:Name="ContentBorder"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}" />

                        <ScrollViewer
                            x:Name="PART_ContentHost"
                            Margin="{TemplateBinding BorderThickness}"
                            CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                            HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                            IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
                            IsTabStop="{TemplateBinding ScrollViewer.IsTabStop}"
                            Padding="{TemplateBinding Padding}"                                
                            TextElement.Foreground="{TemplateBinding Foreground}"
                            VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}" />
                            <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushPointerOver}" />
                            <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource TextControlForegroundPointerOver}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="ContentBorder" Property="BorderThickness" Value="{StaticResource TextControlBorderThemeThicknessFocused}" />
                            <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
                            <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
                            <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}" />
                            <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushDisabled}" />
                            <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="DefaultTextBoxControlTemplate" TargetType="{x:Type TextBox}">
        <Grid>
            <Grid.Resources>
                <Style x:Key="DeleteButtonStyle" TargetType="Button">
                    <Setter Property="Foreground" Value="{DynamicResource TextControlButtonForeground}" />
                    <Setter Property="Background" Value="{DynamicResource TextControlButtonBackground}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrush}" />
                    <Setter Property="Border.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
                    <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />
                    <Setter Property="OverridesDefaultStyle" Value="True" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border x:Name="ButtonLayoutBorder"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            CornerRadius="{TemplateBinding Border.CornerRadius}">
                                    <ContentPresenter x:Name="GlyphElement"
                                                    TextElement.Foreground="{TemplateBinding Foreground}"
                                                    VerticalAlignment="Center"
                                                    HorizontalAlignment="Center" />
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource TextControlButtonBackgroundPointerOver}" />
                                        <Setter Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPointerOver}" />
                                        <Setter Property="Foreground" Value="{DynamicResource TextControlButtonForegroundPointerOver}" />
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource TextControlButtonBackgroundPressed}" />
                                        <Setter Property="BorderBrush" Value="{DynamicResource TextControlButtonBorderBrushPressed}" />
                                        <Setter Property="Foreground" Value="{DynamicResource TextControlButtonForegroundPressed}" />
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="ButtonLayoutBorder" Property="Opacity" Value="0" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Border
                x:Name="ContentBorder"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                MinHeight="{TemplateBinding MinHeight}"
                CornerRadius="{TemplateBinding Border.CornerRadius}" />

            <ScrollViewer
                    x:Name="PART_ContentHost"
                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                    Margin="{TemplateBinding BorderThickness}"
                    HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                    VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" 
                    IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}"
                    IsTabStop="{TemplateBinding ScrollViewer.IsTabStop}"
                    Padding="{TemplateBinding Padding}"
                    TextElement.Foreground="{TemplateBinding Foreground}" />

            <Button x:Name="DeleteButton"
                    Grid.Column="1"
                    Style="{StaticResource DeleteButtonStyle}"
                    Cursor="Arrow"
                    IsTabStop ="False"
                    MinWidth="30"
                    Visibility="Collapsed"
                    VerticalAlignment="Stretch"
                    Padding="{StaticResource TextBoxClearButtonPadding}" 
                    Command="{Binding Path=TemplateButtonCommand, RelativeSource={RelativeSource TemplatedParent}}">

                <TextBlock x:Name="GlyphElement" 
                                FontFamily="{DynamicResource SymbolThemeFontFamily}"
                                FontSize="{DynamicResource TextBoxIconFontSize}"
                                Text="&#xE894;"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center" />
            </Button>     
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter TargetName="DeleteButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="DeleteButton" Property="Margin" Value="{StaticResource TextBoxClearButtonMargin}" />
            </Trigger>
            <Trigger Property="Text" Value="{x:Static system:String.Empty}">
                <Setter TargetName="DeleteButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter TargetName="DeleteButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource TextControlBackgroundPointerOver}" />
                <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushPointerOver}" />
                <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource TextControlForegroundPointerOver}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="ContentBorder" Property="BorderThickness" Value="{StaticResource TextControlBorderThemeThicknessFocused}" />
                <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
                <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
                <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />
            </Trigger>
            <Trigger SourceName="DeleteButton" Property="IsPressed" Value="True">
                <Setter TargetName="ContentBorder" Property="BorderThickness" Value="{StaticResource TextControlBorderThemeThicknessFocused}" />
                <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource TextControlBackgroundFocused}" />
                <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushFocused}" />
                <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource TextControlForegroundFocused}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource TextControlBackgroundDisabled}" />
                <Setter TargetName="ContentBorder" Property="BorderBrush" Value="{DynamicResource TextControlBorderBrushDisabled}" />
                <Setter TargetName="PART_ContentHost" Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}" />
            </Trigger>
            <Trigger Property="AcceptsReturn" Value="True">
                <Setter TargetName="DeleteButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="TextWrapping" Value="Wrap">
                <Setter TargetName="DeleteButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="TextWrapping" Value="WrapWithOverflow">
                <Setter TargetName="DeleteButton" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="DefaultTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ContextMenu" Value="{DynamicResource DefaultControlContextMenu}" />
        <Setter Property="Foreground" Value="{DynamicResource TextControlForeground}" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextControlForeground}" />
        <Setter Property="Background" Value="{DynamicResource TextControlBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource TextControlElevationBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource TextControlBorderThemeThickness}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="MinHeight" Value="{DynamicResource TextBoxThemeMinHeight}" />
        <Setter Property="MinWidth" Value="{DynamicResource TextControlThemeMinWidth}" />
        <Setter Property="Padding" Value="{DynamicResource TextControlThemePadding}" />
        <Setter Property="Border.CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />        
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource TextControlSelectionHighlightColor}"/>
        <Setter Property="Template" Value="{StaticResource DefaultTextBoxControlTemplate}" />
    </Style>

    <Style BasedOn="{StaticResource DefaultTextBoxBaseStyle}" TargetType="{x:Type TextBoxBase}" />
    <Style BasedOn="{StaticResource DefaultTextBoxStyle}" TargetType="{x:Type TextBox}" />

</ResourceDictionary>
