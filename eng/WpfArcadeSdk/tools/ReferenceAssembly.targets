<Project>
  
  <PropertyGroup>
    <EnsureReferenceAssemblyPrerequisitesDependsOn>
      $(EnsureReferenceAssemblyPrerequisitesDependsOn);
      EnsureReferenceDestination;
      CopyIntellisenseXmls
    </EnsureReferenceAssemblyPrerequisitesDependsOn>
  </PropertyGroup>
  
  <PropertyGroup>
    <CoreBuildDependsOn>
      EnsureReferenceAssemblyPrerequisites;
      $(CoreBuildDependsOn)
    </CoreBuildDependsOn>
    <ResolveReferencesDependsOn>
      EnsureReferenceAssemblyPrerequisites;
      $(ResolveReferencesDependsOn)
    </ResolveReferencesDependsOn>
  </PropertyGroup>
  
  <Target Name="EnsureReferenceAssemblyPrerequisites"
          DependsOnTargets="$(EnsureReferenceAssemblyPrerequisitesDependsOn)" />
  
  <Target Name="EnsureReferenceDestination" >
    <!-- Create and export properties used in Reference assembly generation                       -->
    <!--                                                                                          -->
    <!-- $(ArtifactsReferenceAssemblyDir) = $(ArtifactsDir)ref\                                   -->
    <!-- $(BaseReferenceAssemblyDir) = $(ArtifactsReferenceAssemblyDir)$(AssemblyName)\           -->
    <!-- $(ReferenceAssemblyDir) = $(BaseReferenceAssemblyDir)$(Configuration)$(TargetFramework)\ -->
    <!--                                                                                          -->
    <!-- $(TargetRefPath) = $(ReferenceAssemblyDir)\<AssemblyName>                                -->
    <CreateProperty Condition="'$(ArtifactsReferenceAssemblyDir)'==''" Value="$(ArtifactsDir)ref\">
      <Output PropertyName="ArtifactsReferenceAssemblyDir" TaskParameter="Value"/>
    </CreateProperty>

    <CreateProperty Condition="'$(BaseReferenceAssemblyDir)'==''" Value="$(ArtifactsReferenceAssemblyDir)$(AssemblyName)\">
      <Output PropertyName="BaseReferenceAssemblyDir" TaskParameter="Value"/>
    </CreateProperty>

    <CreateProperty Condition="'$(ReferenceAssemblyDir)'==''" Value="$(BaseReferenceAssemblyDir)$(Configuration)\$(TargetFramework)\">
      <Output PropertyName="ReferenceAssemblyDir" TaskParameter="Value"/>
    </CreateProperty>

    <MakeDir Condition="'$(ProduceReferenceAssembly)'=='true' and !Exists('$(ReferenceAssemblyDir)')" Directories="$(ReferenceAssemblyDir)" />

    <ItemGroup>
      <!-- Conditioning this on '$(ProduceReferenceAssembly)'=='true'  ensures that the next <Error> task will never trigger when -->
      <!-- reference-assembly generation is not requested                                                                         -->
      <RefAssemblies Condition="'$(ProduceReferenceAssembly)'=='true'" Include="@(IntermediateRefAssembly->'$(ReferenceAssemblyDir)%(Filename)%(Extension)')" />
    </ItemGroup>

    <Error Condition="@(RefAssemblies->Count()) &gt; 1" Text="More than one reference assembly is produced at the same time!" />

    <PropertyGroup>
      <TargetRefPath>@(RefAssemblies)</TargetRefPath>
    </PropertyGroup>
  </Target>

  <Target Name="CopyIntellisenseXmls" 
          Condition="'$(ProduceReferenceAssembly)' == 'true'"
          Outputs="@(IntermediateRefAssembly->'$(ReferenceAssemblyDir)%(FileName).xml')">
    <PropertyGroup>
      <!-- Also in global.json -->
      <DotNetApiDocsNetCoreApp30>0.0.0.1</DotNetApiDocsNetCoreApp30>
      <IntellisenseXmlDir>$(RepositoryToolsDir)native\bin\dotnet-api-docs_netcoreapp3.0\$(DotNetApiDocsNetCoreApp30)\_intellisense\netcore-3.0\</IntellisenseXmlDir>
    </PropertyGroup>
    
    <Error Condition="!Exists('$(IntellisenseXmlDir)')"
           Text="Intellisense Xml sources not found: IntellisenseXmlDir=$(IntellisenseXmlDir)" />

    <!-- 
      EnsureReferenceDestination guarantees that there is exactly 1 ref assembly 
    -->
    <PropertyGroup>
      <IntellisenseXmlFile>@(IntermediateRefAssembly->'$(IntellisenseXmlDir)%(FileName).xml')</IntellisenseXmlFile>
    </PropertyGroup>

    <Message Condition="!Exists('$(IntellisenseXmlFile)')"
             Text="$(IntellisenseXmlFile) is missing" />
    
    <Copy SourceFiles="$(IntellisenseXmlFile)"
          Condition="Exists('$(IntellisenseXmlFile)')"
          DestinationFolder="$(ReferenceAssemblyDir)"          
          SkipUnchangedFiles="true"/>
  </Target>
</Project>
