<Project>
  <ItemGroup>
    <PackageReference Include="$(MicrosoftPrivateWinformsPackage)"
                      Version="$(MicrosoftPrivateWinformsVersion)"
                      ExcludeAssets="All"
                      GeneratePathProperty="True"
                      Condition="'$(MSBuildProjectExtension)' != '.vcxproj'
                              And '$(TargetFrameworkIdentifier)' == '.NETCoreApp'
                              And $([MSBuild]::VersionGreaterThanOrEquals('$(TargetFrameworkVersion)', '3.0'))
                              And '$(NoAutoMicrosoftPrivateWinformsReference)' != 'true'"/>

    <PackageReference Update="Microsoft.NETCore.App"
                    GeneratePathProperty="true"
                    Condition="'$(MSBuildProjectExtension)'!='.vcxproj' And '$(TargetFrameworkIdentifier)' == '.NETCoreApp'" />
  </ItemGroup>

  <Target Name="GeneratePathPropertyforMicrosoftWindowsDesktopApp"
          AfterTargets="ResolveFrameworkReferences">
    <ItemGroup>
      <PackageReference Update="Microsoft.WindowsDesktop.App"
                        GeneratePathProperty="true" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <ResolveAssemblyReferencesDependsOn>
      ResolveMicrosoftDotNetWpfGitHubReferences;
      ResolveMicrosoftDotNetWpfDncEngReferencesForCpp;
      ResolveWinFormsReferences;
      $(ResolveAssemblyReferencesDependsOn)
    </ResolveAssemblyReferencesDependsOn>
  </PropertyGroup>

  <Target
    Name="ResolveMicrosoftDotNetWpfGitHubReferences"
    Returns="@(ReferencePath)"
    Condition="'@(MicrosoftDotNetWpfGitHubReference)'!=''
           And '$(MSBuildProjectExtension)' != '.vcxproj'
           And '$(TargetFrameworkIdentifier)' == '.NETCoreApp'
           And $([MSBuild]::VersionGreaterThanOrEquals('$(TargetFrameworkVersion)', '3.0'))
           and '$(DoNotLimitMicrosoftDotNetWpfGitHubReferences)'!='true'">
    <!--
    In your project, Add a references to WPF GitHub transport package like this:
      <ItemGroup>
        <MicrosoftDotNetWpfGitHubReference Include="System.Xaml" />
      </ItemGroup>

      It will get translated into something like this:
      <ItemGroup>
        <Reference Include="C:\Users\username\.nuget\packages\microsoft.dotnet.wpf.github\4.8.0-preview4.19174.2\ref\netcoreapp3.0\System.Xaml.dll" />
      </ItemGroup>
    -->
    <PropertyGroup>
      <!-- Since WPF reference assemblies do not carry internals, we need to directly reference the RID-specific lib assemblies from dotnet_wpf_int builds. -->
      <WpfGitHubRidSpecificPackagePath Condition="'$(WpfRuntimeIdentifier)'=='win-x86' And '$(Configuration)' != 'Debug'">$(Pkgruntime_win-x86_Microsoft_DotNet_Wpf_GitHub)</WpfGitHubRidSpecificPackagePath>
      <WpfGitHubRidSpecificPackagePath Condition="'$(WpfRuntimeIdentifier)'=='win-x86' And '$(Configuration)' == 'Debug'">$(Pkgruntime_win-x86_Microsoft_DotNet_Wpf_GitHub_Debug)</WpfGitHubRidSpecificPackagePath>

      <WpfGitHubRidSpecificPackagePath Condition="'$(WpfRuntimeIdentifier)'=='win-x64' And '$(Configuration)' != 'Debug'">$(Pkgruntime_win-x64_Microsoft_DotNet_Wpf_GitHub)</WpfGitHubRidSpecificPackagePath>
      <WpfGitHubRidSpecificPackagePath Condition="'$(WpfRuntimeIdentifier)'=='win-x64' And '$(Configuration)' == 'Debug'">$(Pkgruntime_win-x64_Microsoft_DotNet_Wpf_GitHub_Debug)</WpfGitHubRidSpecificPackagePath>

      <WpfGitHubRidSpecificPackagePath Condition="'$(WpfRuntimeIdentifier)'=='win-arm64' And '$(Configuration)' != 'Debug'">$(Pkgruntime_win-arm64_Microsoft_DotNet_Wpf_GitHub)</WpfGitHubRidSpecificPackagePath>
      <WpfGitHubRidSpecificPackagePath Condition="'$(WpfRuntimeIdentifier)'=='win-arm64' And '$(Configuration)' == 'Debug'">$(Pkgruntime_win-arm64_Microsoft_DotNet_Wpf_GitHub_Debug)</WpfGitHubRidSpecificPackagePath>
    </PropertyGroup>
    <ItemGroup>
      <Reference Include="$(WpfGitHubRidSpecificPackagePath)\lib\$(TargetFramework)\%(MicrosoftDotNetWpfGitHubReference.Identity).dll"
                 Condition="Exists('$(WpfGitHubRidSpecificPackagePath)\lib\$(TargetFramework)\%(MicrosoftDotNetWpfGitHubReference.Identity).dll')">
        <NuGetPackageId>runtime.$(WpfRuntimeIdentifier).$(GitHubTransportPackageName)</NuGetPackageId>
      </Reference>
    </ItemGroup>
  </Target>

  <Target
    Name="ResolveMicrosoftDotNetWpfDncEngReferencesForCpp"
    Returns="@(Link)"
    Condition="'@(MicrosoftDotNetWpfGitHubReference)'!=''
           And '$(MSBuildProjectExtension)' == '.vcxproj'
           and '$(DoNotLimitMicrosoftDotNetWpfGitHubReferences)'!='true'">
    <!--
      Normally, we would use lib files from RID-specific Microsoft.DotNet.Wpf.DncEng package directly. Since this package
      was most likley not restored prior to the start of the build, it had to be restored from with the CppHelper target, and the libs in this package
      are now enumerated within @(NuGetReferencesForCpp) item.
    -->

    <!--
      Select items from with @(NuGetReferencesForCpp) (which is a proxy for Microsoft.DotNet.Wpf.DncEng's native libs)
      that were requested in MicrosoftDotNetWpfGitHubReference
    -->
    <FilterItem1ByItem2 Item1="@(NuGetReferencesForCpp->'%(FileName)')"
                        Item2="@(MicrosoftDotNetWpfGitHubReference)"
                        Metadata2="Identity"
                        PreserveItem1Metadata="true">
      <Output ItemName="_nugetLibReferencesForCpp" TaskParameter="Result" />
    </FilterItem1ByItem2>

    <ItemGroup>
      <Link Include="@(_nugetLibReferencesForCpp->'%(FilePath)')" />
    </ItemGroup>
  </Target>

  <Target Name="SplitTargetFramework">
    <PropertyGroup>
      <!-- Split out the target framework. "net10.0-windows" is an example. -->
      <_targetFrameworkIdentifier>$([MSBuild]::GetTargetFrameworkIdentifier($(TargetFramework)))</_targetFrameworkIdentifier>
      <_targetFrameworkIdentifier Condition="'$(_targetFrameworkIdentifier)' == '.NETCoreApp'">net</_targetFrameworkIdentifier>
      <_targetFrameworkVersion>$([MSBuild]::GetTargetFrameworkVersion($(TargetFramework)))</_targetFrameworkVersion>
      <_targetFrameworkRoot>$(_targetFrameworkIdentifier)$(_targetFrameworkVersion)</_targetFrameworkRoot>
    </PropertyGroup>
  </Target>

  <!--
    In your project, Add a references to WinForms transport package like this:
      <ItemGroup>
        <MicrosoftPrivateWinFormsReference Include="Accessbility" />
      </ItemGroup>

    It will get translated into something like this:
      <ItemGroup>
        <Reference Include="C:\Users\username\.nuget\packages\microsoft.private.winforms\4.8.0-preview4.19170.4\lib\netcoreapp3.0\Accessibility.dll" />
      </ItemGroup>
   -->
  <Target Name="ResolveWinFormsReferences"
          DependsOnTargets="SplitTargetFramework"
          Condition="'@(MicrosoftPrivateWinFormsReference)'!=''
                 And '$(TargetFrameworkIdentifier)' == '.NETCoreApp'
                 And $([MSBuild]::VersionGreaterThanOrEquals('$(TargetFrameworkVersion)', '3.0')) ">
    <PropertyGroup>
      <!-- Use the current TargetFramework if not otherwise specified for WinForms private package -->
      <_WinFormsTargetFrameworkVersion Condition="'$(_WinFormsTargetFrameworkVersion)' == '' and '$(DotNetBuildOrchestrator)' == 'true'">$(NetCurrent)</_WinFormsTargetFrameworkVersion>
      <_WinFormsTargetFrameworkVersion Condition="'$(_WinFormsTargetFrameworkVersion)' == ''">$(_targetFrameworkRoot)</_WinFormsTargetFrameworkVersion>
    </PropertyGroup>
    <ItemGroup>
      <Reference Include="$(PkgMicrosoft_Private_Winforms)\lib\$(_WinFormsTargetFrameworkVersion)\%(MicrosoftPrivateWinFormsReference.Identity).dll"
                 Condition="Exists('$(PkgMicrosoft_Private_Winforms)\lib\$(_WinFormsTargetFrameworkVersion)\%(MicrosoftPrivateWinFormsReference.Identity).dll')">
        <NuGetPackageId>Microsoft.Private.Winforms</NuGetPackageId>
      </Reference>
    </ItemGroup>
    <Error Condition="!Exists('$(PkgMicrosoft_Private_Winforms)\lib\$(_WinFormsTargetFrameworkVersion)\%(MicrosoftPrivateWinFormsReference.Identity).dll')"
           Text="$(PkgMicrosoft_Private_Winforms)\lib\$(_WinFormsTargetFrameworkVersion)\%(MicrosoftPrivateWinFormsReference.Identity).dll could not be found."/>
  </Target>

  <ItemGroup>
    <!-- We always want to use the local WindowsBase, not the one coming from the .NET runtime. -->
    <DefaultReferenceExclusion Include="WindowsBase"/>
  </ItemGroup>

  <!--
    Allows excluding specific .NET runtime libraries from being implicitly referenced.
    For example, to exclude WindowsBase from being implicitly referenced, add the following to your project file:

      <ItemGroup>
        <DefaultReferenceExclusion Include="WindowsBase" />
      </ItemGroup>
  -->
  <Target Name="FilterImplicitAssemblyReferences"
          Condition="'@(DefaultReferenceExclusion)' != ''"
          AfterTargets="ResolveTargetingPackAssets"
          BeforeTargets="_HandlePackageFileConflicts;ResolveAssemblyReferences">
    <ItemGroup>
      <_referenceExclusion Include="@(DefaultReferenceExclusion)">
        <AssemblyName>%(DefaultReferenceExclusion.Identity)</AssemblyName>
        <ExternallyResolved>true</ExternallyResolved>
      </_referenceExclusion>

      <Reference Remove="@(_referenceExclusion)"
                 MatchOnMetadata="AssemblyName;ExternallyResolved"/>
    </ItemGroup>
  </Target>
</Project>
